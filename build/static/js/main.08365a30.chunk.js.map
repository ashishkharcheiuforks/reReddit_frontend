{"version":3,"sources":["serviceWorker.js","urls/index.js","reducers/subreddit.js","actions/actionTypes.js","reducers/userAuth.js","reducers/userAuthModal.js","reducers/postDetail.js","utilities/reducerUtils/index.js","reducers/comments.js","reducers/postList.js","reducers/createPost.js","reducers/createSubreddit.js","reducers/editPost.js","reducers/search.js","reducers/index.js","utilities/apiErrorHandler/index.js","store.js","middleware/apiMiddleware/index.js","api/constants.js","api/apiUtils.js","api/Subreddit/index.js","api/UserAuth/index.js","actions/UserAuthModal/index.js","actions/UserAuth/index.js","actions/Subreddit/index.js","components/Buttons/LoadingButton/index.js","components/Buttons/NavSelectorButton/index.js","utilities/HOC/index.js","components/Buttons/SubscriptionButton/index.js","containers/SubscriptionButtonContainer/index.js","components/SideBar/index.js","containers/SideBarContainer/index.js","components/Loaders/PanelLoader/index.js","components/Loaders/PanelListLoader/index.js","components/Loaders/SideBarLoader/index.js","components/Loaders/BlockLoader/index.js","components/Subreddit/index.js","containers/SubredditContainer/index.js","components/NavBar/NavBarDropdown.js","components/FieldGroup/index.js","components/SearchBar/index.js","actions/Search/index.js","api/Search/index.js","containers/SearchBarContainer/index.js","components/NavBar/index.js","components/UserButton/index.js","components/UserAuthNav/UnauthenticatedUser.js","components/UserAuthNav/AuthenticatedUser.js","components/UserAuthNav/index.js","containers/NavBarContainer/index.js","components/AlertMessage/index.js","components/UserAuthModal/index.js","components/ModalForm/FormButton/index.js","components/ModalForm/ModalLoginForm/index.js","containers/UserAuthModalContainer/LoginModalContainer.js","components/ModalForm/ModalRegisterForm/index.js","containers/UserAuthModalContainer/RegisterModalContainer.js","containers/UserAuthModalContainer/index.js","components/TextEditor/index.js","components/CreatePost/index.js","api/Posts/index.js","actions/Posts/index.js","containers/CreatePostContainer/index.js","components/Voter/index.js","actions/Voter/index.js","api/Voter/index.js","containers/VoterContainer/index.js","components/EllipsisButton/index.js","components/ShareButton/index.js","components/PostPanel/index.js","containers/PostPanelContainer/index.js","components/PostList/EmptyPostList.js","components/PostList/index.js","containers/PostListContainer/index.js","components/PostDetail/PostInfoLine.js","containers/PostEditorContainer/index.js","api/Comments/index.js","actions/Comments/index.js","containers/CommentEditorContainer/index.js","components/Comment/CommentInfoLine/index.js","components/Comment/CommentBody/index.js","components/Comment/ExpandedComment/index.js","components/Comment/CollapsedComment/index.js","components/Comment/index.js","containers/CommentContainer/index.js","components/CommentTreeList/index.js","containers/CommentTreeListContainer/index.js","components/PostDetail/index.js","containers/PostDetailContainer/index.js","components/CreateSubreddit/index.js","containers/CreateSubredditContainer/index.js","components/SubredditPanel/index.js","containers/SubredditPanelContainer/index.js","components/SubredditList/index.js","components/SearchResults/index.js","containers/SearchResultsContainer/index.js","index.js"],"names":["Boolean","window","location","hostname","match","SUBREDDIT_URL","title","concat","initialState","loading","error","pseudo","description","subscriptionLoading","checkForPseudoSubreddits","indexOf","toLowerCase","getSubredditTitle","state","subreddit","getSubredditData","psuedo","arguments","length","undefined","action","type","Object","objectSpread","data","token","username","pk","subs","moderated_subs","getAuthUsername","userAuth","getAuthUserSubredditTitles","map","showModal","displayType","errorMessage","successMessage","userAuthModal","warningMessage","body","poster","getPostDetailTitle","postDetail","getPostDetailBody","getPostDetailPosterUsername","getPostDetailPk","getPostDetailLoading","poster_username","updateObjectOnVote","oldObj","voteType","voteState","voteDisplayState","newVoteState","newUpvotes","upvotes","allIds","objList","idLabel","forEach","obj","push","objectById","updateFcn","objById","postsById","postList","post","vote_state","subreddit_title","rest","objectWithoutProperties","posterUsername","subredditTitle","addComment","newComment","updatedComment","created","newRoots","rootCommentIds","slice","splice","addRootCommentId","commentsById","defineProperty","parent","newCommentsById","parentId","oldParent","children","newChildren","newParent","addChildCommentId","updateComment","id","newProps","oldObject","newValues","oldComment","postersById","createCommentError","createCommentLoading","getRootCommentPks","comments","getCommentById","getPosterByCommentId","posterId","getCommentsLoading","entities","posters","result","commentId","comment","vote_type","deleted","allPosts","deletionPostId","deleteError","getPostById","getAllPosts","postId","Number","_state$postsById","_toPropertyKey","newAllPosts","toConsumableArray","deletionIndex","deletePost","posts","creating","getCreatePostLoading","createPost","getCreatePostError","newSubredditData","getCreateSubredditError","createSubreddit","getCreateSubredditLoading","showDetailPostEditor","getPostEditorShowState","editPost","getEditPostError","getEditPostLoading","query","allSubreddits","subredditsById","allUsers","usersById","searchResultsView","getSearchError","search","getSearchLoading","getSearchQuery","getSearchAllSubreddits","getSearchAllUsers","getSearchSubredditById","getSearchResultsView","users","subreddits","viewName","rootReducer","combineReducers","apiRequestErrorHandler","e","console","log","response","erd","detail","non_field_errors","key","keys","errorField","String","charAt","toUpperCase","substring","status","statusText","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","persistConfig","storage","persistedReducer","persistReducer","store","createStore","applyMiddleware","next","startsWith","callAPI","types","successActionCreator","failureActionCreator","request","dispatch","then","success","getState","catch","Promise","reject","failure","thunkMiddleware","persistor","persistStore","API_ROOT_URL","process","VOTE_URL","COMMENT_LIST_URL","COMMENT_DETAIL_URL","commentPk","SUB_LIST_URL","SUB_DETAIL_URL","USER_LIST_URL","POST_LIST_URL","POST_DETAIL_URL","tokenContextObj","headers","Authorization","subredditSubscribeApi","subAction","axios","SUB_SUBSCRIBE_URL","userUpdateApi","get","USER_DETAIL_URL","showUserAuthModal","hideUserAuthModal","updateErrorMessage","makeUserLoginRequest","password","credentials","makeUserRegisterRequest","email","userData","registerSuccessLoginModal","userAuthLogout","makeSubDetailRequest","getSubDetailApi","makeCreateSubredditRequest","subredditData","createSubredditApi","makeSubSubscriptionRequest","onSuccessfulSubscription","makeUserUpdateRequest","LoadingButton","props","className","spinner","react_default","a","createElement","react_spinners","size","Button","assign","disabled","NavSelectorButton","active","onClick","activeStyle","opacity","borderBottom","style","withEither","conditionalRenderingFn","EitherComponent","Component","withMaybe","SubscriptionButton","authenticatedUsername","userSubscriptions","includes","_ref2","makeSubscriptionRequest","_ref","connect","Buttons_SubscriptionButton","withRouter","showUserAuthRegisterModal","history","containers_SubscriptionButtonContainer","_props$subredditData","components_SideBar","PanelLoader","Panel","Body","color","PanelListLoader","panelNumber","panelList","Array","Loaders_PanelLoader","defaultProps","SideBarLoader","BlockLoader","skinny","primaryComponent","_props$match$params$s","params","routeSubredditTitle","restProps","skinnyContainer","SideBarContainerWithLoader","SideBarContainer","headerBar","SubredditContainer","this","fetchSubDetail","prevProps","_this$props","_this$props$subreddit","components_Subreddit","NavBarDropdown","subscribedSubs","subscribed","sub","lib","exact","to","MenuItem","eventKey","NavDropdown","divider","FieldGroup","label","help","FormGroup","controlId","ControlLabel","FormControl","HelpBlock","SearchBar","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","setState","target","value","handleSearchSubmit","bind","assertThisInitialized","preventDefault","handleSearchRequest","forceUpdate","Navbar","Form","pullLeft","onSubmit","components_FieldGroup","placeholder","name","onChange","Buttons_LoadingButton","makeSearchRequest","q","searchApi","setSearchQuery","components_SearchBar","NavBar","inverse","fixed","fluid","Header","Brand","NavLink","Nav","NavBar_NavBarDropdown","containers_SearchBarContainer","UserButton","userButtonId","inverted","UnauthenticatedUser","middleWareTest","pullRight","NavItem","components_UserButton","AuthenticatedUser","handleLogout","UserAuthNav","UserAuthNav_AuthenticatedUser","UserAuthNav_UnauthenticatedUser","NavBarContainer","render","components_NavBar","components_UserAuthNav","pure","SuccessAlert","Alert","bsStyle","fa","align","ErrorAlert","ErrorAlertWithError","UserAuthModal","eMessage","handleHide","formComponent","messageProps","sMessage","AlertMessage_SuccessAlert","AlertMessage_ErrorAlert","Modal","onHide","show","closeButton","Title","FormButton","handleClick","ModalLoginForm","handleSubmit","handleLogin","autoFocus","ModalForm_FormButton","components_UserAuthModal","ModalForm_ModalLoginForm","ModalRegisterForm","handleRegister","ModalForm_ModalRegisterForm","UserAuthModalContainer_LoginModalContainer","UserAuthModalContainer_RegisterModalContainer","TextEditor","handleSubmitClick","editorHtml","initialValue","formats","modules","toolbar","header","font","list","indent","quillNode","React","createRef","focusOnEditor","current","focus","html","_this2","usage","onBlur","submitButtonWord","react","react_quill_lib_default","ref","CreatePost","handleTitleChange","handleCreatePost","replace","CreatePostErrorAlert","components_TextEditor","handleCommentSubmit","getSubPostListApi","orderBy","orderby","SUB_POST_LIST_URL","createPostApi","CREATE_POST_URL","makeUpdatePostRequest","patch","updatePostApi","makeDeletePostRequest","onDeletePostRequest","delete","deletePostApi","makePostDetailRequest","getPostDetailApi","CreatePostContainer","components_CreatePost","makeCreatePostRequest","Voter","upvotedStyle","downvotedStyle","displayState","handleVote","makeVoteRequest","voteData","onVoteSuccess","itemType","itemPk","itemFn","item_fn","voteApi","hasOwnProperty","ReferenceError","ownProps","components_Voter","EllipsisButton","Dropdown","Toggle","noCaret","Menu","ShareButton","toggleTooltip","showTooltip","copyToClipboard","copyNode","select","document","execCommand","setTimeout","copyTooltip","Tooltip","shareUrl","OverlayTrigger","placement","overlay","trigger","delayHide","bsSize","readOnly","aria-hidden","PostPanel","handlePanelClick","HTMLDivElement","_this$props2","authUsername","handleDeletePost","AuthEllipsis","showEllipsis","containers_VoterContainer","Link","href","components_ShareButton","onSelect","postPk","components_PostPanel","EmptyPostList","Loaders_PanelListLoader","PostList_EmptyPostList","postPanels","containers_PostPanelContainer","PostListContainer","fetchPostList","components_PostList","makeSubPostListRequest","PostInfoLine","_handleSubmit","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","t0","onEditorSubmitSuccess","stop","_x","apply","getCommentTreeApi","config","POST_COMMENT_TREES_URL","normalizeCommentTreeOnSuccess","nestedComments","posterSchema","schema","Entity","idAttribute","commentSchema","commentListSchema","define","normalizedComments","normalize","entries","slicedToArray","makeCreateCommentRequest","commentData","parentPk","parent_fn","rootComment","createCommentApi","makeDeleteCommentRequest","deleteCommentApi","makeUpdateCommentRequest","updateCommentApi","commentBody","onEditorSubmit","CommentInfoLine","upvotesLabel","CommentBody","handleDeleteComment","handleToggleReplyEditor","handleToggleUpdateEditor","dangerouslySetInnerHTML","__html","ExpandedComment","showReplyEditor","showUpdateEditor","childrenList","handleCollapse","handleToggleCollapse","ReplyEditorWithHide","showEditor","CommentEditorContainer","CommentBodyWithDeleteAndUpdateEditor","Comment_CommentInfoLine","CollapsedComment","handleExpansion","io","Comment","collapsed","childrenPk","isArray","childPk","containers_CommentContainer","CollapsibleComment","posterData","components_Comment","CommentTreeList","rootCommentPks","commentRootList","rootPk","AlertOnError","CommentListWithLoading","containers_CommentEditorContainer","CommentTreeListContainer","fetchCommentList","components_CommentTreeList","createdComment","PostDetail","scrollToCommentList","scrollTo","top","commentListNode","offsetTop","behavior","handleDelete","commentScroll","showPostEditor","togglePostEditor","Loaders_BlockLoader","PostDetail_PostInfoLine","containers_PostEditorContainer","containers_CommentTreeListContainer","PostDetailContainer","fetchPostDetail","editPostError","components_PostDetail","CreateSubreddit","handleDescriptionChange","handleCreateSubreddit","componentClass","CreateSubredditContainer","components_CreateSubreddit","SubredditPanel","handleSubredditRedirect","members","SubredditPanelContainer","components_SubredditPanel","SubredditList","subredditList","subredditPk","containers_SubredditPanelContainer","SearchResults","resultsView","changeResultsView","ConditionalResultsList","view","PostList","Buttons_NavSelectorButton","SearchResultsContainer","searchRequest","components_SearchResults","setSearchResultsView","WebFont","load","google","families","ReactDOM","es","integration_react","BrowserRouter","containers_NavBarContainer","containers_UserAuthModalContainer","Switch","Route","path","containers_SubredditContainer","containers_CreatePostContainer","containers_PostDetailContainer","containers_PostListContainer","containers_CreateSubredditContainer","containers_SearchResultsContainer","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.08365a30.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const SEARCH_URL = \"/search\";\n\nexport const SUBREDDIT_URL = title => `/r/${title}`;\nexport const HOME_SUBREDDIT_URL = \"\";\n\n// compare urls disregarding the trailing slash\nexport const urlMatch = (first, second) => {\n  return first === second || `${first}/` === second || first === `${second}/`;\n};\n","import {\n  FETCH_SUB_DETAIL_REQUEST,\n  FETCH_SUB_DETAIL_SUCCESS,\n  FETCH_SUB_DETAIL_FAILURE,\n  SET_SUB_TO_HOME,\n  SUBREDDIT_SUBSCRIBE_REQUEST,\n  SUBREDDIT_SUBSCRIBE_FAILURE,\n  SUBREDDIT_SUBSCRIBE_SUCCESS\n} from \"../actions/actionTypes\";\n\nconst initialState = {\n  loading: false,\n  error: null,\n  title: null,\n  pseudo: false,\n  description: null,\n  subscriptionLoading: false\n};\n\n// psuedosubreddits are those like 'home' or 'popular'\n// They aren't true subreddits that can be posted to\n// but they do share enough similarities to be listed with\n// the others.\n// This is exported so that a title grabbed from the router can be\n// before the state is updated if necessary. (see Subreddit component)\nexport const checkForPseudoSubreddits = title => {\n  const pseudos = [\"popular\", \"home\", \"all\"];\n  return pseudos.indexOf(title.toLowerCase()) >= 0;\n};\n\nconst subreddit = (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_SUB_DETAIL_REQUEST:\n      return {\n        ...state,\n        loading: true,\n        error: null\n      };\n    case FETCH_SUB_DETAIL_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        error: null,\n        title: action.data.title,\n        pseudo: checkForPseudoSubreddits(action.data.title),\n        description: action.data.description\n      };\n    case FETCH_SUB_DETAIL_FAILURE:\n      return {\n        ...state,\n        loading: false,\n        error: action.error\n      };\n    case SET_SUB_TO_HOME:\n      return {\n        ...state,\n        loading: false,\n        error: null,\n        title: action.title\n      };\n    case SUBREDDIT_SUBSCRIBE_REQUEST:\n      return {\n        ...state,\n        subscriptionLoading: true\n      };\n    case SUBREDDIT_SUBSCRIBE_SUCCESS:\n      return {\n        ...state,\n        subscriptionLoading: false\n      };\n    case SUBREDDIT_SUBSCRIBE_FAILURE:\n      return {\n        ...state,\n        subscriptionLoading: false\n      };\n    default:\n      return state;\n  }\n};\n\n// selectors\nexport const getSubredditTitle = state => state.subreddit.title;\nexport const getSubredditData = state => ({\n  title: state.subreddit.title,\n  description: state.subreddit.description,\n  pseudo: state.subreddit.psuedo,\n  loading: state.subreddit.loading,\n  error: state.subreddit.error\n});\n\nexport default subreddit;\n","export const FETCH_POST_COMMENT_TREES_REQUEST =\n  \"FETCH_POST_COMMENT_TREES_REQUEST\";\nexport const FETCH_POST_COMMENT_TREES_SUCCESS =\n  \"FETCH_POST_COMMENT_TREES_SUCCESS\";\nexport const FETCH_POST_COMMENT_TREES_FAILURE =\n  \"FETCH_POST_COMMENT_TREES_FAILURE\";\nexport const CREATE_COMMENT_REQUEST = \"CREATE_COMMENT_REQUEST\";\nexport const CREATE_COMMENT_SUCCESS = \"CREATE_COMMENT_SUCCESS\";\nexport const CREATE_COMMENT_FAILURE = \"CREATE_COMMENT_FAILURE\";\nexport const DELETE_COMMENT_REQUEST = \"DELETE_COMMENT_REQUEST\";\nexport const DELETE_COMMENT_SUCCESS = \"DELETE_COMMENT_SUCCESS\";\nexport const DELETE_COMMENT_FAILURE = \"DELETE_COMMENT_FAILURE\";\nexport const UPDATE_COMMENT_REQUEST = \"UPDATE_COMMENT_REQUEST\";\nexport const UPDATE_COMMENT_SUCCESS = \"UPDATE_COMMENT_SUCCESS\";\nexport const UPDATE_COMMENT_FAILURE = \"UPDATE_COMMENT_FAILURE\";\nexport const COMMENT_VOTE_SUCCESS = \"COMMENT_VOTE_SUCCESS\";\n\nexport const VOTE_REQUEST = \"VOTE_REQUEST\";\nexport const VOTE_SUCCESS = \"VOTE_SUCCESS\";\nexport const VOTE_FAILURE = \"VOTE_FAILURE\";\n\nexport const SEARCH_REQUEST = \"SEARCH_REQUEST\";\nexport const SEARCH_SUCCESS = \"SEARCH_SUCCESS\";\nexport const SEARCH_FAILURE = \"SEARCH_FAILURE\";\nexport const SET_SEARCH_QUERY = \"SET_SEARCH_QUERY\";\nexport const SET_SEARCH_RESULTS_VIEW = \"SET_SEARCH_RESULTS_VIEW\";\n\nexport const FETCH_SUB_DETAIL_REQUEST = \"FETCH_SUB_DETAIL_REQUEST\";\nexport const FETCH_SUB_DETAIL_SUCCESS = \"FETCH_SUB_DETAIL_SUCCESS\";\nexport const FETCH_SUB_DETAIL_FAILURE = \"FETCH_SUB_DETAIL_FAILURE\";\nexport const SET_SUB_TO_HOME = \"SET_SUB_TO_HOME\";\nexport const SUBREDDIT_SUBSCRIBE_REQUEST = \"SUBREDDIT_SUBSCRIBE_REQUEST\";\nexport const SUBREDDIT_SUBSCRIBE_SUCCESS = \"SUBREDDIT_SUBSCRIBE_SUCCESS\";\nexport const SUBREDDIT_SUBSCRIBE_FAILURE = \"SUBREDDIT_SUBSCRIBE_FAILURE\";\nexport const CREATE_SUBREDDIT_REQUEST = \"CREATE_SUBREDDIT_REQUEST\";\nexport const CREATE_SUBREDDIT_SUCCESS = \"CREATE_SUBREDDIT_SUCCESS\";\nexport const CREATE_SUBREDDIT_FAILURE = \"CREATE_SUBREDDIT_FAILURE\";\nexport const DELETE_SUBREDDIT_REQUEST = \"DELETE_SUBREDDIT_REQUEST\";\nexport const DELETE_SUBREDDIT_SUCCESS = \"DELETE_SUBREDDIT_SUCCESS\";\nexport const DELETE_SUBREDDIT_FAILURE = \"DELETE_SUBREDDIT_FAILURE\";\n\nexport const FETCH_POST_LIST_REQUEST = \"FETCH_POST_LIST_REQUEST\";\nexport const FETCH_POST_LIST_SUCCESS = \"FETCH_POST_LIST_SUCCESS\";\nexport const FETCH_POST_LIST_FAILURE = \"FETCH_POST_LIST_FAILURE\";\nexport const FETCH_POST_DETAIL_REQUEST = \"FETCH_POST_DETAIL_REQUEST\";\nexport const FETCH_POST_DETAIL_SUCCESS = \"FETCH_POST_DETAIL_SUCCESS\";\nexport const FETCH_POST_DETAIL_FAILURE = \"FETCH_POST_DETAIL_FAILURE\";\nexport const CREATE_POST_REQUEST = \"CREATE_POST_REQUEST\";\nexport const CREATE_POST_SUCCESS = \"CREATE_POST_SUCCESS\";\nexport const CREATE_POST_FAILURE = \"CREATE_POST_FAILURE\";\nexport const DELETE_POST_REQUEST = \"DELETE_POST_REQUEST\";\nexport const DELETE_POST_SUCCESS = \"DELETE_POST_SUCCESS\";\nexport const DELETE_POST_FAILURE = \"DELETE_POST_FAILURE\";\nexport const UPDATE_POST_REQUEST = \"UPDATE_POST_REQUEST\";\nexport const UPDATE_POST_SUCCESS = \"UPDATE_POST_SUCCESS\";\nexport const UPDATE_POST_FAILURE = \"UPDATE_POST_FAILURE\";\nexport const POST_VOTE_SUCCESS = \"POST_VOTE_SUCCESS\";\nexport const TOGGLE_POST_EDITOR = \"TOGGLE_POST_EDITOR\";\n\nexport const USER_AUTH_LOGIN_REQUEST = \"USER_AUTH_LOGIN_REQUEST\";\nexport const USER_AUTH_LOGIN_SUCCESS = \"USER_AUTH_LOGIN_SUCCESS\";\nexport const USER_AUTH_LOGIN_FAILURE = \"USER_AUTH_LOGIN_FAILURE\";\nexport const USER_AUTH_REGISTER_REQUEST = \"USER_AUTH_REGISTER_REQUEST\";\nexport const USER_AUTH_REGISTER_SUCCESS = \"USER_AUTH_REGISTER_SUCCESS\";\nexport const USER_AUTH_REGISTER_FAILURE = \"USER_AUTH_REGISTER_FAILURE\";\nexport const USER_AUTH_UPDATE_REQUEST = \"USER_AUTH_UPDATE_REQUEST\";\nexport const USER_AUTH_UPDATE_SUCCESS = \"USER_AUTH_UPDATE_SUCCESS\";\nexport const USER_AUTH_UPDATE_FAILURE = \"USER_AUTH_UPDATE_FAILURE\";\nexport const USER_AUTH_LOGOUT_REQUEST = \"USER_AUTH_LOGOUT_REQUEST\";\nexport const USER_AUTH_LOGOUT_SUCCESS = \"USER_AUTH_LOGOUT_SUCCESS\";\nexport const USER_AUTH_LOGOUT_FAILURE = \"USER_AUTH_LOGOUT_FAILURE\";\n\nexport const SHOW_USER_AUTH_MODAL = \"SHOW_USER_AUTH_MODAL\";\nexport const HIDE_USER_AUTH_MODAL = \"HIDE_USER_AUTH_MODAL\";\nexport const UPDATE_USER_AUTH_MODAL_ERROR = \"UPDATE_USER_AUTH_MODAL_ERROR\";\n\nexport const API_SUB_DETAIL = \"API_SUB_DETAIL\";\nexport const API_SUB_POST_LIST = \"API_SUB_POST_LIST\";\nexport const API_SUBREDDIT_SUBSCRIBE = \"API_SUBREDDIT_SUBSCRIBE\";\nexport const API_CREATE_SUBREDDIT = \"API_CREATE_SUBREDDIT\";\nexport const API_USER_AUTH_UPDATE = \"API_USER_AUTH_UPDATE\";\nexport const API_USER_AUTH_LOGOUT = \"API_USER_AUTH_LOGOUT\";\nexport const API_USER_AUTH_LOGIN = \"API_USER_AUTH_LOGIN\";\nexport const API_USER_AUTH_REGISTER = \"API_USER_AUTH_REGISTER\";\nexport const API_CREATE_POST = \"API_CREATE_POST\";\nexport const API_DELETE_POST = \"API_DELETE_POST\";\nexport const API_UPDATE_POST = \"API_UPDATE_POST\";\nexport const API_POST_DETAIL = \"API_POST_DETAIL\";\nexport const API_POST_COMMENT_TREES = \"API_POST_COMMENT_TREES\";\nexport const API_CREATE_COMMENT = \"API_CREATE_COMMENT\";\nexport const API_DELETE_COMMENT = \"API_DELETE_COMMENT\";\nexport const API_UPDATE_COMMENT = \"API_UPDATE_COMMENT\";\nexport const API_VOTE = \"API_VOTE\";\nexport const API_SEARCH = \"API_SEARCH\";\n","import {\n  USER_AUTH_LOGIN_REQUEST,\n  USER_AUTH_LOGIN_SUCCESS,\n  USER_AUTH_LOGIN_FAILURE,\n  USER_AUTH_LOGOUT_REQUEST,\n  USER_AUTH_LOGOUT_SUCCESS,\n  USER_AUTH_LOGOUT_FAILURE,\n  USER_AUTH_UPDATE_SUCCESS\n} from \"../actions/actionTypes\";\n\nconst initialState = {\n  token: null,\n  username: null,\n  pk: null,\n  subs: [],\n  moderated_subs: [],\n  error: null,\n  loading: false\n};\n\nconst userAuth = (state = initialState, action) => {\n  switch (action.type) {\n    case USER_AUTH_LOGIN_REQUEST:\n      return {\n        ...state,\n        loading: true\n      };\n    case USER_AUTH_LOGIN_SUCCESS:\n      return {\n        ...state,\n        token: action.data.token,\n        username: action.data.username,\n        pk: action.data.pk,\n        subs: action.data.subs,\n        moderated_subs: action.data.moderated_subs,\n        loading: false,\n        error: null\n      };\n    case USER_AUTH_LOGIN_FAILURE:\n      return {\n        ...state,\n        token: null,\n        loading: false,\n        error: action.error\n      };\n    case USER_AUTH_LOGOUT_SUCCESS:\n      return initialState;\n    case USER_AUTH_UPDATE_SUCCESS:\n      return {\n        ...state,\n        username: action.data.username,\n        subs: action.data.subs,\n        moderated_subs: action.data.moderated_subs,\n        loading: false,\n        error: null\n      };\n    default:\n      return state;\n  }\n};\n\n// Selectors\n\nexport const getAuthUsername = state => state.userAuth.username;\nexport const getAuthUserToken = state => state.userAuth.token;\nexport const getAuthUserSubredditTitles = state =>\n  state.userAuth.subs.map(subreddit => subreddit.title);\n\nexport default userAuth;\n","import {\n  SHOW_USER_AUTH_MODAL,\n  HIDE_USER_AUTH_MODAL,\n  UPDATE_USER_AUTH_MODAL_ERROR,\n} from '../actions/actionTypes';\n\nconst initialState = {\n  showModal: false,\n  displayType: null,\n  errorMessage: null,\n  successMessage: null,\n}\n\nconst userAuthModal = (state=initialState, action) => {\n  switch (action.type) {\n    case SHOW_USER_AUTH_MODAL:\n      return {\n          ...state,\n          showModal: true,\n          displayType: action.displayType,\n          errorMessage: action.warningMessage,\n          successMessage: action.successMessage,\n      };\n    case HIDE_USER_AUTH_MODAL:\n      return {\n        ...state,\n        showModal: false,\n        displayType: null,\n        errorMessage: null,\n        successMessage: null,\n      };\n    case UPDATE_USER_AUTH_MODAL_ERROR:\n      return {\n        ...state,\n        errorMessage: action.errorMessage,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default userAuthModal;\n","import {\n  FETCH_POST_DETAIL_REQUEST,\n  FETCH_POST_DETAIL_SUCCESS,\n  FETCH_POST_DETAIL_FAILURE,\n  FETCH_POST_LIST_SUCCESS,\n  UPDATE_POST_SUCCESS,\n} from '../actions/actionTypes';\n\nconst initialState = {\n  title: null,\n  body: null,\n  poster: null,\n  pk: null,\n  error: null,\n  loading: false,\n}\n\nconst postDetail = (state=initialState, action) => {\n  switch (action.type) {\n    case FETCH_POST_DETAIL_REQUEST:\n      return {\n        ...state,\n        error: null,\n        loading: true,\n      }\n    case FETCH_POST_DETAIL_SUCCESS:\n      return {\n        ...state,\n        title: action.data.title,\n        body: action.data.body,\n        poster: action.data.poster_username,\n        pk: action.data.pk,\n        loading: false,\n        error: null,\n      }\n    case FETCH_POST_DETAIL_FAILURE:\n      return {\n        ...state,\n        loading: false,\n        error: action.error,\n      }\n    case UPDATE_POST_SUCCESS:\n      return {\n        ...state,\n        body: action.data.body,\n      }\n    case FETCH_POST_LIST_SUCCESS:\n      // This makes the scroll to comments in PostDetail work\n      return {\n        ...state,\n        pk: null,\n      };\n    default:\n     return state;\n  }\n}\n\n// Selectors\n\nexport const getPostDetailTitle = (state) => state.postDetail.title;\nexport const getPostDetailBody = (state) => state.postDetail.body;\nexport const getPostDetailPosterUsername = (state) => state.postDetail.poster;\nexport const getPostDetailPk = (state) => state.postDetail.pk;\nexport const getPostDetailLoading = (state) => state.postDetail.loading;\n\n\n\nexport default postDetail;\n","// Help organize reducers\nexport function combineReducersWithRoot(rootReducer, reducers) {\n  return (state, action) => {\n    let newState = {...rootReducer(state, action)};\n    Object.keys(reducers).forEach((prop) => {\n      let propObj = state ? state[prop] : undefined;\n      newState[prop] = reducers[prop](propObj, action);\n    });\n    return newState;\n  }\n}\n\n// Update, avoid mutation\nexport function updateObject(oldObject, newValues) {\n  return { ...oldObject, ...newValues}\n}\n\n// Pretty much just for comments and posts\nexport function updateObjectOnVote(oldObj, voteType) {\n  const voteState = oldObj.voteDisplayState || 0;\n  const newVoteState = voteType\n  \n  const upvotes = oldObj.upvotes;\n  const newUpvotes = upvotes + (newVoteState - voteState)\n    \n  return ({\n    ...oldObj,\n    voteDisplayState: newVoteState,\n    upvotes: newUpvotes,\n  });\n}\n\n\n// Take an array of serialized objects and return array of ids only\nexport const allIds = (objList, idLabel='pk') => {\n  let allIds = [];\n  objList.forEach((obj) => {\n    allIds.push(obj[idLabel])\n  });\n  return allIds;\n}\n\n// Take an array of serialized objects and make a objectById object\nexport const objectById = (objList, updateFcn, idLabel='pk') => {\n  let objById = {};\n  objList.forEach((obj) => {\n    obj = updateFcn ? updateFcn(obj): obj;\n    objById[obj[idLabel]] = {...obj};\n  })\n  return objById\n}\n\n// post specific wrapper for objectById, need to rename some properties\nexport const postsById = (postList) => objectById(\n  postList,\n  (post) => {\n    const {\n      vote_state,\n      poster_username,\n      subreddit_title,\n      ...rest\n    } = post;\n    return {\n      voteDisplayState: vote_state,\n      posterUsername: poster_username,\n      subredditTitle: subreddit_title,\n      ...rest\n    };\n  }\n);\n","import {\n  FETCH_POST_COMMENT_TREES_REQUEST,\n  FETCH_POST_COMMENT_TREES_SUCCESS,\n  FETCH_POST_COMMENT_TREES_FAILURE,\n  CREATE_COMMENT_REQUEST,\n  CREATE_COMMENT_SUCCESS,\n  CREATE_COMMENT_FAILURE,\n  DELETE_COMMENT_REQUEST,\n  DELETE_COMMENT_SUCCESS,\n  DELETE_COMMENT_FAILURE,\n  UPDATE_COMMENT_REQUEST,\n  UPDATE_COMMENT_SUCCESS,\n  UPDATE_COMMENT_FAILURE,\n  COMMENT_VOTE_SUCCESS\n} from \"../actions/actionTypes\";\nimport { updateObjectOnVote, updateObject } from \"../utilities/reducerUtils\";\n\n// Returns an object with rootCommentIds property to\n// That includes the newcomment id at the top\nconst addRootCommentId = (state, newComment) => {\n  let newRoots = state.rootCommentIds.slice();\n  newRoots.splice(0, 0, newComment.pk);\n  return { rootCommentIds: newRoots };\n};\n\n// Returns a new commentsById object with the parent object\n// updated to include the new child\nconst addChildCommentId = (state, newComment) => {\n  const parentId = newComment.parent;\n  const oldParent = state.commentsById[parentId];\n  // This is a hack fix because the comment creation backend doesn't\n  // add a children array like it should. So if you comment on a nascent\n  // comment you will get an error because there is no children array\n  oldParent.children = oldParent.children || [];\n  const newChildren = oldParent.children.slice();\n  newChildren.splice(0, 0, newComment.pk);\n  const newParent = {\n    ...oldParent,\n    children: newChildren\n  };\n  return { ...state.commentsById, [parentId]: newParent };\n};\n\n// Handles adding the newComment id to either the rootCommentIds or\n// the children array of the parent (depending on which is appropriate)\n// Also adds the new comment to the commentsById object.\nconst addComment = (state, newComment) => {\n  // First to some fixes particular to a nacsent comment\n  const { vote_state, ...rest } = newComment;\n  const updatedComment = {\n    ...rest,\n    voteDisplayState: vote_state,\n    created: \"just now\"\n  };\n\n  // if it's a root comment\n  if (newComment.post) {\n    return {\n      ...addRootCommentId(state, updatedComment),\n      commentsById: { ...state.commentsById, [newComment.pk]: updatedComment }\n    };\n  } else if (newComment.parent) {\n    // or it it is a child comment\n    const newCommentsById = addChildCommentId(state, updatedComment);\n    return {\n      commentsById: {\n        ...newCommentsById,\n        [newComment.pk]: updatedComment\n      }\n    };\n  }\n};\n\n// Update a particular comment with id and new object properties newProps\nconst updateComment = (state, id, newProps) => {\n  const oldComment = state.commentsById[id];\n  return {\n    ...state,\n    commentsById: {\n      ...state.commentsById,\n      [id]: updateObject(oldComment, newProps)\n    }\n  };\n};\n\nconst initialState = {\n  commentsById: {},\n  postersById: {},\n  rootCommentIds: [],\n  error: null,\n  loading: false,\n  createCommentError: null,\n  createCommentLoading: false\n};\n\nconst comments = (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_POST_COMMENT_TREES_REQUEST:\n      return {\n        ...state,\n        loading: true\n      };\n    case FETCH_POST_COMMENT_TREES_SUCCESS:\n      return {\n        ...state,\n        commentsById: action.data.entities.comments,\n        postersById: action.data.entities.posters,\n        rootCommentIds: action.data.result,\n        error: null,\n        loading: false,\n        createCommentError: null\n      };\n    case FETCH_POST_COMMENT_TREES_FAILURE:\n      return {\n        ...state,\n        error: action.error\n      };\n    case CREATE_COMMENT_SUCCESS:\n      return {\n        ...state,\n        ...addComment(state, action.data),\n        createCommentLoading: false,\n        createCommentError: null\n      };\n    case CREATE_COMMENT_REQUEST:\n      return {\n        ...state,\n        createCommentLoading: true,\n        createCommentError: null\n      };\n    case CREATE_COMMENT_FAILURE:\n      return {\n        ...state,\n        createCommentLoading: false,\n        createCommentError: action.error\n      };\n    case COMMENT_VOTE_SUCCESS:\n      const commentId = action.data.comment;\n      return {\n        ...state,\n        commentsById: {\n          ...state.commentsById,\n          [commentId]: updateObjectOnVote(\n            state.commentsById[commentId],\n            action.data.vote_type\n          )\n        }\n      };\n    case DELETE_COMMENT_SUCCESS:\n      return updateComment(state, action.data.pk, {\n        deleted: true\n      });\n    case UPDATE_COMMENT_SUCCESS:\n      return updateComment(state, action.data.pk, {\n        ...action.data\n      });\n    default:\n      return state;\n  }\n};\n\n// // Selectors\n// Ordered array of root comments, based on api ordering\nexport const getRootCommentPks = state => state.comments.rootCommentIds;\n\nexport const getCommentById = (state, pk) => state.comments.commentsById[pk];\n\nexport const getPosterByCommentId = (state, pk) => {\n  const posterId = state.comments.commentsById[pk].poster;\n  return state.comments.postersById[posterId];\n};\n\nexport const getVoteDisplayStateById = (state, pk) =>\n  state.comments.commentsById[pk].voteDisplayState;\n\nexport const getCommentsLoading = state => state.comments.loading;\n\nexport default comments;\n","import {\n  FETCH_POST_LIST_REQUEST,\n  FETCH_POST_LIST_SUCCESS,\n  FETCH_POST_LIST_FAILURE,\n  POST_VOTE_SUCCESS,\n  DELETE_POST_REQUEST,\n  DELETE_POST_SUCCESS,\n  DELETE_POST_FAILURE,\n  SEARCH_SUCCESS,\n} from '../actions/actionTypes';\nimport {\n  updateObjectOnVote,\n  postsById,\n  allIds\n} from '../utilities/reducerUtils';\n\n// TODO: figure out why this descruture isnt working right on postsById.\n// For some reason rest still contains the postId element\nconst deletePost = (state, postId) => {\n  const {\n    [postId]: deletedOne ,\n    ...rest\n  } = state.postsById;\n  delete rest[postId];\n\n  const newAllPosts = [...state.allPosts];\n  const deletionIndex = newAllPosts.indexOf(postId);\n  newAllPosts.splice(deletionIndex,1);\n\n  return {\n    ...state,\n    postsById: {...rest},\n    allPosts: [...newAllPosts],\n    deletionPostId: null,\n  }\n}\n\nconst initialState = {\n  postsById: {},\n  allPosts: [],\n  loading: true,\n  error: null,\n  deletionPostId: null,\n  deleteError: null,\n}\n\nconst postList = (state=initialState, action) => {\n  switch (action.type) {\n    case FETCH_POST_LIST_REQUEST:\n      return {\n        ...state,\n        loading: true,\n        error: null,\n      };\n    case FETCH_POST_LIST_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        error: null,\n        postsById: postsById(action.data),\n        allPosts: allIds(action.data),\n      };\n    case FETCH_POST_LIST_FAILURE:\n      return {\n        ...state,\n        loading: false,\n        error: action.error,\n      };\n    case POST_VOTE_SUCCESS:\n      const postId = action.data.post;\n      return {\n        ...state,\n        postsById: {\n          ...state.postsById,\n          [postId]: updateObjectOnVote(\n            state.postsById[postId],\n            action.data.vote_type,\n          ),\n        },\n      }\n    case DELETE_POST_REQUEST:\n      return {\n        ...state,\n        deleteError: null,\n        deletionPostId: Number(action.pk),\n      };\n    case DELETE_POST_SUCCESS:\n      return deletePost(state, state.deletionPostId)\n    case DELETE_POST_FAILURE:\n      return {\n        ...state,\n        deleteError: action.error,\n      }\n    case SEARCH_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        error: null,\n        postsById: postsById(action.data.posts),\n        allPosts: allIds(action.data.posts),\n      }\n    default:\n      return state;\n  }\n};\n\n// selectors\nexport const getPostById = (state, pk) => state.postList.postsById[pk];\nexport const getPostBodyById = (state, pk) => (\n  getPostById(state, pk)\n    ? getPostById(state, pk).body\n    : null\n  );\nexport const getAllPosts = (state) => state.postList.allPosts;\n\nexport default postList;\n","import {\n  CREATE_POST_REQUEST,\n  CREATE_POST_SUCCESS,\n  CREATE_POST_FAILURE,\n} from '../actions/actionTypes';\n\n\nconst initialState = {\n  creating: false,\n  error: null,\n  loading: false,\n}\n\nconst createPost = (state=initialState, action) => {\n  switch (action.type) {\n    case CREATE_POST_FAILURE:\n      return {\n        ...state,\n        loading: false,\n        error: action.error,\n      };\n    case CREATE_POST_REQUEST:\n      return {\n        ...state,\n        loading: true,\n        error: null,\n      };\n    case CREATE_POST_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        error: null,\n      }\n    default:\n      return state;\n  }\n}\n\n// selectors\n\nexport const getCreatePostLoading = (state) => state.createPost.loading;\nexport const getCreatePostError = (state) => state.createPost.error;\n\nexport default createPost;\n","import {\n  CREATE_SUBREDDIT_REQUEST,\n  CREATE_SUBREDDIT_SUCCESS,\n  CREATE_SUBREDDIT_FAILURE,\n} from '../actions/actionTypes';\n\nconst initialState = {\n  error: null,\n  loading: false,\n  newSubredditData: null,\n};\n\nconst createSubreddit = (state=initialState, action) => {\n  switch(action.type) {\n    case CREATE_SUBREDDIT_REQUEST:\n      return {\n        ...state,\n        loading: true,\n        error: false,\n        newSubredditData: null,\n      };\n    case CREATE_SUBREDDIT_SUCCESS:\n      return {\n        ...state,\n        newSubredditData: action.data,\n        loading: false,\n        error: null,\n      };\n    case CREATE_SUBREDDIT_FAILURE:\n      return {\n        ...state,\n        newSubredditData: null,\n        loading: false,\n        error: action.error,\n      };\n    default:\n      return state;\n  }\n}\n\n// selectors\nexport const getCreateSubredditError = (state) => state.createSubreddit.error;\nexport const getCreateSubredditLoading = (state) => state.createSubreddit.loading;\n\nexport default createSubreddit;\n","\nimport {\n  TOGGLE_POST_EDITOR,\n  UPDATE_POST_REQUEST,\n  UPDATE_POST_SUCCESS,\n  UPDATE_POST_FAILURE,\n} from '../actions/actionTypes';\n\n\nconst initialState = {\n  showDetailPostEditor: false,\n  loading: false,\n  error: false,\n}\n\nconst editPost = (state=initialState, action) => {\n  switch(action.type) {\n    case TOGGLE_POST_EDITOR:\n      return {\n        ...state,\n        showDetailPostEditor: !state.showDetailPostEditor,\n      };\n    case UPDATE_POST_REQUEST:\n      return {\n        ...state,\n        loading: true,\n        error: null,\n      }\n    case UPDATE_POST_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        error: null,\n      }\n    case UPDATE_POST_FAILURE:\n      return {\n        ...state,\n        loading: false,\n        error: action.error,\n      }\n    default:\n      return state;\n  }\n};\n\n//\nexport const getPostEditorShowState = (state) => state.editPost.showDetailPostEditor;\nexport const getEditPostError = (state) => state.editPost.error;\nexport const getEditPostLoading = (state) => state.editPost.loading;\n\nexport default editPost;\n","import {\n  SEARCH_REQUEST,\n  SEARCH_SUCCESS,\n  SEARCH_FAILURE,\n  SET_SEARCH_QUERY,\n  SET_SEARCH_RESULTS_VIEW\n} from \"../actions/actionTypes\";\nimport { allIds, objectById } from \"../utilities/reducerUtils\";\n\nconst initialState = {\n  query: \"\",\n  allSubreddits: [],\n  subredditsById: {},\n  allUsers: [],\n  usersById: {},\n  searchResultsView: \"posts\",\n  error: null,\n  loading: false\n};\n\nconst search = (state = initialState, action) => {\n  switch (action.type) {\n    case SEARCH_REQUEST:\n      return {\n        ...state,\n        loading: true,\n        error: null\n      };\n    case SEARCH_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        error: null,\n        allUsers: allIds(action.data.users),\n        usersById: objectById(action.data.users),\n        allSubreddits: allIds(action.data.subreddits),\n        subredditsById: objectById(action.data.subreddits)\n      };\n    case SEARCH_FAILURE:\n      return {\n        ...state,\n        loading: false,\n        error: action.error\n      };\n    case SET_SEARCH_QUERY:\n      return {\n        ...state,\n        query: action.query,\n        searchResultsView: \"posts\"\n      };\n    case SET_SEARCH_RESULTS_VIEW:\n      return {\n        ...state,\n        searchResultsView: action.viewName\n      };\n    default:\n      return state;\n  }\n};\n\nexport const getSearchUserResults = state => state.search.userResults;\nexport const getSearchSubredditResults = state => state.search.subredditResults;\nexport const getSearchError = state => state.search.error;\nexport const getSearchLoading = state => state.search.loading;\nexport const getSearchQuery = state => state.search.query;\nexport const getSearchAllSubreddits = state => state.search.allSubreddits;\nexport const getSearchAllUsers = state => state.search.allUsers;\nexport const getSearchSubredditById = (state, id) =>\n  state.search.subredditsById[id];\nexport const getSearchUserById = (state, id) => state.search.UsersById[id];\nexport const getSearchResultsView = state => state.search.searchResultsView;\n\nexport default search;\n","import { combineReducers } from 'redux';\n\nimport subreddit from './subreddit';\nimport userAuth from './userAuth';\nimport userAuthModal from './userAuthModal';\nimport postDetail from './postDetail';\nimport comments from './comments';\nimport postList from './postList';\nimport createPost from './createPost';\nimport createSubreddit from './createSubreddit';\nimport editPost from './editPost';\nimport search from './search';\n\nconst rootReducer = combineReducers({\n  subreddit,\n  userAuth,\n  userAuthModal,\n  postDetail,\n  comments,\n  postList,\n  createPost,\n  createSubreddit,\n  editPost,\n  search,\n});\n\nexport default rootReducer;\n","const apiRequestErrorHandler = (e) => {\n  console.log(e)\n  try {\n    console.log(\"Response: \" , e.response)\n    if (!e.response) {\n      return \"Network Error\";\n    } else if (e.response.data && typeof e.response.data != 'string') {\n      const erd = e.response.data;\n  \n      if (erd.detail){\n        return erd.detail;\n      }\n      if (erd.non_field_errors){\n        return erd.non_field_errors[0];\n      }\n      \n      // Handle field errors\n      const key = Object.keys(erd)[0];\n      const errorMessage = erd[key][0];\n      const errorField = String(key);\n      return (\n        errorField.charAt(0).toUpperCase() +\n        errorField.substring(1) + \":  \" +\n        errorMessage\n      );\n    } else { // There is no response data\n      return `${e.response.status}: ${e.response.statusText}`;\n    }\n  }\n  catch (error) {\n    console.log(error)\n    return \"Something went wrong, please contact the site administration.\"\n  }\n}\n\nexport default apiRequestErrorHandler;\n","import {createStore, applyMiddleware, compose} from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport {persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\nimport rootReducer from './reducers';\nimport { apiMiddleware } from './middleware/apiMiddleware';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n}\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\n\nexport const store = createStore(\n  persistedReducer,\n  composeEnhancers(applyMiddleware(apiMiddleware, thunkMiddleware))\n);\nexport const persistor = persistStore(store);\n","import apiRequestErrorHandler from '../../utilities/apiErrorHandler';\n\nexport const apiMiddleware = store => next => action => {\n  \n  if (action.type && action.type.startsWith(\"API_\")) {\n    const {\n      callAPI,\n      types,\n      successActionCreator,\n      failureActionCreator,\n    } = action;\n\n    typeof types.request === 'function'\n      ? store.dispatch(types.request) // let thunk handle it\n      : store.dispatch({type: types.request})\n    \n    \n    return callAPI()\n      .then(data => typeof types.success === 'function'\n        ? types.success(data, store.getState, store.dispatch)\n        : store.dispatch({\n            type: types.success,\n            data\n          })\n      )\n      .then(action => {\n        if (successActionCreator){\n          return store.dispatch(successActionCreator(action.data))\n        }\n      })\n      .catch(error => {\n        const errorMessage = apiRequestErrorHandler(error)\n        if (failureActionCreator) {\n          store.dispatch(failureActionCreator(errorMessage))\n        }\n        // In case the original callers are waiting on news of how this went\n        // see CreatePost for example\n        return Promise.reject(\n          store.dispatch({\n            type: types.failure,\n            error: errorMessage,\n          })\n        )\n      })\n  }\n  else {\n    return next(action)\n  }\n};\n","export const API_ROOT_URL = process.env.NODE_ENV === 'development'\n    ? process.env.REACT_APP_DEV_API_ROOT\n    : process.env.REACT_APP_PROD_API_ROOT;\n\nexport const SEARCH_URL = API_ROOT_URL + 'search/';\n  \nexport const VOTE_URL = API_ROOT_URL + 'vote/';\n\nexport const COMMENT_LIST_URL = API_ROOT_URL + 'comments/';\nexport const POST_COMMENT_TREES_URL = (postPk) => (\n  `${COMMENT_LIST_URL}post/${postPk}/`\n);\nexport const COMMENT_DETAIL_URL = (commentPk) => (\n  `${COMMENT_LIST_URL}${commentPk}/`\n);\n  \nexport const SUB_LIST_URL = API_ROOT_URL + 'subreddits/';\nexport const SUB_DETAIL_URL = (subredditTitle) => (\n  SUB_LIST_URL + 'sub/' + subredditTitle + '/'\n);\nexport const SUB_SUBSCRIBE_URL = (subredditTitle) => (\n  SUB_LIST_URL + 'sub/' + subredditTitle + '/subscribe/'\n);\nexport const CREATE_SUBREDDIT_URL = SUB_LIST_URL;\nexport const DELETE_SUBREDDIT_URL = SUB_DETAIL_URL;\n\nexport const USER_LIST_URL = API_ROOT_URL + 'users/';\nexport const USER_LOGIN_URL = USER_LIST_URL + 'login/';\nexport const USER_LOGOUT_URL = USER_LIST_URL + 'logout/';\nexport const USER_REGISTER_URL = USER_LIST_URL + 'create/';\nexport const USER_DETAIL_URL = (username) =>\n  USER_LIST_URL + `user/${username}/`;\n  \n\nexport const POST_LIST_URL = API_ROOT_URL + 'posts/';\nexport const SUB_POST_LIST_URL = (subredditTitle) => (\n  POST_LIST_URL + \"subreddit-list/\" + subredditTitle + '/'\n);\nexport const CREATE_POST_URL = (subredditTitle) => (\n  SUB_DETAIL_URL(subredditTitle) + 'post/'\n)\nexport const POST_DETAIL_URL = (postId) => POST_LIST_URL + postId + '/';\n","// If there is a token then grab set it, if not then return nothing\nexport const tokenContextObj = token =>\n  token\n    ? {\n        headers: {\n          Authorization: `Token ${token}`\n        }\n      }\n    : {};\n","import axios from 'axios';\n\nimport {\n  SUB_DETAIL_URL,\n  SUB_SUBSCRIBE_URL,\n  CREATE_SUBREDDIT_URL,\n  DELETE_SUBREDDIT_URL,\n} from '../constants';\nimport { tokenContextObj } from '../apiUtils';\n\nexport const getSubDetailApi = (subredditTitle) => (\n  axios.get(SUB_DETAIL_URL(subredditTitle))\n  .then(response => response.data)\n)\n\nexport const subredditSubscribeApi = (subredditTitle, subAction, token) => {\n  const data = {action: subAction,}\n  return (\n    axios.post(SUB_SUBSCRIBE_URL(subredditTitle), data, tokenContextObj(token))\n      .then(response => response.data)\n  )\n}\n\nexport const createSubredditApi = (subredditData, token) => (\n  axios.post(CREATE_SUBREDDIT_URL, subredditData, tokenContextObj(token))\n    .then(response => response.data)\n)\n\nexport const deleteSubredditApi = (subredditPk, token) => (\n  axios.post(DELETE_SUBREDDIT_URL(subredditPk), tokenContextObj(token))\n    .then(response => response.data)\n)\n","import axios from 'axios';\n\nimport {\n  USER_LOGIN_URL,\n  USER_LOGOUT_URL,\n  USER_REGISTER_URL,\n  USER_DETAIL_URL\n} from '../constants';\nimport { tokenContextObj } from '../apiUtils';\n\nexport const userLoginApi = (credentials) => (\n  axios.post(\n      USER_LOGIN_URL,\n      credentials,\n    )\n    .then(response => response.data)\n);\n\nexport const userLogoutApi = (token) => (\n  axios.post(USER_LOGOUT_URL, null, tokenContextObj(token))\n    .then(response => response.data)\n  )\n\nexport const userRegisterApi = (userData) => (\n  axios.post(\n    USER_REGISTER_URL,\n    userData\n  )\n  .then(response => response.data)\n)\n\nexport const userUpdateApi = (username) => (\n  axios.get(USER_DETAIL_URL(username))\n  .then(response => response.data)\n)\n","import {\n  SHOW_USER_AUTH_MODAL,\n  HIDE_USER_AUTH_MODAL,\n  UPDATE_USER_AUTH_MODAL_ERROR,\n} from '../actionTypes';\n\nexport const showUserAuthModal = (\n  displayType,\n  successMessage = null,\n  errorMessage = null\n  ) => (\n  {\n    type: SHOW_USER_AUTH_MODAL,\n    displayType,\n    successMessage,\n    errorMessage,\n  }\n);\n\nexport const hideUserAuthModal = () => (\n  {\n    type: HIDE_USER_AUTH_MODAL,\n  }\n);\n\nexport const updateErrorMessage = (errorMessage) => (\n  {\n    type: UPDATE_USER_AUTH_MODAL_ERROR,\n    errorMessage,\n  }\n)\n","import {\n  USER_AUTH_LOGIN_REQUEST,\n  USER_AUTH_LOGIN_SUCCESS,\n  USER_AUTH_LOGIN_FAILURE,\n  USER_AUTH_REGISTER_REQUEST,\n  USER_AUTH_REGISTER_SUCCESS,\n  USER_AUTH_REGISTER_FAILURE,\n  USER_AUTH_UPDATE_REQUEST,\n  USER_AUTH_UPDATE_SUCCESS,\n  USER_AUTH_UPDATE_FAILURE,\n  USER_AUTH_LOGOUT_REQUEST,\n  USER_AUTH_LOGOUT_SUCCESS,\n  USER_AUTH_LOGOUT_FAILURE,\n  API_USER_AUTH_UPDATE,\n  API_USER_AUTH_LOGOUT,\n  API_USER_AUTH_LOGIN,\n  API_USER_AUTH_REGISTER,\n} from '../actionTypes';\n\nimport {\n  userLoginApi,\n  userLogoutApi,\n  userRegisterApi,\n  userUpdateApi,\n} from '../../api/UserAuth';\nimport {\n  showUserAuthModal,\n  hideUserAuthModal,\n  updateErrorMessage\n} from \"../UserAuthModal\";\n\nexport const makeUserLoginRequest = (username, password) => (\n  {\n    type: API_USER_AUTH_LOGIN,\n    types: {\n      request: USER_AUTH_LOGIN_REQUEST,\n      success: USER_AUTH_LOGIN_SUCCESS,\n      failure: USER_AUTH_LOGIN_FAILURE,\n    },\n    callAPI: () => userLoginApi({username, password}),\n    successActionCreator: hideUserAuthModal,\n    failureActionCreator: updateErrorMessage,\n  }\n)\n\nexport const makeUserRegisterRequest = (username, password, email) => (\n  {\n    type: API_USER_AUTH_REGISTER,\n    types: {\n      request: USER_AUTH_REGISTER_REQUEST,\n      success: USER_AUTH_REGISTER_SUCCESS,\n      failure: USER_AUTH_REGISTER_FAILURE,\n    },\n    callAPI: () => userRegisterApi({\n        username,\n        password,\n        email\n    }),\n    failureActionCreator: updateErrorMessage,\n    successActionCreator: registerSuccessLoginModal,\n  }\n)\n\n// Use a thunk and redux-thunk to get the token rather than prop drilling it\nexport const userAuthLogout = () => (dispatch, getState) => dispatch(\n  {\n    type: API_USER_AUTH_LOGOUT,\n    types: {\n      request: USER_AUTH_LOGOUT_REQUEST,\n      success: USER_AUTH_LOGOUT_SUCCESS,\n      failure: USER_AUTH_LOGOUT_FAILURE,\n    },\n    callAPI: () => userLogoutApi(getState().userAuth.token),\n  }\n);\n\n// When succesfully registered launch the login modal with\n// success message\nconst successMessage = \"User profile created! Please log in.\"\nconst registerSuccessLoginModal = () => showUserAuthModal(\n  'login',\n  successMessage\n)\n\n// Upon change to user backend we might need to reload the user data\nexport const makeUserUpdateRequest = (username) => (\n  {\n  type: API_USER_AUTH_UPDATE,\n  types: {\n    request: USER_AUTH_UPDATE_REQUEST,\n    success: USER_AUTH_UPDATE_SUCCESS,\n    failure: USER_AUTH_UPDATE_FAILURE,\n  },\n  callAPI: () => userUpdateApi(username),\n  }\n)\n","import {\n  FETCH_SUB_DETAIL_REQUEST,\n  FETCH_SUB_DETAIL_SUCCESS,\n  FETCH_SUB_DETAIL_FAILURE,\n  API_SUB_DETAIL,\n  SET_SUB_TO_HOME,\n  SUBREDDIT_SUBSCRIBE_REQUEST,\n  SUBREDDIT_SUBSCRIBE_SUCCESS,\n  SUBREDDIT_SUBSCRIBE_FAILURE,\n  API_SUBREDDIT_SUBSCRIBE,\n  CREATE_SUBREDDIT_REQUEST,\n  CREATE_SUBREDDIT_SUCCESS,\n  CREATE_SUBREDDIT_FAILURE,\n  DELETE_SUBREDDIT_REQUEST,\n  DELETE_SUBREDDIT_SUCCESS,\n  DELETE_SUBREDDIT_FAILURE,\n  API_CREATE_SUBREDDIT\n} from \"../actionTypes\";\n\nimport {\n  getSubDetailApi,\n  subredditSubscribeApi,\n  createSubredditApi\n} from \"../../api/Subreddit\";\nimport { makeUserUpdateRequest } from \"../../actions/UserAuth\";\n\nexport const makeSubDetailRequest = subredditTitle => ({\n  type: API_SUB_DETAIL,\n  types: {\n    request: FETCH_SUB_DETAIL_REQUEST,\n    success: FETCH_SUB_DETAIL_SUCCESS,\n    failure: FETCH_SUB_DETAIL_FAILURE\n  },\n  callAPI: () => getSubDetailApi(subredditTitle)\n});\n\nexport const makeCreateSubredditRequest = subredditData => (\n  dispatch,\n  getState\n) =>\n  dispatch({\n    type: API_CREATE_SUBREDDIT,\n    types: {\n      request: CREATE_SUBREDDIT_REQUEST,\n      success: CREATE_SUBREDDIT_SUCCESS,\n      failure: CREATE_SUBREDDIT_FAILURE\n    },\n    callAPI: () => createSubredditApi(subredditData, getState().userAuth.token)\n  });\n\n// Get token from redux-thunk\nexport const makeSubSubscriptionRequest = (subredditTitle, subAction) => (\n  dispatch,\n  getState\n) =>\n  dispatch({\n    type: API_SUBREDDIT_SUBSCRIBE,\n    types: {\n      request: SUBREDDIT_SUBSCRIBE_REQUEST,\n      success: onSuccessfulSubscription,\n      failure: SUBREDDIT_SUBSCRIBE_FAILURE\n    },\n    callAPI: () =>\n      subredditSubscribeApi(\n        subredditTitle,\n        subAction,\n        getState().userAuth.token\n      )\n  });\n\n// When the request is successful we need to not only\n// indicate it success in the subreddit state tree\n// but also retrieve the modified user data from the backend\nconst onSuccessfulSubscription = (data, getState, dispatch) => {\n  dispatch({\n    type: SUBREDDIT_SUBSCRIBE_SUCCESS,\n    data\n  });\n\n  const username = getState().userAuth.username;\n  return username\n    ? dispatch(makeUserUpdateRequest(getState().userAuth.username))\n    : null;\n};\n","import React from 'react';\nimport { Button } from 'react-bootstrap';\nimport { CircleLoader } from 'react-spinners';\n\nimport './styles.css'\n\nconst LoadingButton = (props) => {\n  \n  const {\n    loading,\n    children,\n    className,\n    ...rest\n  } = props;\n  \n  const spinner = <CircleLoader size={20} className=\"display: inline-block\" />;\n  \n  return (\n    <div className=\"loading-button-container\">\n      <Button\n        {...rest}\n        className={ className || \"loading-button\"}\n        disabled={loading}\n        \n      >\n        {loading ? spinner : children}\n      </Button>\n    </div>\n  )\n}\n\nexport default LoadingButton;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"./styles.css\";\n\nconst NavSelectorButton = props => {\n  const { active, children, onClick } = props;\n\n  const activeStyle = active\n    ? {\n        opacity: \"100\",\n        borderBottom: \"3px solid white\"\n      }\n    : {};\n\n  return (\n    <div\n      className=\"nav-selector-button-container\"\n      style={activeStyle}\n      onClick={onClick}\n    >\n      <p>{children}</p>\n    </div>\n  );\n};\n\nNavSelectorButton.propTypes = {\n  active: PropTypes.bool,\n  onClick: PropTypes.func\n};\n\nexport default NavSelectorButton;\n","import React from 'react';\n\nexport const withEither = (conditionalRenderingFn, EitherComponent) => (Component) => (props) =>\n  conditionalRenderingFn(props)\n    ? <EitherComponent {...props}/>\n    : <Component {...props}/>\n    \nexport const withMaybe = (conditionalRenderingFn) => (Component) => (props) =>\n  conditionalRenderingFn(props)\n    ? <Component {...props} />\n    : null\n","import React from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { compose } from \"recompose\";\n\nimport \"./styles.css\";\nimport { withMaybe, withEither } from \"../../../utilities/HOC\";\n\nconst SubscribeButton = ({ makeSubscriptionRequest, subredditTitle }) => (\n  <Button\n    className=\"subscribe-button\"\n    onClick={() => makeSubscriptionRequest(subredditTitle, \"sub\")}\n  >\n    SUBSCRIBE\n  </Button>\n);\n\nconst UnSubscribeButton = ({ makeSubscriptionRequest, subredditTitle }) => (\n  <Button\n    className=\"subscribe-button\"\n    onClick={() => makeSubscriptionRequest(subredditTitle, \"unsub\")}\n  >\n    UNSUBSCRIBE\n  </Button>\n);\n\nconst subscriptionConditionFn = props =>\n  props.userSubscriptions.includes(props.subredditTitle);\nconst authenticatedConditionFn = props => props.authenticatedUsername;\n\nconst SubscriptionButton = compose(\n  withMaybe(authenticatedConditionFn),\n  withEither(subscriptionConditionFn, UnSubscribeButton)\n)(SubscribeButton);\n\nexport default SubscriptionButton;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { SubscriptionButton } from \"../../components/Buttons\";\nimport {\n  getAuthUsername,\n  getAuthUserSubredditTitles\n} from \"../../reducers/userAuth\";\nimport { makeSubSubscriptionRequest } from \"../../actions/Subreddit\";\n\nconst SubscriptionButtonContainer = props => {\n  const {\n    authenticatedUsername,\n    userSubscriptions,\n    subredditTitle,\n    makeSubscriptionRequest\n  } = props;\n\n  return (\n    <SubscriptionButton\n      {...{\n        authenticatedUsername,\n        userSubscriptions,\n        subredditTitle,\n        makeSubscriptionRequest\n      }}\n    />\n  );\n};\n\nconst mapStateToProps = state => ({\n  authenticatedUsername: getAuthUsername(state),\n  userSubscriptions: getAuthUserSubredditTitles(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  makeSubscriptionRequest: (subredditTitle, subAction) =>\n    dispatch(makeSubSubscriptionRequest(subredditTitle, subAction))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SubscriptionButtonContainer);\n","import React from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { withRouter } from \"react-router\";\n\nimport \"./styles.css\";\nimport SubscriptionButtonContainer from \"../../containers/SubscriptionButtonContainer\";\n\nconst SideBar = props => {\n  const {\n    subredditTitle,\n    description,\n    authenticatedUsername,\n    showUserAuthRegisterModal,\n    history\n  } = props;\n\n  const handleCreatePostClick = () => {\n    if (authenticatedUsername) {\n      return history.push(`/r/${subredditTitle}/createPost`);\n    } else {\n      return showUserAuthRegisterModal();\n    }\n  };\n\n  return (\n    <div className=\"sidebar-content\">\n      <p className=\"sidebar-header\">SUBREDDIT DETAILS</p>\n      <div className=\"title\">\n        <h2>r/{subredditTitle}</h2>\n      </div>\n\n      <div className=\"description\">{description}</div>\n      <SubscriptionButtonContainer subredditTitle={subredditTitle} />\n\n      <Button\n        id=\"create-post-button\"\n        className=\"sidebar-button\"\n        onClick={handleCreatePostClick}\n      >\n        CREATE POST\n      </Button>\n    </div>\n  );\n};\n\nexport default withRouter(SideBar);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport SideBar from \"../../components/SideBar\";\nimport { getSubredditData } from \"../../reducers/subreddit\";\nimport { getAuthUsername } from \"../../reducers/userAuth\";\nimport { showUserAuthModal } from \"../../actions/UserAuthModal\";\n\nconst SideBarContainer = props => {\n  const {\n    subredditData: { title: subredditTitle, description, loading },\n    showUserAuthRegisterModal,\n    authenticatedUsername\n  } = props;\n\n  return (\n    <SideBar\n      {...{\n        subredditTitle,\n        description,\n        loading,\n        showUserAuthRegisterModal,\n        authenticatedUsername\n      }}\n    />\n  );\n};\n\nconst mapStateToProps = state => ({\n  subredditData: getSubredditData(state),\n  authenticatedUsername: getAuthUsername(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  showUserAuthRegisterModal: () => dispatch(showUserAuthModal(\"register\"))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SideBarContainer);\n","import React from 'react';\nimport { Panel } from 'react-bootstrap';\nimport { PulseLoader } from 'react-spinners';\n\nimport './styles.css';\n\nconst PanelLoader = () => (\n  <div>\n    <Panel>\n      <Panel.Body id=\"pulse-loader-panel-body\">\n          <PulseLoader className=\"panel-clip-loader\" color={'#BFEFFF'}/>\n      </Panel.Body>\n    </Panel>\n</div>    \n);\n\nexport default PanelLoader;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport PanelLoader from '../PanelLoader';\n\nconst PanelListLoader = ({ panelNumber }) => {\n  \n  const panelList = [...Array(panelNumber).keys()].map(\n    (id) => <PanelLoader key={id} />\n  )\n  return (\n    <ul>\n      {panelList}\n    </ul>\n  )\n\n}\n\n\nPanelListLoader.propTypes = {\n  panelNumber: PropTypes.number,\n}\n\nPanelListLoader.defaultProps = {\n  panelNumber: 5,\n}\n\nexport default PanelListLoader;\n","import React from 'react';\nimport { PulseLoader } from 'react-spinners';\n\nimport './styles.css'\n\nconst SideBarLoader = () => (\n  <div className=\"sidebar-loader-container\">\n    <PulseLoader color={'#BFEFFF'}/>\n  </div>\n)\n\nexport default SideBarLoader;\n","import React from 'react';\nimport { PulseLoader } from 'react-spinners';\n\nimport './styles.css';\n\nconst BlockLoader = () => (\n  <div className=\"block-loader-container\">\n    <PulseLoader color={'#BFEFFF'} />\n  </div>\n)\n\nexport default BlockLoader;\n","import React from \"react\";\nimport { withRouter } from \"react-router\";\n\nimport SideBarContainer from \"../../containers/SideBarContainer\";\nimport { SideBarLoader } from \"../../components/Loaders\";\nimport { withEither } from \"../../utilities/HOC\";\nimport { checkForPseudoSubreddits } from \"../../reducers/subreddit\";\nimport \"./styles.css\";\n\nconst Subreddit = props => {\n  const {\n    skinny,\n    primaryComponent,\n    loading,\n    match: {\n      params: {\n        subredditTitle: routeSubredditTitle = \"Home\" //if undefined it's home\n      }\n    },\n    ...restProps\n  } = props;\n\n  const skinnyContainer = skinny ? \"skinny-container\" : \"\";\n\n  const SideBarContainerWithLoader = withEither(\n    props => props.loading,\n    SideBarLoader\n  )(SideBarContainer);\n  debugger;\n  // Need to perform check with route title rather than\n  // redux version to avoid initial render of header bar\n  const headerBar = checkForPseudoSubreddits(routeSubredditTitle) ? null : (\n    <div className=\"subreddit-header-bar\">\n      <div id=\"subreddit-header-bar-title\">r/{routeSubredditTitle}</div>\n    </div>\n  );\n\n  return (\n    <div className=\"subreddit-container\">\n      {headerBar}\n      <div className={\"subreddit-content \" + skinnyContainer}>\n        <div className=\"primary-container\">{primaryComponent(restProps)}</div>\n        <div className=\"sidebar-container\">\n          <SideBarContainerWithLoader loading={loading} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withRouter(Subreddit);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport {\n  makeSubDetailRequest,\n  makeSubSubscriptionRequest\n} from \"../../actions/Subreddit\";\nimport { getAuthUsername } from \"../../reducers/userAuth\";\nimport { getSubredditData } from \"../../reducers/subreddit\";\nimport Subreddit from \"../../components/Subreddit\";\n\nclass SubredditContainer extends Component {\n  componentDidMount() {\n    // a null subredditTitle implies we are at the home url\n    const subredditTitle = this.props.match.params.subredditTitle || \"home\";\n    this.props.fetchSubDetail(subredditTitle);\n  }\n\n  componentDidUpdate(prevProps) {\n    // a null subredditTitle implies we are at the home url\n    const subredditTitle = this.props.match.params.subredditTitle || \"home\";\n    if (\n      this.props.match.params.subredditTitle !==\n      prevProps.match.params.subredditTitle\n    ) {\n      this.props.fetchSubDetail(subredditTitle);\n    }\n  }\n\n  render() {\n    const {\n      subredditData: { title, description, pseudo, loading },\n      primaryComponent,\n      skinny\n    } = this.props;\n\n    return (\n      <Subreddit\n        {...{\n          title,\n          description,\n          pseudo,\n          loading,\n          primaryComponent,\n          skinny\n        }}\n      />\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  subredditData: getSubredditData(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchSubDetail: subredditTitle =>\n    dispatch(makeSubDetailRequest(subredditTitle)),\n  makeSubscriptionRequest: (subredditTitle, subAction) =>\n    dispatch(makeSubSubscriptionRequest(subredditTitle, subAction))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SubredditContainer);\n","import React from \"react\";\nimport { NavDropdown, MenuItem } from \"react-bootstrap\";\nimport { LinkContainer } from \"react-router-bootstrap\";\n\nimport \"./styles.css\";\n\nconst NavBarDropdown = ({ subscribed }) => {\n  const subscribedSubs = subscribed.map(sub => (\n    <LinkContainer key={sub.pk} exact to={\"/r/\" + sub.title}>\n      <MenuItem eventKey={sub.pk}>{sub.title}</MenuItem>\n    </LinkContainer>\n  ));\n\n  return (\n    <NavDropdown\n      className=\"feed-dropdown\"\n      eventKey={3}\n      title=\"feed\"\n      id=\"basic-nav-dropdown\"\n    >\n      <LinkContainer exact to=\"/\">\n        <MenuItem eventKey={3.1}>Home</MenuItem>\n      </LinkContainer>\n      <LinkContainer exact to=\"/r/popular\">\n        <MenuItem eventKey={3.2}>Popular</MenuItem>\n      </LinkContainer>\n      <LinkContainer exact to=\"/r/all\">\n        <MenuItem eventKey={3.3}>All</MenuItem>\n      </LinkContainer>\n      <MenuItem divider eventKey={3.4} />\n      {subscribedSubs}\n    </NavDropdown>\n  );\n};\n\nexport default NavBarDropdown;\n","import React from 'react';\nimport {\n  FormControl,\n  FormGroup,\n  ControlLabel,\n  HelpBlock,\n} from 'react-bootstrap';\n\nconst FieldGroup = ({id, label, help, ...props}) => (\n  <FormGroup controlId={id}>\n    <ControlLabel>{label}</ControlLabel>\n    <FormControl{...props}>\n      {help && <HelpBlock>{help}</HelpBlock>}\n    </FormControl>\n  </FormGroup>\n);\n\nexport default FieldGroup;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router';\nimport {\n  Navbar,\n  Nav,\n  FormGroup,\n  FormControl,\n  Button,\n} from 'react-bootstrap';\n\nimport FieldGroup from '../FieldGroup';\nimport { LoadingButton } from '../Buttons';\nimport { SEARCH_URL } from '../../urls';\nimport './styles.css';\n\nclass SearchBar extends Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      query: ''\n    };\n    \n    this.handleSearchSubmit = this.handleSearchSubmit.bind(this);\n  }\n  \n  handleChange = (e) => {\n    this.setState({query: e.target.value});\n  }\n  \n  async handleSearchSubmit(e) {\n    e.preventDefault();\n    \n    try{\n      await this.props.handleSearchRequest(this.state.query);\n    } catch {\n      this.forceUpdate()\n    }\n    this.setState({query:''})\n    this.props.history.push(SEARCH_URL);\n  }\n  \n  render() {\n    \n    const {\n      loading,\n      error,\n    } = this.props;\n    \n    return (\n      <Navbar.Form pullLeft>\n        <form onSubmit={this.handleSearchSubmit}>\n          <FieldGroup\n            id=\"search-bar-input\"\n            type=\"text\"\n            placeholder=\"Search...\"\n            name=\"search\"\n            onChange={this.handleChange}\n            value={this.state.query}\n          />\n        <LoadingButton\n          type=\"submit\"\n          loading={loading}\n        >\n          Search\n        </LoadingButton>\n        </form>\n\n      </Navbar.Form>\n    )\n  }\n  \n}\n\nSearchBar.propTypes = {\n  handleSearchRequest: PropTypes.func,\n}\n\nexport default withRouter(SearchBar);\n","import {\n  SEARCH_REQUEST,\n  SEARCH_SUCCESS,\n  SEARCH_FAILURE,\n  API_SEARCH,\n  SET_SEARCH_QUERY,\n  SET_SEARCH_RESULTS_VIEW\n} from \"../actionTypes\";\n\nimport { searchApi } from \"../../api/Search\";\n\nexport const makeSearchRequest = q => {\n  return {\n    type: API_SEARCH,\n    types: {\n      request: SEARCH_REQUEST,\n      success: SEARCH_SUCCESS,\n      failure: SEARCH_FAILURE\n    },\n    callAPI: () => searchApi(q)\n  };\n};\n\nexport const setSearchQuery = q => ({\n  type: SET_SEARCH_QUERY,\n  query: q\n});\n\nexport const setSearchResultsView = (viewName = \"posts\") => ({\n  type: SET_SEARCH_RESULTS_VIEW,\n  viewName\n});\n","import axios from 'axios';\n\nimport { SEARCH_URL } from '../constants'\n\nexport const searchApi = (q) => (\n  axios.get(SEARCH_URL, {params: { q, }, })\n    .then(response => response.data)\n)\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport SearchBar from \"../../components/SearchBar\";\nimport { setSearchQuery } from \"../../actions/Search\";\n\nconst SearchBarContainer = props => {\n  const { handleSearchRequest } = props;\n\n  return <SearchBar {...{ handleSearchRequest }} />;\n};\n\nconst mapDispatchToProps = dispatch => ({\n  handleSearchRequest: q => dispatch(setSearchQuery(q))\n});\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(SearchBarContainer);\n","import React from 'react';\nimport {\n  Navbar,\n  Nav,\n  FormGroup,\n  FormControl,\n  Button,\n} from 'react-bootstrap';\nimport { NavLink } from 'react-router-dom';\n\nimport \"./styles.css\";\nimport NavBarDropdown from './NavBarDropdown';\nimport SearchBarContainer from '../../containers/SearchBarContainer';\n\nconst NavBar = ({children, subscribed}) => {\n  \n  return (\n    <Navbar inverse fixed=\"true\" fluid>\n      <Navbar.Header>\n        <Navbar.Brand>\n          <NavLink exact to=\"/\">reReddit</NavLink>\n        </Navbar.Brand>\n      </Navbar.Header>\n      \n      <Nav>\n        <NavBarDropdown subscribed={subscribed} />\n      </Nav>\n      <SearchBarContainer />\n      \n      {children}\n    </Navbar>\n  );\n};\n\nexport default NavBar;\n","import React from 'react';\nimport { Button } from 'react-bootstrap';\n\nimport './styles.css';\n\n\nconst UserButton = ({children, onClick, inverted}) => {\n  const userButtonId = inverted ? \"user-button-inverted\" : \"user-button-default\";\n  return (\n      <div>\n        <Button onClick={onClick} id={userButtonId} className=\"user-button\">\n          {children}\n        </Button>\n      </div>\n    );\n};\n\nexport default UserButton;\n","import React from 'react';\nimport {\n  Nav,\n  NavItem,\n} from 'react-bootstrap';\n\nimport UserButton from '../UserButton';\nimport './styles.css'\n\nconst UnauthenticatedUser = ({showModal, middleWareTest}) => {\n\n  return (\n    <Nav pullRight className=\"right-user-links\">\n      <NavItem eventKey={4}>\n        <UserButton onClick={() => showModal('login')} inverted>\n          login\n        </UserButton>\n      </NavItem>\n      <NavItem eventKey={5}>\n        <UserButton onClick={() => showModal('register')}>\n          sign up\n        </UserButton>\n      </NavItem>\n    </Nav>\n  );\n}\n\nexport default UnauthenticatedUser;\n","import React from 'react';\nimport {\n  Nav,\n  NavDropdown,\n  MenuItem,\n} from 'react-bootstrap';\n\nimport './styles.css'\n\nconst AuthenticatedUser = ({username,handleLogout}) => {\n  \n  return (\n    <Nav pullRight className=\"auth-dropdown-container\">\n          <NavDropdown \n            className='user-dropdown'\n            eventKey={3}\n            title={username}\n            id=\"user-nav-dropdown\"\n          >\n            <MenuItem eventKey={3.1}>Action</MenuItem>\n            <MenuItem eventKey={3.2}>Another action</MenuItem>\n            <MenuItem eventKey={3.3}>Something else here</MenuItem>\n            <MenuItem divider />\n            <MenuItem \n              eventKey={3.4}\n              onClick={() => handleLogout()}\n            >\n              Logout\n            </MenuItem>\n          </NavDropdown>\n    </Nav>    \n  );\n}\n\nexport default AuthenticatedUser;","import React from 'react';\n\n\n\nimport UnauthenticatedUser from './UnauthenticatedUser';\nimport AuthenticatedUser from './AuthenticatedUser';\n\nconst UserAuthNav = ({showModal, username, handleLogout,middleWareTest}) => {\n  return (\n    username ?\n    <AuthenticatedUser username={username} handleLogout={handleLogout} /> :\n    <UnauthenticatedUser showModal={showModal}/>\n  );\n}\n\nexport default UserAuthNav;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport NavBar from '../../components/NavBar';\nimport UserAuthNav from '../../components/UserAuthNav';\nimport { showUserAuthModal } from '../../actions/UserAuthModal';\nimport { userAuthLogout } from '../../actions/UserAuth';\n\n\nclass NavBarContainer extends Component {\n  render = () => (\n    <NavBar subscribed={this.props.subscribed}>\n      <UserAuthNav\n        showModal={this.props.showModal}\n        username={this.props.username}\n        handleLogout={this.props.handleLogout}\n      />\n    </NavBar>\n  );\n}\n\nconst mapStateToProps = state => (\n  {\n    username: state.userAuth.username,\n    subscribed: state.userAuth.subs,\n  }\n);\n\nconst mapDispatchToProps = dispatch => (\n  {\n    showModal: (displayType) => dispatch(showUserAuthModal(displayType)),\n    handleLogout: () => dispatch(userAuthLogout()),\n  }\n);\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n  null,\n  {pure: false},\n)(NavBarContainer)\n","import React from 'react';\nimport { Alert } from 'react-bootstrap';\nimport { FaTimes, FaCheck } from 'react-icons/fa';\n\nimport { withMaybe } from '../../utilities/HOC';\nimport './styles.css';\n\nexport const SuccessAlert = (props) => (\n  <Alert bsStyle='success' className='alert-message'>\n    <FaCheck color='green' size='3em' />\n    <p className=\"alert-text\" id='success-text' align='center'>\n      {props.children}\n    </p>\n  </Alert>\n)\n\n\nexport const ErrorAlert = (props) => (\n  <Alert bsStyle='danger' className='alert-message'>\n    <FaTimes color='red' size='3em' />\n    <p className=\"alert-text\" id='error-text' align='center'>\n      {props.children}\n    </p>\n  </Alert>\n)\n\nexport const ErrorAlertWithError = withMaybe(\n    (props) => props.children\n  )(ErrorAlert);\n","import React from 'react';\nimport { Modal } from 'react-bootstrap';\n\nimport './styles.css';\nimport { SuccessAlert, ErrorAlert } from '../AlertMessage';\n\nconst UserAuthModal = (props) => {\n  \n  const {\n    handleHide,\n    title,\n    formComponent,\n    messageProps,\n  } = props;\n  \n  const {\n    errorMessage,\n    successMessage,\n  } = messageProps;\n  \n  let eMessage, sMessage = null;\n  \n  if (successMessage) {\n    sMessage =\n      <SuccessAlert>\n        {successMessage}\n      </SuccessAlert>\n    }\n\n    if (errorMessage) {\n      eMessage =\n      <ErrorAlert>\n        {errorMessage}\n      </ErrorAlert>\n    }\n  \n  return (\n    <Modal\n      onHide={handleHide}\n      show\n    >\n      <Modal.Header closeButton>\n        <Modal.Title>{title}</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        {sMessage}\n        {eMessage}\n        {formComponent}\n      </Modal.Body>\n      \n    </Modal>\n  );\n}\n\nexport default UserAuthModal;\n","import React from 'react';\nimport { Button } from 'react-bootstrap';\nimport { CircleLoader } from 'react-spinners';\n\nimport './styles.css'\n\nconst FormButton = (props) => {\n  \n  const {\n    bsStyle,\n    handleClick,\n    loading,\n    children,\n    type,\n  } = props;\n  \n  const spinnerStyle = 'display: inline-block;'\n  \n  const spinner = loading ?\n    <CircleLoader\n      size={20}\n      className={spinnerStyle}\n    /> :\n    null;\n\n  return (\n    <div id='single-button'>\n      <Button\n        bsStyle={bsStyle || null}\n        className='login-buttons'\n        onClick={() => handleClick()}\n        disabled={loading}\n        type={type || 'button'}\n      >\n        {spinner ? spinner : children}\n      </Button>\n    </div>\n  );\n}\n\nexport default FormButton;\n","import React, { Component } from \"react\";\nimport { withRouter } from \"react-router\";\n\nimport FieldGroup from \"../../FieldGroup\";\nimport FormButton from \"../FormButton\";\nimport { HOME_SUBREDDIT_URL } from \"../../../urls\";\nimport \"./styles.css\";\n\nclass ModalLoginForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      username: \"\",\n      password: \"\"\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange = e => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  async handleSubmit() {\n    try {\n      await this.props.handleLogin(this.state.username, this.state.password);\n      this.props.history.push(HOME_SUBREDDIT_URL);\n    } catch {\n      this.forceUpdate();\n    }\n  }\n\n  render() {\n    return (\n      <div id=\"login-form-container\">\n        <form onSubmit={this.handleSubmit}>\n          <FieldGroup\n            id=\"formControlsText\"\n            label=\"Username:\"\n            type=\"text\"\n            value={this.state.username}\n            placeholder=\"username\"\n            name=\"username\"\n            onChange={this.handleChange}\n            autoFocus\n          />\n\n          <FieldGroup\n            id=\"formControlsPassword\"\n            label=\"Password:\"\n            type=\"password\"\n            value={this.state.password}\n            placeholder=\"password\"\n            name=\"password\"\n            onChange={this.handleChange}\n          />\n\n          <div id=\"button-container\">\n            <FormButton\n              bsStyle=\"primary\"\n              handleClick={this.handleSubmit}\n              loading={this.props.loading}\n              children=\"Login\"\n              type=\"submit\"\n            />\n\n            <FormButton\n              bsStyle=\"danger\"\n              handleClick={this.props.handleHide}\n              loading={this.props.loading}\n              children=\"Cancel\"\n            />\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(ModalLoginForm);\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport UserAuthModal from '../../components/UserAuthModal';\nimport ModalLoginForm from \"../../components/ModalForm/ModalLoginForm\";\nimport { hideUserAuthModal } from '../../actions/UserAuthModal';\nimport { makeUserLoginRequest } from '../../actions/UserAuth';\n\nconst LoginModalContainer = (props) => {\n  const {\n    handleHide,\n    handleLogin,\n    loading,\n    messageProps,\n  } = props;\n  \n  return (\n    <UserAuthModal\n      handleHide={handleHide}\n      title='Login'\n      messageProps={messageProps}\n      formComponent={\n        <ModalLoginForm\n          handleLogin={handleLogin}\n          handleHide={handleHide}\n          loading={loading}\n        />\n      }\n    />\n  );\n}\n\nconst mapStateToProps = state => (\n  {\n    loading: state.userAuth.loading,\n  }\n);\n\nconst mapDispatchToProps = dispatch => (\n  {\n    handleHide: () => dispatch(hideUserAuthModal()),\n    handleLogin: (username, password) =>\n      dispatch(makeUserLoginRequest(username, password)),\n  }\n);\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(LoginModalContainer);\n","import React, { Component } from 'react';\n\nimport FieldGroup from '../../FieldGroup';\nimport FormButton from '../FormButton';\nimport './styles.css'\n\nclass ModalRegisterForm extends Component {\n  constructor(props) {\n    super(props);\n    \n    this.handleChange = this.handleChange.bind(this);\n    \n    this.state = {\n      username: '',\n      password: '',\n      email: '',\n    };\n  }\n  \n  handleChange = (e) => {\n      this.setState({[e.target.name]: e.target.value});\n  }\n  \n  handleSubmit = () => {\n    this.props.handleRegister(\n      this.state.username,\n      this.state.password,\n      this.state.email\n    );\n  }\n  \n  render = () => (\n    <div id=\"register-form-container\">\n      <form onSubmit={this.handleSubmit}>\n        <FieldGroup\n          id=\"formControlsText\"\n          label=\"Username:\"\n          type=\"text\"\n          value={this.state.username}\n          placeholder='username'\n          name='username'\n          onChange={this.handleChange}\n          autoFocus\n        />\n      \n        <FieldGroup\n          id=\"formControlsPassword\"\n          label=\"Password:\"\n          type=\"password\"\n          value={this.state.password}\n          placeholder='password'\n          name='password'\n          onChange={this.handleChange}\n        />\n        \n        <FieldGroup\n          id=\"formControlsEmail\"\n          label=\"Email:\"\n          type=\"email\"\n          value={this.state.email}\n          placeholder='email'\n          name='email'\n          onChange={this.handleChange}\n        />\n      \n        <div id=\"button-container\">\n          <FormButton\n            bsStyle='primary'\n            handleClick={this.handleSubmit}\n            loading={this.props.loading}\n            children='Register'\n            type='submit'\n          />\n        \n          <FormButton\n              bsStyle='danger'\n              handleClick={this.props.handleHide}\n              loading={this.props.loading}\n              children='Cancel'\n            />\n        </div>\n      </form>\n    </div>\n  )\n}\n\nexport default ModalRegisterForm;\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport UserAuthModal from '../../components/UserAuthModal';\nimport ModalRegisterForm from '../../components/ModalForm/ModalRegisterForm';\nimport { hideUserAuthModal } from '../../actions/UserAuthModal';\nimport { makeUserRegisterRequest } from '../../actions/UserAuth';\n\nconst RegisterModalContainer = (props) => {\n  const {\n    handleHide,\n    handleRegister,\n    loading,\n    messageProps,\n  } = props;\n  \n  return (\n    <UserAuthModal\n      handleHide={handleHide}\n      title='Register'\n      messageProps={messageProps}\n      formComponent={\n        <ModalRegisterForm\n          handleRegister={handleRegister}\n          handleHide={handleHide}\n          loading={loading}\n        />\n      }\n    />\n  );\n}\n\nconst mapStateToProps = state => (\n  {\n    loading: state.userAuth.loading,\n  }\n);\n\nconst mapDispatchToProps = (dispatch) => (\n  {\n  handleHide: () => dispatch(hideUserAuthModal()),\n  handleRegister: (username, password, email) =>\n    dispatch(makeUserRegisterRequest(username, password, email)),\n  }\n);\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(RegisterModalContainer);\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport LoginModalContainer from './LoginModalContainer';\nimport RegisterModalContainer from './RegisterModalContainer';\n\nconst UserAuthModalContainer = ({displayType, messageProps}) => {\n  switch (displayType) {\n    case 'login':\n      return <LoginModalContainer messageProps={messageProps}/>;\n    case 'register':\n      return <RegisterModalContainer messageProps={messageProps}/>;\n    default:\n      return null;\n  }\n}\n\nconst mapStateToProps = state => (\n  {\n      displayType: state.userAuthModal.displayType,\n      messageProps: {\n        errorMessage: state.userAuthModal.errorMessage,\n        successMessage: state.userAuthModal.successMessage,\n      },\n  }\n);\n\nexport default connect(\n  mapStateToProps\n) (UserAuthModalContainer);\n","import React, { Component, Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport ReactQuill from \"react-quill\";\nimport \"react-quill/dist/quill.snow.css\";\n\nimport { LoadingButton } from \"../Buttons\";\nimport \"./styles.css\";\n\nclass TextEditor extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      editorHtml: props.initialValue || \"\"\n    };\n\n    this.formats = [\n      \"header\",\n      \"font\",\n      \"size\",\n      \"bold\",\n      \"italic\",\n      \"underline\",\n      \"strike\",\n      \"blockquote\",\n      \"list\",\n      \"bullet\",\n      \"indent\",\n      \"code\"\n    ];\n\n    this.modules = {\n      toolbar: [\n        [{ header: \"1\" }, { header: \"2\" }, { font: [] }],\n        [\"bold\", \"italic\", \"underline\", \"strike\", \"blockquote\", \"code\"],\n        [\n          { list: \"ordered\" },\n          { list: \"bullet\" },\n          { indent: \"-1\" },\n          { indent: \"+1\" }\n        ],\n        [\"clean\"]\n      ]\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.quillNode = React.createRef();\n  }\n\n  componentDidMount() {\n    if (!this.props.focusOnEditor) {\n      this.quillNode.current.focus();\n    }\n  }\n\n  handleChange(html) {\n    this.setState({\n      editorHtml: html\n    });\n  }\n\n  handleSubmitClick = editorHtml => {\n    this.setState({\n      editorHtml: \"\"\n    });\n\n    return this.props.handleSubmit(editorHtml);\n  };\n\n  render() {\n    const { placeholder, usage, onBlur, loading } = this.props;\n\n    let submitButtonWord = \"Submit\";\n    switch (usage) {\n      case \"create\":\n        submitButtonWord = \"Post\";\n        break;\n      case \"update\":\n        submitButtonWord = \"Edit\";\n        break;\n      default:\n        break;\n    }\n\n    return (\n      <Fragment>\n        <ReactQuill\n          value={this.state.editorHtml}\n          onChange={this.handleChange}\n          placeholder={placeholder || \"What are your thoughts?\"}\n          modules={this.modules}\n          formats={this.formats}\n          ref={this.quillNode}\n          onBlur={onBlur}\n        />\n        <LoadingButton\n          onClick={() => this.handleSubmitClick(this.state.editorHtml)}\n          className=\"submit-button\"\n          loading={loading}\n        >\n          {submitButtonWord}\n        </LoadingButton>\n      </Fragment>\n    );\n  }\n}\n\nTextEditor.propTypes = {\n  usage: PropTypes.string,\n  rootComment: PropTypes.bool,\n  placeholder: PropTypes.string,\n  initialValue: PropTypes.string,\n  onBlur: PropTypes.func,\n  handleSubmit: PropTypes.func\n};\n\nexport default TextEditor;\n","import React , {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router';\n\nimport TextEditor from '../TextEditor';\nimport FieldGroup from '../FieldGroup';\nimport { ErrorAlert } from '../AlertMessage';\nimport { withMaybe } from '../../utilities/HOC';\nimport FormButton from '../ModalForm/FormButton';\nimport './styles.css';\n\nclass CreatePost extends Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      title:'',\n    }\n    \n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  \n  handleTitleChange = (e) => this.setState({title: e.target.value});\n  \n  async handleSubmit(editorHtml) {\n    \n    try {\n      const postCreation = await this.props.handleCreatePost(\n        this.state.title,\n        editorHtml,\n        this.props.subredditTitle,\n      )\n      this.props.history.replace(`/r/${this.props.subredditTitle}`);\n    } catch {\n      this.forceUpdate()\n    }\n  }\n  \n  render() {\n    \n    const {\n      errorMessage,\n      loading,\n    } = this.props;\n      \n    const CreatePostErrorAlert = withMaybe((props) => props.children)(ErrorAlert);\n      \n    return (\n      <div className=\"create-post-container\">\n        <div className=\"alert-message-container\">\n          <CreatePostErrorAlert children={this.props.errorMessage}/>\n        </div>\n        <form>\n          <div className='title-input-container'>\n            <FieldGroup\n              id=\"create-post-title\"\n              placeholder='Title'\n              type='text'\n              value={this.state.title}\n              onChange={this.handleTitleChange}\n              name='username'\n            />\n          </div>\n\n          <TextEditor\n            handleCommentSubmit={this.handleSubmit}\n            usage=\"create\"\n            placeholder=\"Text (optional)\"\n          />\n\n        </form>\n      </div>\n  )\n  }\n}\n\nCreatePost.propTypes = {\n  errorMessage: PropTypes.string,\n  loading: PropTypes.bool,\n  subredditTitle: PropTypes.string,\n  handleCreatePost: PropTypes.func,\n};\n\nexport default withRouter(CreatePost);\n","import axios from \"axios\";\n\nimport {\n  POST_DETAIL_URL,\n  SUB_POST_LIST_URL,\n  CREATE_POST_URL\n} from \"../constants\";\nimport { tokenContextObj } from \"../apiUtils\";\n\n// Get the list of posts for a particular subreddit\nexport const getSubPostListApi = (subredditTitle, orderBy, username, token) => {\n  const params = { orderby: orderBy, username };\n  return axios\n    .get(SUB_POST_LIST_URL(subredditTitle), {\n      params,\n      ...tokenContextObj(token)\n    })\n    .then(response => response.data);\n};\n\nexport const createPostApi = (title, body, subredditTitle, token) => {\n  const data = { title, body };\n  return axios\n    .post(CREATE_POST_URL(subredditTitle), data, tokenContextObj(token))\n    .then(response => response.data);\n};\n\nexport const updatePostApi = (pk, body, token) => {\n  const data = { body };\n  return axios\n    .patch(POST_DETAIL_URL(pk), data, tokenContextObj(token))\n    .then(response => response.data);\n};\n\nexport const getPostDetailApi = postId =>\n  axios.get(POST_DETAIL_URL(postId)).then(response => response.data);\n\nexport const deletePostApi = (pk, token) => {\n  return axios\n    .delete(POST_DETAIL_URL(pk), tokenContextObj(token))\n    .then(response => response.data);\n};\n","import {\n  FETCH_POST_LIST_REQUEST,\n  FETCH_POST_LIST_SUCCESS,\n  FETCH_POST_LIST_FAILURE,\n  FETCH_POST_DETAIL_REQUEST,\n  FETCH_POST_DETAIL_SUCCESS,\n  FETCH_POST_DETAIL_FAILURE,\n  CREATE_POST_REQUEST,\n  CREATE_POST_SUCCESS,\n  CREATE_POST_FAILURE,\n  DELETE_POST_REQUEST,\n  DELETE_POST_SUCCESS,\n  DELETE_POST_FAILURE,\n  UPDATE_POST_REQUEST,\n  UPDATE_POST_SUCCESS,\n  UPDATE_POST_FAILURE,\n  API_SUB_POST_LIST,\n  API_CREATE_POST,\n  API_DELETE_POST,\n  API_POST_DETAIL,\n  TOGGLE_POST_EDITOR\n} from \"../actionTypes\";\n\nimport {\n  getSubPostListApi,\n  getPostDetailApi,\n  createPostApi,\n  deletePostApi,\n  updatePostApi\n} from \"../../api/Posts\";\nimport { getAuthUsername, getAuthUserToken } from \"../../reducers/userAuth\";\n\n// use redux-thunk for userAuth username\nexport const makeSubPostListRequest = (subredditTitle, orderBy) => (\n  dispatch,\n  getState\n) =>\n  dispatch({\n    type: API_SUB_POST_LIST,\n    types: {\n      request: FETCH_POST_LIST_REQUEST,\n      success: FETCH_POST_LIST_SUCCESS,\n      failure: FETCH_POST_LIST_FAILURE\n    },\n    callAPI: () =>\n      getSubPostListApi(\n        subredditTitle,\n        orderBy,\n        getAuthUsername(getState()),\n        getAuthUserToken(getState())\n      )\n  });\n\n// Using redux-thunk to get an auth token\nexport const makeCreatePostRequest = (title, body, subredditTitle) => (\n  dispatch,\n  getState\n) =>\n  dispatch({\n    type: API_CREATE_POST,\n    types: {\n      request: CREATE_POST_REQUEST,\n      success: CREATE_POST_SUCCESS,\n      failure: CREATE_POST_FAILURE\n    },\n    callAPI: () =>\n      createPostApi(title, body, subredditTitle, getState().userAuth.token)\n  });\n\n// Using redux-thunk to get an auth token\nexport const makeUpdatePostRequest = (pk, body) => (dispatch, getState) =>\n  dispatch({\n    type: API_CREATE_POST,\n    types: {\n      request: UPDATE_POST_REQUEST,\n      success: UPDATE_POST_SUCCESS,\n      failure: UPDATE_POST_FAILURE\n    },\n    callAPI: () => updatePostApi(pk, body, getState().userAuth.token)\n  });\n\nexport const makeDeletePostRequest = pk => (dispatch, getState) =>\n  dispatch({\n    type: API_DELETE_POST,\n    types: {\n      request: onDeletePostRequest(pk),\n      success: DELETE_POST_SUCCESS,\n      failure: DELETE_POST_FAILURE\n    },\n    callAPI: () => deletePostApi(pk, getState().userAuth.token)\n  });\n\n// Use a thunk action creator to get the pk added to the REQUEST action\nconst onDeletePostRequest = pk => dispatch =>\n  dispatch({\n    type: DELETE_POST_REQUEST,\n    pk\n  });\n\nexport const makePostDetailRequest = postId => ({\n  type: API_POST_DETAIL,\n  types: {\n    request: FETCH_POST_DETAIL_REQUEST,\n    success: FETCH_POST_DETAIL_SUCCESS,\n    failure: FETCH_POST_DETAIL_FAILURE\n  },\n  callAPI: () => getPostDetailApi(postId)\n});\n\nexport const togglePostEditor = () => ({\n  type: TOGGLE_POST_EDITOR\n});\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport CreatePost from '../../components/CreatePost';\nimport { makeCreatePostRequest } from '../../actions/Posts';\nimport {\n  getCreatePostError,\n  getCreatePostLoading,\n} from '../../reducers/createPost';\nimport {\n  getSubredditTitle,\n} from '../../reducers/subreddit';\n\nclass CreatePostContainer extends Component {\n\n  render() {\n    return <CreatePost {...this.props} />\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n    handleCreatePost: (title, body, subredditTitle) =>\n      dispatch(makeCreatePostRequest(title, body, subredditTitle)),\n})\n\nconst mapStateToProps = (state) => ({\n    errorMessage: getCreatePostError(state),\n    loading: getCreatePostLoading(state),\n    subredditTitle: getSubredditTitle(state),\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(CreatePostContainer);\n","import React, { Component, Fragment } from 'react';\nimport { FaArrowUp, FaArrowDown } from 'react-icons/fa';\n\nimport './styles.css';\n\nclass Voter extends Component {\n  \n  upvotedStyle = {\n    color: '#cc3700',\n  }\n  \n  downvotedStyle = {\n    color: '#8DA8FF',\n  }\n  \n  render() {\n    \n    const {\n      upvotes,\n      displayState,\n      handleVote\n    } = this.props;\n    \n    return (\n      <div className='vote-container'>\n        <div className='voter-arrow upvoter'>\n          <span\n            style={displayState === 1 ? this.upvotedStyle : {}}\n            onClick={() => handleVote(1)}\n          >\n            <FaArrowUp />\n          </span>\n        </div>\n        <div\n          className='vote-count'\n          style={\n            displayState === 1\n              ? this.upvotedStyle\n              : displayState === -1\n                ? this.downvotedStyle\n                : {}\n          }          \n        >\n          {upvotes}\n        </div>\n        <div className='voter-arrow downvoter' >\n          <span\n            style={displayState === -1 ? this.downvotedStyle : {}}\n            onClick={() => handleVote(-1)}\n          >\n            <FaArrowDown />\n          </span>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Voter;\n","import {\n  VOTE_REQUEST,\n  VOTE_SUCCESS,\n  VOTE_FAILURE,\n  COMMENT_VOTE_SUCCESS,\n  POST_VOTE_SUCCESS,\n  API_VOTE,\n} from '../actionTypes';\n\nimport { voteApi } from '../../api/Voter';\n\n// use thunk to get token\nexport const makeVoteRequest = (voteData) =>\n  (dispatch, getState) =>\n    dispatch(\n      {\n        type: API_VOTE,\n        types: {\n          request: VOTE_REQUEST,\n          success: onVoteSuccess,\n          failure: VOTE_FAILURE,\n        },\n        callAPI: () => voteApi(\n          voteData,\n          getState().userAuth.token\n        ),\n      }\n    )\n\nconst onVoteSuccess = (data, getState, dispatch) => {\n  if (data.hasOwnProperty('comment')) {\n    return dispatch({\n      type: COMMENT_VOTE_SUCCESS,\n      data\n    })\n  } else if (data.hasOwnProperty('post')) {\n    return dispatch({\n      type: POST_VOTE_SUCCESS,\n      data\n    })\n  }\n  \n  throw new ReferenceError(\n    'Upvote is of unknown type',\n    'actions/Voter/index.js',\n    41\n  )\n}\n","import axios from 'axios';\n\nimport {\n  VOTE_URL,\n} from '../constants';\nimport { tokenContextObj } from '../apiUtils';\n\nexport const voteApi = (voteData, token) => {\n  // voteType: upvote(1), downvote(-1) or unvote(0)\n  // itemType: 'post' or 'comment'\n  // itemPk: pk of post or comment\n  const {\n    itemType,\n    itemPk: pk,\n    voteType,\n  } = voteData;\n  \n  let itemFn = null;\n  if (itemType === 'comment') {\n    itemFn = `t1_${pk}`\n  } else if (itemType === 'post') {\n    itemFn = `t2_${pk}`\n  };\n  \n  const data = {vote_type: voteType, item_fn: itemFn};\n  return axios.post(VOTE_URL, data, tokenContextObj(token))\n    .then(response => response.data)\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport Voter from '../../components/Voter';\nimport { makeVoteRequest } from '../../actions/Voter';\n\nconst VoterContainer = ({voteDisplayState, handleVote, upvotes}) => (\n  <Voter\n    displayState={voteDisplayState}\n    handleVote={handleVote}\n    upvotes={upvotes}\n  />\n)\n\nconst mapDispatchToProps = (dispatch, ownProps) => (\n  {\n    handleVote: (voteType) => dispatch(\n      makeVoteRequest({\n      voteType,\n      itemType: ownProps.itemType,\n      itemPk: ownProps.itemPk,\n      })\n    ),\n  }\n)\n\nexport default connect(\n  null,\n  mapDispatchToProps,\n)(VoterContainer);\n","import React from 'react';\nimport { FaEllipsisH } from 'react-icons/fa';\nimport { Dropdown, MenuItem } from 'react-bootstrap';\n\nimport './styles.css';\n\nconst EllipsisButton = ({children}) => (\n  \n  <Dropdown id=\"ellipsis-dropdown\" >\n    <Dropdown.Toggle noCaret className=\"toggle-button\">\n      <FaEllipsisH/>\n    </Dropdown.Toggle>\n    <Dropdown.Menu className=\"ellipsis-dropdown-menu\">\n      {children}\n    </Dropdown.Menu>\n  </Dropdown>\n)\n\nexport default EllipsisButton;\n","import React, { Component, Fragment } from \"react\";\nimport { Button, Tooltip, OverlayTrigger } from \"react-bootstrap\";\nimport { FaShare } from \"react-icons/fa\";\n\nimport \"./styles.css\";\n\nclass ShareButton extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      showTooltip: false\n    };\n\n    this.copyNode = React.createRef();\n\n    this.copyTooltip = <Tooltip id=\"copy-tooltip\">Copied Link</Tooltip>;\n  }\n\n  toggleTooltip = () => {\n    this.setState({ showTooltip: !this.state.showTooltip });\n  };\n\n  copyToClipboard = e => {\n    this.copyNode.current.select();\n    document.execCommand(\"copy\");\n\n    this.toggleTooltip();\n    setTimeout(this.toggleTooltip, 4000);\n  };\n\n  render() {\n    const { shareUrl } = this.props;\n\n    return (\n      <Fragment>\n        <OverlayTrigger\n          placement=\"bottom\"\n          overlay={this.copyTooltip}\n          trigger=\"focus\"\n          delayHide={4000}\n        >\n          <Button\n            bsSize=\"xsmall\"\n            className=\"share-button\"\n            onClick={this.copyToClipboard}\n          >\n            <FaShare /> Share\n          </Button>\n        </OverlayTrigger>\n        <form>\n          <input\n            className=\"hidden-copy-input\"\n            readOnly\n            ref={this.copyNode}\n            value={shareUrl}\n            aria-hidden=\"true\"\n          />\n        </form>\n      </Fragment>\n    );\n  }\n}\n\nexport default ShareButton;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router';\nimport { Panel, Button, MenuItem } from 'react-bootstrap';\nimport { FaShare } from 'react-icons/fa';\nimport { Link } from 'react-router-dom';\n\nimport VoterContainer from '../../containers/VoterContainer';\nimport EllipsisButton from '../EllipsisButton';\nimport ShareButton from '../ShareButton';\nimport { withMaybe } from '../../utilities/HOC';\nimport './styles.css';\n\nclass PostPanel extends Component {\n  \n  handlePanelClick = (e) => {\n    const {\n      subredditTitle,\n      pk,\n      history,\n    } = this.props;\n    \n    if (e.target instanceof HTMLDivElement) {\n      history.push(`/r/${subredditTitle}/postDetail/${pk}`)\n    }\n  };\n  \n  render() {\n    const {\n      upvotes,\n      pk,\n      title,\n      subredditTitle,\n      posterUsername,\n      authUsername,\n      created,\n      voteDisplayState,\n      handleDeletePost,\n      history,\n    } = this.props;\n    \n    const AuthEllipsis = withMaybe(\n      (props) => props.showEllipsis\n    )(EllipsisButton);\n\n    return (\n      <div\n        className=\"post-segment-panel\"\n        name=\"postPanel\"\n        onClick={this.handlePanelClick}\n      >\n          <VoterContainer\n            upvotes={upvotes}\n            voteDisplayState={voteDisplayState || 0}\n            itemType={'post'}\n            itemPk={pk}\n          />\n\n        \n        <div className='post-segment-text-container'>\n          <div className=\"post-segment-title\">\n            <Link\n              id=\"post-title\"\n              to={\"/r/\" + subredditTitle + \"/postDetail/\" + pk}\n            >\n              {title}\n            </Link>\n          </div>\n          \n          <div className='post-segment-info'>\n            <strong>\n              <Link to={`/r/${subredditTitle}`}>\n                r/{subredditTitle}\n              </Link>\n            </strong>\n            - posted by:\n            <a href=\"#\"> u/{posterUsername} </a>\n            {created}\n          </div>\n          \n          <div className='post-segment-links'>\n            <Link to={`/r/${subredditTitle}/postDetail/${pk}/comments`}>\n              <Button\n                bsSize='xsmall'\n                className='post-buttons'\n              >\n                Comments\n              </Button>\n            </Link>\n\n            <ShareButton shareUrl={`${window.location}/postDetail/${pk}`}/>\n\n            <AuthEllipsis\n              showEllipsis={authUsername === posterUsername}\n            >\n              <MenuItem\n                eventKey={1}\n                onSelect={handleDeletePost}\n              >\n                delete\n              </MenuItem>\n                      \n              <MenuItem\n                eventKey={2}\n                onSelect={() => null}\n              >\n                edit\n              </MenuItem>\n\n\n            </AuthEllipsis>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nPostPanel.propTypes = {\n  upvotes: PropTypes.number,\n  pk: PropTypes.number,\n  title: PropTypes.string,\n  subredditTitle: PropTypes.string,\n  posterUsername: PropTypes.string,\n  authUsername: PropTypes.string,\n  created: PropTypes.string,\n  voteDisplayState: PropTypes.number,\n  handleDeletePost: PropTypes.func,\n}\n\nexport default withRouter(PostPanel);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router';\n\nimport PostPanel from '../../components/PostPanel';\nimport { getPostById } from '../../reducers/postList';\nimport { getAuthUsername } from '../../reducers/userAuth';\nimport { makeDeletePostRequest } from '../../actions/Posts';\n\n\nconst PostPanelContainer = (props) => {\n  const { post, handleDeletePost, authUsername, usage } = props;\n  const {\n    upvotes,\n    pk,\n    title,\n    subredditTitle,\n    posterUsername,\n    created,\n    voteDisplayState,\n  } = post;\n  \n  return (\n    <PostPanel\n      {...{\n        upvotes,\n        pk,\n        title,\n        subredditTitle,\n        posterUsername,\n        authUsername,\n        created,\n        voteDisplayState,\n        handleDeletePost,\n      }}\n    />\n  );\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  const {\n    postPk,\n    usage,\n  } = ownProps;\n\n  return ({\n      post: getPostById(state, postPk),\n      authUsername: getAuthUsername(state),\n    })\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  handleDeletePost: () => dispatch(makeDeletePostRequest(ownProps.postPk)),\n})\n\nPostPanelContainer.propTypes = {\n  post: PropTypes.shape({\n    upvotes: PropTypes.number,\n    pk: PropTypes.number,\n    title: PropTypes.string,\n    subredditTitle: PropTypes.string,\n    posterUsername: PropTypes.string,\n    created: PropTypes.string,\n    voteDisplayState: PropTypes.oneOf([0,-1,1]),\n  }),\n  handleDeletePost: PropTypes.func,\n  authUsername: PropTypes.string,\n  usage: PropTypes.oneOf(['subreddit', 'search']),\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(PostPanelContainer);\n","import React from \"react\";\n\nconst EmptyPostList = () => (\n  <div className=\"empty-list-content\">\n    <h2>Such Empty!</h2>\n  </div>\n);\n\nexport default EmptyPostList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router';\n\nimport PostPanelContainer from '../../containers/PostPanelContainer';\nimport { ErrorAlert } from '../AlertMessage';\nimport { PanelListLoader } from '../Loaders';\nimport EmptyPostList from './EmptyPostList';\nimport './styles.css';\n\nconst PostList = (props) => {\n  const {\n    loading,\n    error,\n    allPosts,\n  } = props;\n\n  \n  if (error) {\n    return(\n      <ErrorAlert>\n        {error}\n      </ErrorAlert>\n    )\n  }\n  \n  let postList;\n  if (loading) {\n    postList =  <PanelListLoader panelNumber={8}/>;\n  } else if (allPosts.length === 0 ){\n    postList = <EmptyPostList />;\n  } else{\n      const postPanels = allPosts.map((postPk) => {\n        return <PostPanelContainer postPk={postPk} key={postPk} />});\n      postList = <ul>{postPanels}</ul>\n  }\n  \n  return (\n    <div className='postlist-content'>\n        {postList}\n    </div>\n  );\n}\n\nPostList.propTypes = {\n  loading: PropTypes.bool,\n  error: PropTypes.string,\n  allPosts: PropTypes.arrayOf(PropTypes.number),\n}\n\nexport default withRouter(PostList);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router\";\n\nimport { makeSubPostListRequest } from \"../../actions/Posts\";\nimport PostList from \"../../components/PostList\";\n\nclass PostListContainer extends Component {\n  componentDidMount() {\n    // If undefined converts to null\n    const subredditTitle = this.props.match.params.subredditTitle || \"home\";\n\n    this.props.fetchPostList(subredditTitle, \"new\");\n  }\n\n  componentDidUpdate(prevProps) {\n    // If undefined converts to null\n    const subredditTitle = this.props.match.params.subredditTitle || \"home\";\n\n    if (\n      this.props.match.params.subredditTitle !==\n      prevProps.match.params.subredditTitle\n    ) {\n      this.props.fetchPostList(subredditTitle, \"new\");\n    }\n  }\n\n  render() {\n    return <PostList {...this.props} />;\n  }\n}\n\nconst mapStateToProps = state => ({\n  loading: state.postList.loading,\n  error: state.postList.error,\n  allPosts: state.postList.allPosts\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchPostList: (subredditTitle, orderBy) =>\n    dispatch(makeSubPostListRequest(subredditTitle, orderBy))\n});\n\nexport default withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(PostListContainer)\n);\n","import React from 'react';\n\nimport { Link } from 'react-router-dom';\nimport './styles.css';\n\nconst PostInfoLine = ({title, poster}) => (\n  <div className='post-info-line'>\n    <div className='link-to-sub'>\n      <Link to={`/r/${title}`}>\n        {`r/${title}`}\n      </Link>\n    </div>\n    <span id='divider'>-</span>\n    <div className='link-to-user'>\n      <Link to={`/u/${poster}`}>\n        {`Posted by u/${poster}`}\n      </Link>\n    </div>\n  </div>\n)\n\nexport default PostInfoLine;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport TextEditor from '../../components/TextEditor'\nimport {\n  makeUpdatePostRequest,\n} from '../../actions/Posts';\nimport {\n  getPostDetailBody\n} from '../../reducers/postDetail';\nimport {\n  getEditPostLoading,\n} from '../../reducers/editPost';\n\n\nconst PostEditorContainer = (props) => {\n  const {\n    handleSubmit,\n    body,\n    loading,\n  } = props;\n  \n  return (\n    <TextEditor\n      handleSubmit={handleSubmit}\n      placeholder={body}\n      initialValue={body}\n      usage=\"update\"\n      loading={loading}\n    />\n  )\n}\n\nPostEditorContainer.propTypes = {\n  onEditorSubmit: PropTypes.func,\n  handleSubmit: PropTypes.func,\n  body: PropTypes.string,\n};\n\nconst mapStateToProps = (state) => ({\n  loading: getEditPostLoading(state),\n})\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  handleSubmit: async (body) => {\n    try {\n      await dispatch(makeUpdatePostRequest(ownProps.pk, body));\n    } catch {\n    }\n    // Callback to effect some change when submission occurs (like hide the editor)\n    ownProps.onEditorSubmitSuccess && ownProps.onEditorSubmitSuccess();\n    \n  },\n});\n\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(PostEditorContainer);\n","import axios from 'axios';\n\nimport {\n POST_COMMENT_TREES_URL,\n COMMENT_LIST_URL,\n VOTE_URL,\n COMMENT_DETAIL_URL,\n} from '../constants'\nimport { tokenContextObj } from '../apiUtils';\n\nexport const getCommentTreeApi = (postPk, username) => {\n  const config = username ? {params: {username}} : {};\n  \n  return axios.get(POST_COMMENT_TREES_URL(postPk), config)\n      .then(response => response.data)\n}\n\nexport const createCommentApi = (commentData, token) => {\n  const {\n    body,\n    parentPk,\n    rootComment,\n  } = commentData;\n  // See backend, a 'fullname' is constructed to specify the parent of the comment\n  const parentFn = rootComment ? `t2_${parentPk}` : `t1_${parentPk}`;\n  const data = {body, parent_fn:parentFn};\n  return axios.post(COMMENT_LIST_URL, data, tokenContextObj(token))\n    .then(response => response.data)\n}\n\nexport const deleteCommentApi = (pk, token) => {\n  return axios.delete(COMMENT_DETAIL_URL(pk), tokenContextObj(token))\n    .then(response => response.data)\n}\n\nexport const updateCommentApi = (commentData, token) => {\n  return axios.patch(\n    COMMENT_DETAIL_URL(commentData.pk),\n    commentData,\n    tokenContextObj(token)\n  )\n    .then(response => response.data)\n}\n\nexport const commentVoteApi = (voteData, token) => {\n  const {\n    vote_type,\n    comment_pk: comment,\n  } = voteData;\n  \n  const data = {vote_type, item_fn: `t1_${comment}`};//comment};\n  return axios.post(VOTE_URL, data, tokenContextObj(token))\n    .then(response => response.data)\n}\n","import { normalize, schema } from 'normalizr';\n\nimport {\n  FETCH_POST_COMMENT_TREES_REQUEST,\n  FETCH_POST_COMMENT_TREES_SUCCESS,\n  FETCH_POST_COMMENT_TREES_FAILURE,\n  API_POST_COMMENT_TREES,\n  CREATE_COMMENT_REQUEST,\n  CREATE_COMMENT_SUCCESS,\n  CREATE_COMMENT_FAILURE,\n  API_CREATE_COMMENT,\n  DELETE_COMMENT_REQUEST,\n  DELETE_COMMENT_SUCCESS,\n  DELETE_COMMENT_FAILURE,\n  API_DELETE_COMMENT,\n  UPDATE_COMMENT_REQUEST,\n  UPDATE_COMMENT_SUCCESS,\n  UPDATE_COMMENT_FAILURE,\n  API_UPDATE_COMMENT,\n  COMMENT_VOTE_SUCCESS,\n} from '../actionTypes';\nimport {\n  createCommentApi,\n  getCommentTreeApi,\n  commentVoteApi,\n  deleteCommentApi,\n  updateCommentApi,\n} from '../../api/Comments'\n\n// Use redux-thunk to get the userAuth username\nexport const makeCommentTreeRequest = (postPk) =>\n  (dispatch, getState) => dispatch(\n    {\n      type: API_POST_COMMENT_TREES,\n      types: {\n        request: FETCH_POST_COMMENT_TREES_REQUEST,\n        success: normalizeCommentTreeOnSuccess,\n        failure: FETCH_POST_COMMENT_TREES_FAILURE,\n      },\n      callAPI: () => getCommentTreeApi(postPk, getState().userAuth.username),\n    }\n  )\n  \n// When comment trees are successfully fetched, normalize them for redux store\nconst normalizeCommentTreeOnSuccess = (nestedComments, getState, dispatch) => {\n  if (nestedComments.length === 0) {\n    return dispatch({\n      type: FETCH_POST_COMMENT_TREES_SUCCESS,\n      data: {entities: {comments: {}, posters: {} }, result: [] },\n    })\n  }\n  const posterSchema = new schema.Entity('posters', {}, { idAttribute: 'pk' });\n  const commentSchema = new schema.Entity(\n    'comments',\n    {poster: posterSchema},\n    { idAttribute: 'pk',}\n  );\n  const commentListSchema = new schema.Array(commentSchema);\n  commentSchema.define({ children: commentListSchema })\n  const normalizedComments = normalize(nestedComments, commentListSchema);\n  Object.entries(normalizedComments.entities.comments).forEach(([id, comment]) => {\n    const {vote_state, ...newComment} = comment;\n    normalizedComments.entities.comments[id] = {\n      ...newComment,\n      voteDisplayState: vote_state\n    };\n  });\n  return dispatch({\n    type: FETCH_POST_COMMENT_TREES_SUCCESS,\n    data: normalizedComments\n  })\n}\n\n// Use redux-thunk to grab the userAuth token\nexport const makeCreateCommentRequest = (commentData) =>\n  (dispatch, getState) =>\n    dispatch(\n      {\n        type: API_CREATE_COMMENT,\n        types: {\n          request: CREATE_COMMENT_REQUEST,\n          success: CREATE_COMMENT_SUCCESS,\n          failure: CREATE_COMMENT_FAILURE,\n        },\n        callAPI: () => createCommentApi(\n          commentData,\n          getState().userAuth.token\n        ),\n      }\n    )\n    \n// Use redux-thunk to grab the userAuth token\nexport const makeDeleteCommentRequest = (pk) =>\n  (dispatch, getState) =>\n    dispatch(\n      {\n        type: API_DELETE_COMMENT,\n        types: {\n          request: DELETE_COMMENT_REQUEST,\n          success: DELETE_COMMENT_SUCCESS,\n          failure: DELETE_COMMENT_FAILURE,\n        },\n        callAPI: () => deleteCommentApi(\n          pk,\n          getState().userAuth.token\n        ),\n      }\n    )\n    \n// Use redux-thunk to grab the userAuth token\nexport const makeUpdateCommentRequest = (commentData) =>\n  (dispatch, getState) =>\n    dispatch(\n      {\n        type: API_UPDATE_COMMENT,\n        types: {\n          request: UPDATE_COMMENT_REQUEST,\n          success: UPDATE_COMMENT_SUCCESS,\n          failure: UPDATE_COMMENT_FAILURE,\n        },\n        callAPI: () => updateCommentApi(\n          commentData,\n          getState().userAuth.token\n        ),\n      }\n    )\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\nimport TextEditor from \"../../components/TextEditor\";\nimport {\n  makeCreateCommentRequest,\n  makeUpdateCommentRequest\n} from \"../../actions/Comments\";\nimport { getPostDetailPk } from \"../../reducers/postDetail\";\n\nconst CommentEditorContainer = props => {\n  return <TextEditor {...props} />;\n};\n\nconst mapStateToProps = (state, ownProps) => ({\n  // should the editor be focues on after mounting?\n  focusOnEditor: ownProps.rootComment\n});\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  // This is used for two occasions, creating and updating a comment.\n  switch (ownProps.usage) {\n    case \"create\": {\n      const handleSubmit = commentBody =>\n        dispatch(\n          makeCreateCommentRequest({\n            body: commentBody,\n            parentPk: ownProps.parentPk,\n            rootComment: ownProps.rootComment\n          })\n        );\n      return { handleSubmit };\n    }\n\n    case \"update\": {\n      const handleSubmit = body => {\n        // onEditorSubmit is a hook so that the parent component\n        // can effect changes beyond the action dispatch, e.g. toggle editor\n        ownProps.onEditorSubmit && ownProps.onEditorSubmit();\n\n        return dispatch(\n          makeUpdateCommentRequest({\n            body,\n            pk: ownProps.pk\n          })\n        );\n      };\n      return { handleSubmit };\n    }\n\n    default:\n      return {};\n  }\n};\n\n// const mergeProps = (stateProps, dispatchProps, ownProps) => {\n//   // This mess is caused by the late determination of parentPk in mapStateToProps\n//   if (ownProps.usage === 'create') {\n//     const handleSubmit = dispatchProps.handleCreateCommentWrapper(\n//       stateProps.parentPk\n//     );\n//\n//     return ({\n//       ...stateProps,\n//       ...ownProps,\n//       handleSubmit,\n//     });\n//   }\n//   return {...ownProps, ...stateProps, ...dispatchProps};\n// }\n\nCommentEditorContainer.propTypes = {\n  usage: PropTypes.oneOf([\"update\", \"create\"]).isRequired,\n  rootComment: PropTypes.bool,\n  commentParentPk: PropTypes.number,\n  pk: PropTypes.number,\n  postPk: PropTypes.number,\n  handleCreateComment: PropTypes.func,\n  onEditorSubmit: PropTypes.func,\n  handleSubmit: PropTypes.func.isRequired\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(CommentEditorContainer);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './styles.css';\n\nconst CommentInfoLine = (props) => {\n  \n  const {\n    posterUsername,\n    upvotes,\n    created,\n    deleted,\n  } = props;\n  \n  const upvotesLabel = upvotes^2===1 ? 'point' : 'points';\n  const username = deleted\n    ? \"comment deleted\"\n    : <Link to={\"/\"}>\n        {`u/${posterUsername}`}\n      </Link>;\n      \n  return (\n    <div className=\"poster-info-container\">\n      <span>{username}</span>\n      <span>{deleted || `${upvotes} ${upvotesLabel}`}</span>\n      <span>-</span>\n      <span>{`created: ${created}`}</span>\n    </div>\n  )\n}\n\nexport default CommentInfoLine;\n","import React, { Component, Fragment } from \"react\";\nimport { FaComment } from \"react-icons/fa\";\nimport { Button, MenuItem } from \"react-bootstrap\";\nimport PropTypes from \"prop-types\";\n\nimport EllipsisButton from \"../../EllipsisButton\";\nimport { withMaybe } from \"../../../utilities/HOC\";\nimport \"./styles.css\";\n\nclass CommentBody extends Component {\n  render() {\n    const {\n      body,\n      posterUsername,\n      authUsername,\n      pk,\n      handleDeleteComment,\n      handleToggleReplyEditor,\n      handleToggleUpdateEditor\n    } = this.props;\n\n    const AuthEllipsis = withMaybe(\n      props => props.authUsername === props.posterUsername\n    )(EllipsisButton);\n\n    return (\n      <Fragment>\n        <div\n          className=\"comment-body-container\"\n          dangerouslySetInnerHTML={{ __html: body }}\n        />\n        <div className=\"comment-links\">\n          <div className=\"comment-icon\">\n            <FaComment />\n          </div>\n          <Button\n            bsSize=\"xsmall\"\n            className=\"comment-buttons\"\n            onClick={handleToggleReplyEditor}\n          >\n            Reply\n          </Button>\n          {/* This may be nice but for now we don't have a comment detail page\n            <Button bsSize='xsmall' className='comment-buttons'>\n              Share\n            </Button>\n          */}\n          <AuthEllipsis\n            {...{\n              authUsername,\n              posterUsername\n            }}\n          >\n            <MenuItem eventKey={2} onSelect={handleToggleUpdateEditor}>\n              edit\n            </MenuItem>\n            <MenuItem eventKey={1} onSelect={handleDeleteComment}>\n              delete\n            </MenuItem>\n          </AuthEllipsis>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nCommentBody.propTypes = {\n  body: PropTypes.string,\n  posterUsername: PropTypes.string,\n  authUsername: PropTypes.string,\n  pk: PropTypes.number,\n  handleDeleteComment: PropTypes.func,\n  handleToggleReplyEditor: PropTypes.func,\n  handleToggleUpdateEditor: PropTypes.func\n};\n\nexport default CommentBody;\n","import React, { Component, Fragment } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { FaComment } from \"react-icons/fa\";\nimport { compose } from \"recompose\";\n\nimport \"./styles.css\";\nimport CommentEditorContainer from \"../../../containers/CommentEditorContainer\";\nimport CommentInfoLine from \"../CommentInfoLine\";\nimport CommentBody from \"../CommentBody\";\nimport VoterContainer from \"../../../containers/VoterContainer\";\nimport { withMaybe, withEither } from \"../../../utilities/HOC\";\n\nclass ExpandedComment extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      showReplyEditor: false,\n      showUpdateEditor: false\n    };\n\n    this.handleToggleReplyEditor = this.handleToggleReplyEditor.bind(this);\n    this.handleToggleUpdateEditor = this.handleToggleUpdateEditor.bind(this);\n  }\n\n  handleToggleReplyEditor() {\n    this.setState({\n      showReplyEditor: !this.state.showReplyEditor\n    });\n  }\n\n  handleToggleUpdateEditor() {\n    this.setState({\n      showUpdateEditor: !this.state.showUpdateEditor\n    });\n  }\n\n  render() {\n    const {\n      childrenList,\n      body,\n      posterUsername,\n      authUsername,\n      upvotes,\n      created,\n      pk,\n      voteDisplayState,\n      deleted,\n      handleToggleCollapse: handleCollapse,\n      handleDeleteComment\n    } = this.props;\n\n    const ReplyEditorWithHide = withMaybe(props => props.showEditor)(\n      CommentEditorContainer\n    );\n\n    const CommentBodyWithDeleteAndUpdateEditor = compose(\n      withMaybe(props => !props.deleted),\n      withEither(props => props.showUpdateEditor, CommentEditorContainer)\n    )(CommentBody);\n\n    const updateEditorProps = {};\n\n    return (\n      <div className=\"comment-tree-content\">\n        <div className=\"comment-voter-collapser\">\n          {deleted || (\n            <VoterContainer\n              voteDisplayState={voteDisplayState}\n              itemType={\"comment\"}\n              itemPk={pk}\n            />\n          )}\n          <span\n            onClick={() => handleCollapse()}\n            className=\"thread-line-container\"\n          >\n            <div className=\"thread-line\" />\n          </span>\n        </div>\n        <div className=\"comment-panel\">\n          <div className=\"comment-info-line-container\">\n            <CommentInfoLine\n              {...{ posterUsername, upvotes, created, deleted }}\n            />\n          </div>\n\n          <CommentBodyWithDeleteAndUpdateEditor\n            {...{\n              body,\n              posterUsername,\n              authUsername,\n              pk,\n              deleted,\n              handleDeleteComment\n            }}\n            usage=\"update\"\n            initialValue={body}\n            onBlur={this.handleToggleUpdateEditor}\n            onEditorSubmit={this.handleToggleUpdateEditor}\n            showUpdateEditor={this.state.showUpdateEditor}\n            handleToggleReplyEditor={this.handleToggleReplyEditor}\n            handleToggleUpdateEditor={this.handleToggleUpdateEditor}\n          />\n\n          <ReplyEditorWithHide\n            showEditor={this.state.showReplyEditor}\n            rootComment={false}\n            parentPk={pk}\n            usage=\"create\"\n            onBlur={this.handleToggleReplyEditor}\n          />\n          <div className=\"children-container\">{childrenList}</div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ExpandedComment;\n","import React from 'react';\nimport { IoIosAddCircle } from 'react-icons/io';\nimport { Link } from 'react-router-dom';\n\nimport CommentInfoLine from '../CommentInfoLine';\nimport './styles.css';\n\nconst CollapsedComment = (props) => {\n  const {\n    posterUsername,\n    upvotes,\n    created,\n    deleted,\n    handleToggleCollapse:handleExpansion,\n  } = props;\n  \n  return (\n    <div className=\"comment-tree-content collapsed-container\">\n      <div onClick={() => handleExpansion()} className=\"expander\">\n        <IoIosAddCircle />\n      </div>\n      <div className='collapsed-links'>\n        <CommentInfoLine {...{posterUsername, upvotes, created, deleted,}}/>\n      </div>\n    </div>\n  )\n}\n\nexport default CollapsedComment;\n","import React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './styles.css';\nimport ExpandedComment from './ExpandedComment';\nimport CollapsedComment from './CollapsedComment';\nimport { withEither } from '../../utilities/HOC';\nimport CommentContainer from '../../containers/CommentContainer';\n\n\nclass Comment extends Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      collapsed: false,\n    }\n    \n    this.handleToggleCollapse = this.handleToggleCollapse.bind(this);\n  }\n  \n  handleToggleCollapse() {\n    this.setState({\n      collapsed: !this.state.collapsed,\n    })\n  }\n    \n  render() {\n    \n    const {\n      childrenPk,\n      body,\n      upvotes,\n      created,\n      pk,\n      voteDisplayState,\n      deleted,\n      posterUsername,\n      authUsername,\n      handleDeleteComment,\n    } = this.props;\n\n    let childrenList = [];\n    if (Array.isArray(childrenPk) && childrenPk.length) {\n      childrenList =\n        childrenPk.map(childPk => (\n            <CommentContainer\n              pk={childPk}\n              key={childPk}\n            />\n        ))\n      }\n    \n    const CollapsibleComment = withEither(\n      (props) => props.collapsed,\n      CollapsedComment\n    )(ExpandedComment);\n        \n    return (\n      <CollapsibleComment\n        {\n          ...{\n            childrenList,\n            body,\n            upvotes,\n            created,\n            pk,\n            voteDisplayState,\n            deleted,\n            posterUsername,\n            authUsername,\n            handleDeleteComment,\n          }\n        }\n        handleToggleCollapse={this.handleToggleCollapse}\n        collapsed={this.state.collapsed}\n      />\n    )\n  }\n}\n\nComment.propTypes = {\n  childrenPk: PropTypes.arrayOf(PropTypes.number),\n  body: PropTypes.string,\n  upvotes: PropTypes.number,\n  created: PropTypes.string,\n  pk: PropTypes.number,\n  voteDisplayState: PropTypes.number,\n  deleted: PropTypes.bool,\n  posterUsername: PropTypes.string,\n  authUsername: PropTypes.string,\n  handleDeleteComment: PropTypes.func,\n}\n\nexport default Comment;\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport Comment from '../../components/Comment';\nimport {\n  getCommentById,\n  getPosterByCommentId, } from '../../reducers/comments';\nimport { getAuthUsername } from '../../reducers/userAuth';\nimport { makeDeleteCommentRequest } from '../../actions/Comments';\n\nconst CommentContainer = (props) => {\n  \n  const {\n    commentData,\n    posterData,\n    authUsername,\n    handleDeleteComment,\n    pk\n    } = props;\n  const {\n    children: childrenPk,\n    body,\n    upvotes,\n    created,\n    voteDisplayState,\n    deleted,\n  } = commentData;\n  const posterUsername  = (posterData && posterData.username) || authUsername;\n  return (\n    <Comment\n      {...{\n        childrenPk,\n        body,\n        upvotes,\n        created,\n        pk,\n        voteDisplayState,\n        deleted,\n        posterUsername,\n        authUsername,\n        handleDeleteComment,\n        }}\n    />\n  )\n}\n\nconst mapStateToProps = (state, ownProps) => (\n  {\n      commentData: getCommentById(state, ownProps.pk),\n      posterData: getPosterByCommentId(state, ownProps.pk),\n      authUsername: getAuthUsername(state),\n  }\n)\n\nconst mapDispatchToProps = (dispatch, ownProps) => (\n  {\n    handleDeleteComment: () => dispatch(makeDeleteCommentRequest(ownProps.pk)),\n  }\n)\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(CommentContainer);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { PanelListLoader } from \"../Loaders\";\nimport { ErrorAlert } from \"../AlertMessage\";\nimport CommentContainer from \"../../containers/CommentContainer\";\nimport CommentEditorContainer from \"../../containers/CommentEditorContainer\";\nimport { withMaybe, withEither } from \"../../utilities/HOC\";\n\nconst CommentTreeList = props => {\n  const {\n    rootCommentPks,\n    error,\n    loading,\n    postPk,\n    createCommentError,\n    createCommentLoading\n  } = props;\n\n  if (error) {\n    return <ErrorAlert>{error}</ErrorAlert>;\n  }\n\n  let commentRootList = [];\n  if (Array.isArray(rootCommentPks) && rootCommentPks.length) {\n    commentRootList = rootCommentPks.map(rootPk => (\n      <CommentContainer pk={rootPk} key={rootPk} />\n    ));\n  }\n\n  // Error with root comment creation\n  const AlertOnError = withMaybe(props => props.children)(ErrorAlert);\n\n  const CommentListWithLoading = withEither(\n    props => props.loading,\n    PanelListLoader\n  )(() => commentRootList);\n\n  return (\n    <div className=\"comment-tree-list-container\">\n      <AlertOnError children={createCommentError} />\n      <div className=\"top-comment-editor\">\n        <CommentEditorContainer\n          parentPk={postPk}\n          rootComment={true}\n          usage=\"create\"\n        />\n      </div>\n\n      <ul>\n        <CommentListWithLoading loading={loading} panelNumber={10} />\n      </ul>\n    </div>\n  );\n};\n\nCommentTreeList.propTypes = {\n  rootCommentPks: PropTypes.arrayOf(PropTypes.number),\n  error: PropTypes.string,\n  loading: PropTypes.bool,\n  createCommentError: PropTypes.string,\n  createCommentLoading: PropTypes.bool\n};\n\nexport default CommentTreeList;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router';\n\nimport {\n  makeCommentTreeRequest,\n  makeCreateCommentRequest,\n} from '../../actions/Comments';\nimport CommentTreeList from '../../components/CommentTreeList';\nimport { getRootCommentPks, getCommentsLoading, } from '../../reducers/comments';\nimport { getPostDetailPk } from '../../reducers/postDetail';\n\nclass CommentTreeListContainer extends Component {\n  componentDidMount() {\n    this.props.fetchCommentList(this.props.match.params.postId)\n  }\n  \n  \n  \n  render() {\n    return <CommentTreeList {...this.props} />\n  }\n}\n\nconst mapStateToProps = state => (\n  {\n    loading: getCommentsLoading(state),\n    rootCommentPks: getRootCommentPks(state),\n    error: state.comments.error,\n    createCommentError: state.comments.createCommentError,\n    createCommentLoading: state.comments.createCommentLoading,\n    createdComment: state.comments.createdComment,\n    postPk: getPostDetailPk(state),\n  }\n)\n\nconst mapDispatchToProps = dispatch => (\n  {\n    fetchCommentList: (postId) => dispatch(makeCommentTreeRequest(postId)),\n  }\n)\n\n\nexport default  withRouter(connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(CommentTreeListContainer));\n","import React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { Panel, Button, MenuItem, Tooltip, OverlayTrigger } from 'react-bootstrap';\nimport { FaShare } from 'react-icons/fa';\nimport { withRouter } from 'react-router';\n\n\nimport './styles.css';\nimport { PanelListLoader, BlockLoader } from '../Loaders';\nimport PostInfoLine from './PostInfoLine';\nimport PostEditorContainer from '../../containers/PostEditorContainer';\nimport CommentTreeListContainer from '../../containers/CommentTreeListContainer';\nimport EllipsisButton from '../EllipsisButton';\nimport ShareButton from '../ShareButton';\nimport { withMaybe } from '../../utilities/HOC';\n\nclass PostDetail extends Component{\n  constructor(props) {\n    super(props);\n    \n    this.commentListNode = React.createRef()\n    \n    this.handleDelete = this.handleDelete.bind(this);\n  }\n  \n  componentDidMount() {\n    if (this.props.commentScroll) {\n      this.scrollToCommentList();\n    } else {\n      window.scrollTo(0,0);\n    }\n  }\n  \n  // Only scroll to comments when first navigating to page\n  componentDidUpdate(prevProps) {\n    if (this.props.commentScroll && (prevProps.pk !== this.props.pk)) {\n      this.scrollToCommentList();\n    }\n  }\n  \n  scrollToCommentList = () => {\n    window.scrollTo({\n      top: this.commentListNode.current.offsetTop,\n      behavior: \"smooth\",\n    })\n  }\n  \n  async handleDelete() {\n    // Make sure the post is actually deleted before rerouting which\n    // causes the list to reload\n    await this.props.handleDeletePost();\n    this.props.history.replace(`/r/${this.props.subredditTitle}`);\n  }\n  \n  render () {\n    const {\n      subredditTitle,\n      posterUsername,\n      authUsername,\n      title,\n      pk,\n      body,\n      loading,\n      showPostEditor,\n      handleDeletePost,\n      togglePostEditor,\n    } = this.props;\n    \n    const AuthEllipsis = withMaybe(\n      (props) => props.showEllipsis\n    )(EllipsisButton);\n    \n    return (\n      <div className='post-detail-content'>\n        {loading\n          ? <BlockLoader/>\n          :\n            <Fragment>\n            <PostInfoLine title={subredditTitle} poster={posterUsername} />\n            <div className='post-title-container'>\n              {title}\n            </div>\n            <div className='post-body-container'>\n              {showPostEditor\n                ? (\n                  <PostEditorContainer\n                    {...{body, pk,}}\n                    onEditorSubmitSuccess={togglePostEditor}\n                  />\n                )\n                : (\n                  <div\n                    className='body-html'\n                    dangerouslySetInnerHTML={{__html: body}}\n                  />\n                )\n              }\n            </div>\n            \n            <div className='link-bar-container'>\n              <ShareButton shareUrl={`${window.location.href}`} />\n              \n              <AuthEllipsis\n                showEllipsis={authUsername===posterUsername}\n              >\n                <MenuItem\n                  eventKey={1}\n                  onSelect={this.handleDelete}\n                >\n                  delete\n                </MenuItem>\n                <MenuItem\n                  eventKey={2}\n                  onSelect={togglePostEditor}\n                >\n                  edit\n                </MenuItem>\n                \n              </AuthEllipsis>\n              \n            </div>\n            </Fragment>\n          }\n          \n          <div className=\"post-comments-container\" ref={this.commentListNode}>\n            <CommentTreeListContainer />\n          </div>\n\n      </div>\n    )\n  }\n}\n\nPostDetail.propTypes = {\n  title: PropTypes.string,\n  posterUsername: PropTypes.string,\n  authUsername: PropTypes.string,\n  postTitle: PropTypes.string,\n  postBody: PropTypes.string,\n  loading: PropTypes.bool,\n  showPostEditor: PropTypes.bool,\n  commentScroll: PropTypes.bool,\n  handleDeletePost: PropTypes.func,\n  togglePostEditor: PropTypes.func,\n}\n\nexport default withRouter(PostDetail);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport PostDetail from '../../components/PostDetail';\nimport {\n  makePostDetailRequest,\n  makeDeletePostRequest,\n  togglePostEditor,\n} from '../../actions/Posts';\nimport {\n  getPostDetailPk,\n  getPostDetailBody,\n  getPostDetailTitle,\n  getPostDetailPosterUsername,\n  getPostDetailLoading,\n} from '../../reducers/postDetail';\nimport { getAuthUsername, } from '../../reducers/userAuth';\nimport {\n  getPostEditorShowState,\n  getEditPostError,\n} from '../../reducers/editPost';\n\n\nclass PostDetailContainer extends Component {\n  componentDidMount() {\n    const postId = this.props.match.params.postId || null;\n    this.props.fetchPostDetail(postId);\n  }\n  \n  componentWillUnmount() {\n    if (this.props.showPostEditor) {\n      this.props.togglePostEditor();\n    }\n  }\n  \n  render() {\n        \n    const {\n      body,\n      title,\n      subredditTitle,\n      posterUsername,\n      authUsername,\n      pk,\n      loading,\n      showPostEditor,\n      editPostError,\n      commentScroll,\n      handleDeletePost,\n      togglePostEditor,\n    } = this.props;\n    \n    return <PostDetail {...{\n        body,\n        title,\n        subredditTitle,\n        posterUsername,\n        authUsername,\n        pk,\n        loading,\n        showPostEditor,\n        editPostError,\n        commentScroll,\n        handleDeletePost,\n        togglePostEditor,\n      }} />;\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => (\n  {\n    subredditTitle: ownProps.title,\n    body: getPostDetailBody(state),\n    title: getPostDetailTitle(state),\n    posterUsername: getPostDetailPosterUsername(state),\n    pk: getPostDetailPk(state),\n    loading: getPostDetailLoading(state),\n    showPostEditor: getPostEditorShowState(state),\n    editPostError: getEditPostError(state),\n    authUsername: getAuthUsername(state),\n  }\n)\n\nconst mapDispatchToProps = (dispatch, ownProps,) => (\n  {\n    fetchPostDetail: (postId) => dispatch(makePostDetailRequest(postId)),\n    handleDeletePost: () => dispatch(makeDeletePostRequest(\n        Number(ownProps.match.params.postId)\n      )),\n    togglePostEditor: () => dispatch(togglePostEditor()),\n  }\n)\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(PostDetailContainer);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router';\n\nimport TextEditor from '../TextEditor';\nimport FieldGroup from  '../FieldGroup';\nimport { ErrorAlertWithError } from '../AlertMessage';\nimport FormButton from '../ModalForm/FormButton';\nimport './styles.css';\n\nclass CreateSubreddit extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      description: '',\n      title: '',\n    };\n    \n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  \n  handleTitleChange = (e) => this.setState({title: e.target.value});\n  \n  handleDescriptionChange = (e) =>\n    this.setState({description: e.target.value});\n    \n  async handleSubmit() {\n    try {\n      await this.props.handleCreateSubreddit({\n        title: this.state.title,\n        description: this.state.description,\n      });\n      this.props.history.push(`/r/${this.state.title}`);\n    }\n    catch {\n      this.forceUpdate();\n    }\n  }\n    \n  render() {\n    const {\n      errorMessage,\n      loading,\n      handleCreateSubreddit,\n    } = this.props;\n    \n    return (\n      <div className=\"create-subreddit-container\">\n        <div className=\"content-container\">\n          <div className=\"form-container\">\n            \n            <h2>Create a Subreddit</h2>\n            <hr/>\n            <ErrorAlertWithError>\n              {errorMessage}\n            </ErrorAlertWithError>\n            \n            <form>\n              <div className=\"input-container\">\n                <FieldGroup\n                  id=\"title-input\"\n                  placeholder=\"title\"\n                  type='text'\n                  value={this.state.title}\n                  onChange={this.handleTitleChange}\n                  name='title'\n                />\n                <FieldGroup\n                  id=\"description-input\"\n                  placeholder=\"description\"\n                  componentClass=\"textarea\"\n                  onChange={this.handleDescriptionChange}\n                />\n              </div>\n              <div className=\"submit-button\">\n                <FormButton\n                  bsStyle=\"primary\"\n                  handleClick={this.handleSubmit}\n                  loading={loading}\n                >\n                  create\n                </FormButton>\n              </div>\n            </form>\n          </div>\n        </div>\n          \n      </div>\n    )\n  }\n}\n\nCreateSubreddit.propTypes = {\n  loading: PropTypes.bool,\n  error: PropTypes.string,\n  handleCreateSubreddit: PropTypes.func,\n}\n\nexport default withRouter(CreateSubreddit);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport CreateSubreddit from '../../components/CreateSubreddit';\nimport { makeCreateSubredditRequest } from '../../actions/Subreddit';\nimport {\n  getCreateSubredditError,\n  getCreateSubredditLoading,\n} from '../../reducers/createSubreddit';\n\n\nclass CreateSubredditContainer extends Component {\n  \n  render() {\n    const {\n      errorMessage,\n      loading,\n      handleCreateSubreddit,\n    } = this.props;\n    \n    return (\n      <CreateSubreddit {...{\n        errorMessage,\n        loading,\n        handleCreateSubreddit,\n      }}/>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  errorMessage: getCreateSubredditError(state),\n  loading: getCreateSubredditLoading(state),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  handleCreateSubreddit: (subredditData) =>\n    dispatch(makeCreateSubredditRequest(subredditData)),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(CreateSubredditContainer);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport SubscriptionButtonContainer from \"../../containers/SubscriptionButtonContainer\";\nimport \"./styles.css\";\n\nconst SubredditPanel = ({ subreddit, handleSubredditRedirect }) => (\n  <div className=\"subreddit-panel\" onClick={handleSubredditRedirect}>\n    <div className=\"title-and-subscriptions\">\n      <h1>r/{subreddit.title}</h1>\n      <p>{subreddit.members.length} Subscribers </p>\n    </div>\n\n    <div className=\"description\">\n      <p>{subreddit.description}</p>\n    </div>\n\n    <div className=\"subscription-button\">\n      <SubscriptionButtonContainer subredditTitle={subreddit.title} />\n    </div>\n  </div>\n);\n\nSubredditPanel.propTypes = {\n  subreddit: PropTypes.shape({\n    title: PropTypes.string,\n    members: PropTypes.arrayOf(PropTypes.string),\n    description: PropTypes.string\n  })\n};\n\nexport default SubredditPanel;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router\";\n\nimport SubredditPanel from \"../../components/SubredditPanel\";\nimport { getSearchSubredditById } from \"../../reducers/search\";\nimport { SUBREDDIT_URL } from \"../../urls\";\n\nclass SubredditPanelContainer extends Component {\n  handleSubredditRedirect = () =>\n    this.props.history.push(SUBREDDIT_URL(this.props.subreddit.title));\n\n  render() {\n    const { subreddit } = this.props;\n\n    return (\n      <SubredditPanel\n        subreddit={subreddit}\n        handleSubredditRedirect={this.handleSubredditRedirect}\n      />\n    );\n  }\n}\n\nconst mapStateToProps = (state, { pk }) => ({\n  subreddit: getSearchSubredditById(state, pk)\n});\n\nexport default withRouter(connect(mapStateToProps)(SubredditPanelContainer));\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport SubredditPanelContainer from \"../../containers/SubredditPanelContainer\";\nimport \"./styles.css\";\n\nconst SubredditList = props => {\n  const { loading, error, allSubreddits } = props;\n\n  const subredditList = allSubreddits.map(subredditPk => (\n    <SubredditPanelContainer key={subredditPk} pk={subredditPk} />\n  ));\n\n  return (\n    <div className=\"subreddit-search-results-container\">{subredditList}</div>\n  );\n};\n\nexport default SubredditList;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button } from \"react-bootstrap\";\n\nimport PostList from \"../PostList\";\nimport SubredditList from \"../SubredditList\";\nimport NavSelectorButton from \"../Buttons/NavSelectorButton\";\nimport { withEither } from \"../../utilities/HOC\";\nimport { compose } from \"recompose\";\nimport \"./styles.css\";\n\nconst SearchResults = props => {\n  const {\n    allPosts,\n    allSubreddits,\n    allUsers,\n    loading,\n    error,\n    query,\n    resultsView,\n    changeResultsView\n  } = props;\n\n  const ConditionalResultsList = compose(\n    withEither(props => props.view === \"users\", () => null),\n    withEither(props => props.view === \"subreddits\", SubredditList)\n  )(PostList);\n\n  return (\n    <div className=\"search-results-container\">\n      <div className=\"search-navbar\">\n        <div className=\"search-query-name\">\n          <h2>Search results for: \"{query}\"</h2>\n        </div>\n\n        <div className=\"search-view-selector\">\n          <NavSelectorButton\n            active={resultsView === \"posts\"}\n            onClick={() => changeResultsView(\"posts\")}\n          >\n            Posts\n          </NavSelectorButton>\n\n          <NavSelectorButton\n            active={resultsView === \"subreddits\"}\n            onClick={() => changeResultsView(\"subreddits\")}\n          >\n            Subreddits\n          </NavSelectorButton>\n\n          <NavSelectorButton\n            active={resultsView === \"users\"}\n            onClick={() => changeResultsView(\"users\")}\n          >\n            Users\n          </NavSelectorButton>\n        </div>\n      </div>\n\n      <div className=\"results-list-container\">\n        <ConditionalResultsList\n          {...{\n            allPosts,\n            allSubreddits,\n            allUsers,\n            error,\n            loading\n          }}\n          view={resultsView}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default SearchResults;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport SearchResults from \"../../components/SearchResults\";\nimport { makeSearchRequest } from \"../../actions/Search\";\nimport { getAllPosts } from \"../../reducers/postList\";\nimport {\n  getSearchError,\n  getSearchQuery,\n  getSearchLoading,\n  getSearchAllSubreddits,\n  getSearchAllUsers,\n  getSearchResultsView\n} from \"../../reducers/search\";\nimport { setSearchResultsView } from \"../../actions/Search\";\n\nclass SearchResultsContainer extends Component {\n  componentDidMount() {\n    this.props.searchRequest(this.props.query);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.query !== this.props.query) {\n      this.props.searchRequest(this.props.query);\n    }\n  }\n\n  render() {\n    const {\n      allPosts,\n      allSubreddits,\n      allUsers,\n      error,\n      loading,\n      query,\n      resultsView,\n      changeResultsView\n    } = this.props;\n\n    return (\n      <SearchResults\n        {...{\n          allPosts,\n          allSubreddits,\n          allUsers,\n          loading,\n          error,\n          query,\n          resultsView,\n          changeResultsView\n        }}\n      />\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  query: getSearchQuery(state),\n  allPosts: getAllPosts(state),\n  allSubreddits: getSearchAllSubreddits(state),\n  allUsers: getSearchAllUsers(state),\n  error: getSearchError(state),\n  loading: getSearchLoading(state),\n  resultsView: getSearchResultsView(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  searchRequest: q => dispatch(makeSearchRequest(q)),\n  changeResultsView: view => dispatch(setSearchResultsView(view))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SearchResultsContainer);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport { Route, BrowserRouter, Switch } from \"react-router-dom\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport WebFont from \"webfontloader\";\n\nimport \"./index.css\";\nimport * as urls from \"./urls\";\nimport { store, persistor } from \"./store\";\nimport SubredditContainer from \"./containers/SubredditContainer\";\nimport NavBarContainer from \"./containers/NavBarContainer\";\nimport UserAuthModalContainer from \"./containers/UserAuthModalContainer\";\nimport CreatePostContainer from \"./containers/CreatePostContainer\";\nimport PostListContainer from \"./containers/PostListContainer\";\nimport PostDetailContainer from \"./containers/PostDetailContainer\";\nimport CreateSubredditContainer from \"./containers/CreateSubredditContainer\";\nimport SearchResultsContainer from \"./containers/SearchResultsContainer\";\n\nWebFont.load({\n  google: {\n    families: [\"Roboto Slab:400,700\", \"Noto Sans\", \"Poppins:400,500,700\"]\n  }\n});\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <BrowserRouter>\n        <div className=\"whole-page\">\n          <NavBarContainer />\n          <UserAuthModalContainer />\n          <div className=\"main-layout\">\n            <Switch>\n              <Route\n                exact\n                path=\"/r/:subredditTitle/:createPost\"\n                render={props => (\n                  <SubredditContainer\n                    {...props}\n                    skinny\n                    primaryComponent={props => (\n                      <CreatePostContainer {...props} />\n                    )}\n                  />\n                )}\n              />\n              <Route\n                exact\n                path=\"/r/:subredditTitle/postDetail/:postId\"\n                render={props => (\n                  <SubredditContainer\n                    {...props}\n                    primaryComponent={props => (\n                      <PostDetailContainer {...props} />\n                    )}\n                  />\n                )}\n              />\n              // Go directly to comments but otherwise same as postDetail\n              <Route\n                exact\n                path=\"/r/:subredditTitle/postDetail/:postId/comments\"\n                render={props => (\n                  <SubredditContainer\n                    {...props}\n                    primaryComponent={props => (\n                      <PostDetailContainer {...props} commentScroll />\n                    )}\n                  />\n                )}\n              />\n              <Route\n                exact\n                path=\"/r/:subredditTitle\"\n                render={props => (\n                  <SubredditContainer\n                    {...props}\n                    primaryComponent={props => <PostListContainer {...props} />}\n                  />\n                )}\n              />\n              <Route\n                exact\n                path=\"/createSubreddit\"\n                render={props => (\n                  <CreateSubredditContainer\n                    match={props.match}\n                    history={props.history}\n                  />\n                )}\n              />\n              <Route\n                exact\n                path={urls.SEARCH_URL}\n                render={props => (\n                  <SearchResultsContainer\n                    match={props.match}\n                    history={props.history}\n                  />\n                )}\n              />\n              // The home psuedo-subreddit\n              <Route\n                exact\n                path=\"/\"\n                render={props => (\n                  <SubredditContainer\n                    {...props}\n                    primaryComponent={props => <PostListContainer {...props} />}\n                  />\n                )}\n              />\n            </Switch>\n          </div>\n        </div>\n      </BrowserRouter>\n    </PersistGate>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}