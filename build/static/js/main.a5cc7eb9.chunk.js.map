{"version":3,"sources":["serviceWorker.js","urls/index.js","reducers/subreddit.js","actions/actionTypes.js","reducers/userAuth.js","reducers/userAuthModal.js","reducers/postDetail.js","utilities/reducerUtils/index.js","reducers/comments.js","reducers/postList.js","reducers/createPost.js","reducers/createSubreddit.js","reducers/editPost.js","reducers/search.js","reducers/index.js","utilities/apiErrorHandler/index.js","store.js","middleware/apiMiddleware/index.js","api/constants.js","api/apiUtils.js","actions/UserAuthModal/index.js","actions/UserAuth/index.js","api/UserAuth/index.js","actions/Subreddit/index.js","api/Subreddit/index.js","components/Buttons/LoadingButton/index.js","components/Buttons/NavSelectorButton/index.js","utilities/HOC/index.js","components/Buttons/SubscriptionButton/index.js","components/SideBar/index.js","components/Loaders/PanelLoader/index.js","components/Loaders/PanelListLoader/index.js","components/Loaders/SideBarLoader/index.js","components/Loaders/BlockLoader/index.js","components/Subreddit/index.js","containers/SubredditContainer/index.js","components/NavBar/NavBarDropdown.js","components/FieldGroup/index.js","components/SearchBar/index.js","actions/Search/index.js","api/Search/index.js","containers/SearchBarContainer/index.js","components/NavBar/index.js","components/UserButton/index.js","components/UserAuthNav/UnauthenticatedUser.js","components/UserAuthNav/AuthenticatedUser.js","components/UserAuthNav/index.js","containers/NavBarContainer/index.js","components/AlertMessage/index.js","components/UserAuthModal/index.js","components/ModalForm/FormButton/index.js","components/ModalForm/ModalLoginForm/index.js","containers/UserAuthModalContainer/LoginModalContainer.js","components/ModalForm/ModalRegisterForm/index.js","containers/UserAuthModalContainer/RegisterModalContainer.js","containers/UserAuthModalContainer/index.js","components/TextEditor/index.js","components/CreatePost/index.js","api/Posts/index.js","actions/Posts/index.js","containers/CreatePostContainer/index.js","components/Voter/index.js","actions/Voter/index.js","api/Voter/index.js","containers/VoterContainer/index.js","components/EllipsisButton/index.js","components/ShareButton/index.js","components/PostPanel/index.js","containers/PostPanelContainer/index.js","components/PostList/EmptyPostList.js","components/PostList/index.js","containers/PostListContainer/index.js","components/PostDetail/PostInfoLine.js","containers/PostEditorContainer/index.js","actions/Comments/index.js","api/Comments/index.js","containers/CommentEditorContainer/index.js","components/Comment/CommentInfoLine/index.js","components/Comment/CommentBody/index.js","components/Comment/ExpandedComment/index.js","components/Comment/CollapsedComment/index.js","components/Comment/index.js","containers/CommentContainer/index.js","components/CommentTreeList/index.js","containers/CommentTreeListContainer/index.js","components/PostDetail/index.js","containers/PostDetailContainer/index.js","components/CreateSubreddit/index.js","containers/CreateSubredditContainer/index.js","containers/SubscriptionButtonContainer/index.js","components/SubredditPanel/index.js","containers/SubredditPanelContainer/index.js","components/SubredditList/index.js","components/SearchResults/index.js","containers/SearchResultsContainer/index.js","index.js"],"names":["Boolean","window","location","hostname","match","SUBREDDIT_URL","title","concat","initialState","loading","error","description","subscriptionLoading","getSubredditTitle","state","subreddit","arguments","length","undefined","action","type","Object","objectSpread","data","token","username","pk","subs","moderated_subs","getAuthUsername","userAuth","getAuthUserSubredditTitles","map","showModal","displayType","errorMessage","successMessage","userAuthModal","warningMessage","body","poster","getPostDetailTitle","postDetail","getPostDetailBody","getPostDetailPosterUsername","getPostDetailPk","getPostDetailLoading","poster_username","updateObjectOnVote","oldObj","voteType","voteState","voteDisplayState","newVoteState","newUpvotes","upvotes","allIds","objList","idLabel","forEach","obj","push","objectById","updateFcn","objById","postsById","postList","post","vote_state","subreddit_title","rest","objectWithoutProperties","posterUsername","subredditTitle","addComment","newComment","updatedComment","created","newRoots","rootCommentIds","slice","splice","addRootCommentId","commentsById","defineProperty","parent","newCommentsById","parentId","oldParent","children","newChildren","newParent","addChildCommentId","updateComment","id","newProps","oldObject","newValues","oldComment","postersById","createCommentError","createCommentLoading","getRootCommentPks","comments","getCommentById","getPosterByCommentId","posterId","getCommentsLoading","entities","posters","result","commentId","comment","vote_type","deleted","allPosts","deletionPostId","deleteError","getPostById","getAllPosts","postId","Number","_state$postsById","_toPropertyKey","newAllPosts","toConsumableArray","deletionIndex","indexOf","deletePost","posts","creating","getCreatePostLoading","createPost","getCreatePostError","newSubredditData","getCreateSubredditError","createSubreddit","getCreateSubredditLoading","showDetailPostEditor","getPostEditorShowState","editPost","getEditPostError","getEditPostLoading","query","allSubreddits","subredditsById","allUsers","usersById","searchResultsView","getSearchError","search","getSearchLoading","getSearchQuery","getSearchAllSubreddits","getSearchAllUsers","getSearchSubredditById","getSearchResultsView","users","subreddits","viewName","rootReducer","combineReducers","apiRequestErrorHandler","e","console","log","response","erd","detail","non_field_errors","key","keys","errorField","String","charAt","toUpperCase","substring","status","statusText","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","persistConfig","storage","persistedReducer","persistReducer","store","createStore","applyMiddleware","next","startsWith","callAPI","types","successActionCreator","failureActionCreator","request","dispatch","then","success","getState","catch","Promise","reject","failure","thunkMiddleware","persistor","persistStore","COMMENT_DETAIL_URL","commentPk","API_ROOT_URL","SUB_DETAIL_URL","SUB_LIST_URL","POST_DETAIL_URL","tokenContextObj","headers","Authorization","showUserAuthModal","hideUserAuthModal","updateErrorMessage","makeUserLoginRequest","password","credentials","axios","USER_LIST_URL","makeUserRegisterRequest","email","userData","registerSuccessLoginModal","userAuthLogout","makeUserUpdateRequest","get","USER_DETAIL_URL","userUpdateApi","makeSubDetailRequest","getSubDetailApi","makeCreateSubredditRequest","subredditData","createSubredditApi","makeSubSubscriptionRequest","subAction","onSuccessfulSubscription","SUB_SUBSCRIBE_URL","subredditSubscribeApi","LoadingButton","props","className","spinner","react_default","a","createElement","react_spinners","size","Button","assign","disabled","NavSelectorButton","active","onClick","activeStyle","opacity","borderBottom","style","withEither","conditionalRenderingFn","EitherComponent","Component","withMaybe","SubscriptionButton","authenticatedUsername","userSubscriptions","includes","_ref2","makeSubscriptionRequest","_ref","SideBar","userSubs","subscribed","Buttons_SubscriptionButton","history","PanelLoader","Panel","Body","color","PanelListLoader","panelNumber","panelList","Array","Loaders_PanelLoader","defaultProps","SideBarLoader","BlockLoader","Subreddit","skinny","primaryComponent","skinnyContainer","SideBarWithLoader","SubredditContainer","this","params","fetchSubDetail","prevProps","components_Subreddit","connect","sub","moderated","NavBarDropdown","subscribedSubs","lib","exact","to","MenuItem","eventKey","NavDropdown","divider","FieldGroup","label","help","FormGroup","controlId","ControlLabel","FormControl","HelpBlock","SearchBar","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","setState","target","value","handleSearchSubmit","bind","assertThisInitialized","preventDefault","handleSearchRequest","forceUpdate","_this$props","Navbar","Form","pullLeft","onSubmit","components_FieldGroup","placeholder","name","onChange","Buttons_LoadingButton","withRouter","makeSearchRequest","q","searchApi","setSearchQuery","components_SearchBar","NavBar","inverse","fixed","fluid","Header","Brand","NavLink","Nav","NavBar_NavBarDropdown","containers_SearchBarContainer","UserButton","userButtonId","inverted","UnauthenticatedUser","middleWareTest","pullRight","NavItem","components_UserButton","AuthenticatedUser","handleLogout","UserAuthNav","UserAuthNav_AuthenticatedUser","UserAuthNav_UnauthenticatedUser","NavBarContainer","render","components_NavBar","components_UserAuthNav","pure","SuccessAlert","Alert","bsStyle","fa","align","ErrorAlert","ErrorAlertWithError","UserAuthModal","eMessage","handleHide","formComponent","messageProps","sMessage","AlertMessage_SuccessAlert","AlertMessage_ErrorAlert","Modal","onHide","show","closeButton","Title","FormButton","handleClick","ModalLoginForm","handleSubmit","handleLogin","autoFocus","ModalForm_FormButton","components_UserAuthModal","ModalForm_ModalLoginForm","ModalRegisterForm","handleRegister","ModalForm_ModalRegisterForm","UserAuthModalContainer_LoginModalContainer","UserAuthModalContainer_RegisterModalContainer","TextEditor","handleSubmitClick","editorHtml","initialValue","formats","modules","toolbar","header","font","list","indent","quillNode","React","createRef","focusOnEditor","current","focus","html","_this2","usage","onBlur","submitButtonWord","react","react_quill_lib_default","ref","CreatePost","handleTitleChange","handleCreatePost","replace","CreatePostErrorAlert","components_TextEditor","handleCommentSubmit","createPostApi","CREATE_POST_URL","makeSubPostListRequest","orderBy","orderby","POST_LIST_URL","SUB_POST_LIST_URL","getSubPostListApi","makeUpdatePostRequest","patch","updatePostApi","makeDeletePostRequest","onDeletePostRequest","delete","deletePostApi","makePostDetailRequest","getPostDetailApi","CreatePostContainer","components_CreatePost","makeCreatePostRequest","Voter","upvotedStyle","downvotedStyle","displayState","handleVote","makeVoteRequest","voteData","onVoteSuccess","itemType","itemPk","itemFn","item_fn","voteApi","hasOwnProperty","ReferenceError","ownProps","components_Voter","EllipsisButton","Dropdown","Toggle","noCaret","Menu","ShareButton","toggleTooltip","showTooltip","copyToClipboard","copyNode","select","document","execCommand","setTimeout","copyTooltip","Tooltip","shareUrl","OverlayTrigger","placement","overlay","trigger","delayHide","bsSize","readOnly","aria-hidden","PostPanel","handlePanelClick","HTMLDivElement","_this$props2","authUsername","handleDeletePost","AuthEllipsis","showEllipsis","containers_VoterContainer","Link","href","components_ShareButton","onSelect","postPk","components_PostPanel","EmptyPostList","Loaders_PanelListLoader","PostList_EmptyPostList","postPanels","containers_PostPanelContainer","PostListContainer","fetchPostList","components_PostList","PostInfoLine","_handleSubmit","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","t0","onEditorSubmitSuccess","stop","_x","apply","makeCommentTreeRequest","normalizeCommentTreeOnSuccess","config","POST_COMMENT_TREES_URL","getCommentTreeApi","nestedComments","posterSchema","schema","Entity","idAttribute","commentSchema","commentListSchema","define","normalizedComments","normalize","entries","slicedToArray","makeCreateCommentRequest","commentData","parentPk","parent_fn","rootComment","createCommentApi","makeDeleteCommentRequest","deleteCommentApi","makeUpdateCommentRequest","updateCommentApi","commentBody","onEditorSubmit","CommentInfoLine","upvotesLabel","CommentBody","handleDeleteComment","handleToggleReplyEditor","handleToggleUpdateEditor","dangerouslySetInnerHTML","__html","ExpandedComment","showReplyEditor","showUpdateEditor","childrenList","handleCollapse","handleToggleCollapse","ReplyEditorWithHide","showEditor","CommentEditorContainer","CommentBodyWithDeleteAndUpdateEditor","Comment_CommentInfoLine","CollapsedComment","handleExpansion","io","Comment","collapsed","childrenPk","isArray","childPk","containers_CommentContainer","CollapsibleComment","posterData","components_Comment","CommentTreeList","rootCommentPks","commentRootList","rootPk","AlertOnError","CommentListWithLoading","containers_CommentEditorContainer","CommentTreeListContainer","fetchCommentList","components_CommentTreeList","createdComment","PostDetail","scrollToCommentList","scrollTo","top","commentListNode","offsetTop","behavior","handleDelete","commentScroll","showPostEditor","togglePostEditor","Loaders_BlockLoader","PostDetail_PostInfoLine","containers_PostEditorContainer","containers_CommentTreeListContainer","PostDetailContainer","fetchPostDetail","editPostError","components_PostDetail","CreateSubreddit","handleDescriptionChange","handleCreateSubreddit","componentClass","CreateSubredditContainer","components_CreateSubreddit","SubredditPanel","handleSubredditRedirect","members","containers_SubscriptionButtonContainer","SubredditPanelContainer","components_SubredditPanel","SubredditList","subredditList","subredditPk","containers_SubredditPanelContainer","SearchResults","resultsView","changeResultsView","ConditionalResultsList","view","PostList","Buttons_NavSelectorButton","SearchResultsContainer","searchRequest","components_SearchResults","setSearchResultsView","ReactDOM","es","integration_react","BrowserRouter","containers_NavBarContainer","containers_UserAuthModalContainer","Switch","Route","path","containers_SubredditContainer","containers_CreatePostContainer","containers_PostDetailContainer","containers_PostListContainer","containers_CreateSubredditContainer","containers_SearchResultsContainer","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a5cc7eb9.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const SEARCH_URL = \"/search\";\n\nexport const SUBREDDIT_URL = title => `/r/${title}`;\nexport const HOME_SUBREDDIT_URL = \"\";\n\n// compare urls disregarding the trailing slash\nexport const urlMatch = (first, second) => {\n  return first === second || `${first}/` === second || first === `${second}/`;\n};\n","import {\n  FETCH_SUB_DETAIL_REQUEST,\n  FETCH_SUB_DETAIL_SUCCESS,\n  FETCH_SUB_DETAIL_FAILURE,\n  SET_SUB_TO_HOME,\n  SUBREDDIT_SUBSCRIBE_REQUEST,\n  SUBREDDIT_SUBSCRIBE_FAILURE,\n  SUBREDDIT_SUBSCRIBE_SUCCESS,\n} from '../actions/actionTypes';\n\nconst initialState = {\n  loading: false,\n  error: null,\n  title: null,\n  description: null,\n  subscriptionLoading: false,\n}\n\nconst subreddit = (state=initialState, action) => {\n  switch (action.type) {\n    case FETCH_SUB_DETAIL_REQUEST:\n      return {\n        ...state,\n        loading: true,\n        error: null,\n      }\n    case FETCH_SUB_DETAIL_SUCCESS:\n     return {\n       ...state,\n       loading: false,\n       error: null,\n       title: action.data.title,\n       description: action.data.description,\n     };\n    case FETCH_SUB_DETAIL_FAILURE:\n      return {\n        ...state,\n        loading: false,\n        error: action.error,\n      }\n    case SET_SUB_TO_HOME:\n      return {\n        ...state,\n        loading: false,\n        error: null,\n        title: action.title,\n      }\n    case SUBREDDIT_SUBSCRIBE_REQUEST:\n      return {\n        ...state,\n        subscriptionLoading: true,\n      }\n    case SUBREDDIT_SUBSCRIBE_SUCCESS:\n      return {\n        ...state,\n        subscriptionLoading: false,\n      }\n    case SUBREDDIT_SUBSCRIBE_FAILURE:\n      return {\n        ...state,\n        subscriptionLoading: false,\n      }\n    default:\n      return state;\n  }\n}\n\n// selectors\n\nexport const getSubredditTitle = (state) => state.subreddit.title;\n\nexport default subreddit;\n","export const FETCH_POST_COMMENT_TREES_REQUEST =\n  \"FETCH_POST_COMMENT_TREES_REQUEST\";\nexport const FETCH_POST_COMMENT_TREES_SUCCESS =\n  \"FETCH_POST_COMMENT_TREES_SUCCESS\";\nexport const FETCH_POST_COMMENT_TREES_FAILURE =\n  \"FETCH_POST_COMMENT_TREES_FAILURE\";\nexport const CREATE_COMMENT_REQUEST = \"CREATE_COMMENT_REQUEST\";\nexport const CREATE_COMMENT_SUCCESS = \"CREATE_COMMENT_SUCCESS\";\nexport const CREATE_COMMENT_FAILURE = \"CREATE_COMMENT_FAILURE\";\nexport const DELETE_COMMENT_REQUEST = \"DELETE_COMMENT_REQUEST\";\nexport const DELETE_COMMENT_SUCCESS = \"DELETE_COMMENT_SUCCESS\";\nexport const DELETE_COMMENT_FAILURE = \"DELETE_COMMENT_FAILURE\";\nexport const UPDATE_COMMENT_REQUEST = \"UPDATE_COMMENT_REQUEST\";\nexport const UPDATE_COMMENT_SUCCESS = \"UPDATE_COMMENT_SUCCESS\";\nexport const UPDATE_COMMENT_FAILURE = \"UPDATE_COMMENT_FAILURE\";\nexport const COMMENT_VOTE_SUCCESS = \"COMMENT_VOTE_SUCCESS\";\n\nexport const VOTE_REQUEST = \"VOTE_REQUEST\";\nexport const VOTE_SUCCESS = \"VOTE_SUCCESS\";\nexport const VOTE_FAILURE = \"VOTE_FAILURE\";\n\nexport const SEARCH_REQUEST = \"SEARCH_REQUEST\";\nexport const SEARCH_SUCCESS = \"SEARCH_SUCCESS\";\nexport const SEARCH_FAILURE = \"SEARCH_FAILURE\";\nexport const SET_SEARCH_QUERY = \"SET_SEARCH_QUERY\";\nexport const SET_SEARCH_RESULTS_VIEW = \"SET_SEARCH_RESULTS_VIEW\";\n\nexport const FETCH_SUB_DETAIL_REQUEST = \"FETCH_SUB_DETAIL_REQUEST\";\nexport const FETCH_SUB_DETAIL_SUCCESS = \"FETCH_SUB_DETAIL_SUCCESS\";\nexport const FETCH_SUB_DETAIL_FAILURE = \"FETCH_SUB_DETAIL_FAILURE\";\nexport const SET_SUB_TO_HOME = \"SET_SUB_TO_HOME\";\nexport const SUBREDDIT_SUBSCRIBE_REQUEST = \"SUBREDDIT_SUBSCRIBE_REQUEST\";\nexport const SUBREDDIT_SUBSCRIBE_SUCCESS = \"SUBREDDIT_SUBSCRIBE_SUCCESS\";\nexport const SUBREDDIT_SUBSCRIBE_FAILURE = \"SUBREDDIT_SUBSCRIBE_FAILURE\";\nexport const CREATE_SUBREDDIT_REQUEST = \"CREATE_SUBREDDIT_REQUEST\";\nexport const CREATE_SUBREDDIT_SUCCESS = \"CREATE_SUBREDDIT_SUCCESS\";\nexport const CREATE_SUBREDDIT_FAILURE = \"CREATE_SUBREDDIT_FAILURE\";\nexport const DELETE_SUBREDDIT_REQUEST = \"DELETE_SUBREDDIT_REQUEST\";\nexport const DELETE_SUBREDDIT_SUCCESS = \"DELETE_SUBREDDIT_SUCCESS\";\nexport const DELETE_SUBREDDIT_FAILURE = \"DELETE_SUBREDDIT_FAILURE\";\n\nexport const FETCH_POST_LIST_REQUEST = \"FETCH_POST_LIST_REQUEST\";\nexport const FETCH_POST_LIST_SUCCESS = \"FETCH_POST_LIST_SUCCESS\";\nexport const FETCH_POST_LIST_FAILURE = \"FETCH_POST_LIST_FAILURE\";\nexport const FETCH_POST_DETAIL_REQUEST = \"FETCH_POST_DETAIL_REQUEST\";\nexport const FETCH_POST_DETAIL_SUCCESS = \"FETCH_POST_DETAIL_SUCCESS\";\nexport const FETCH_POST_DETAIL_FAILURE = \"FETCH_POST_DETAIL_FAILURE\";\nexport const CREATE_POST_REQUEST = \"CREATE_POST_REQUEST\";\nexport const CREATE_POST_SUCCESS = \"CREATE_POST_SUCCESS\";\nexport const CREATE_POST_FAILURE = \"CREATE_POST_FAILURE\";\nexport const DELETE_POST_REQUEST = \"DELETE_POST_REQUEST\";\nexport const DELETE_POST_SUCCESS = \"DELETE_POST_SUCCESS\";\nexport const DELETE_POST_FAILURE = \"DELETE_POST_FAILURE\";\nexport const UPDATE_POST_REQUEST = \"UPDATE_POST_REQUEST\";\nexport const UPDATE_POST_SUCCESS = \"UPDATE_POST_SUCCESS\";\nexport const UPDATE_POST_FAILURE = \"UPDATE_POST_FAILURE\";\nexport const POST_VOTE_SUCCESS = \"POST_VOTE_SUCCESS\";\nexport const TOGGLE_POST_EDITOR = \"TOGGLE_POST_EDITOR\";\n\nexport const USER_AUTH_LOGIN_REQUEST = \"USER_AUTH_LOGIN_REQUEST\";\nexport const USER_AUTH_LOGIN_SUCCESS = \"USER_AUTH_LOGIN_SUCCESS\";\nexport const USER_AUTH_LOGIN_FAILURE = \"USER_AUTH_LOGIN_FAILURE\";\nexport const USER_AUTH_REGISTER_REQUEST = \"USER_AUTH_REGISTER_REQUEST\";\nexport const USER_AUTH_REGISTER_SUCCESS = \"USER_AUTH_REGISTER_SUCCESS\";\nexport const USER_AUTH_REGISTER_FAILURE = \"USER_AUTH_REGISTER_FAILURE\";\nexport const USER_AUTH_UPDATE_REQUEST = \"USER_AUTH_UPDATE_REQUEST\";\nexport const USER_AUTH_UPDATE_SUCCESS = \"USER_AUTH_UPDATE_SUCCESS\";\nexport const USER_AUTH_UPDATE_FAILURE = \"USER_AUTH_UPDATE_FAILURE\";\nexport const USER_AUTH_LOGOUT_REQUEST = \"USER_AUTH_LOGOUT_REQUEST\";\nexport const USER_AUTH_LOGOUT_SUCCESS = \"USER_AUTH_LOGOUT_SUCCESS\";\nexport const USER_AUTH_LOGOUT_FAILURE = \"USER_AUTH_LOGOUT_FAILURE\";\n\nexport const SHOW_USER_AUTH_MODAL = \"SHOW_USER_AUTH_MODAL\";\nexport const HIDE_USER_AUTH_MODAL = \"HIDE_USER_AUTH_MODAL\";\nexport const UPDATE_USER_AUTH_MODAL_ERROR = \"UPDATE_USER_AUTH_MODAL_ERROR\";\n\nexport const API_SUB_DETAIL = \"API_SUB_DETAIL\";\nexport const API_SUB_POST_LIST = \"API_SUB_POST_LIST\";\nexport const API_SUBREDDIT_SUBSCRIBE = \"API_SUBREDDIT_SUBSCRIBE\";\nexport const API_CREATE_SUBREDDIT = \"API_CREATE_SUBREDDIT\";\nexport const API_USER_AUTH_UPDATE = \"API_USER_AUTH_UPDATE\";\nexport const API_USER_AUTH_LOGOUT = \"API_USER_AUTH_LOGOUT\";\nexport const API_USER_AUTH_LOGIN = \"API_USER_AUTH_LOGIN\";\nexport const API_USER_AUTH_REGISTER = \"API_USER_AUTH_REGISTER\";\nexport const API_CREATE_POST = \"API_CREATE_POST\";\nexport const API_DELETE_POST = \"API_DELETE_POST\";\nexport const API_UPDATE_POST = \"API_UPDATE_POST\";\nexport const API_POST_DETAIL = \"API_POST_DETAIL\";\nexport const API_POST_COMMENT_TREES = \"API_POST_COMMENT_TREES\";\nexport const API_CREATE_COMMENT = \"API_CREATE_COMMENT\";\nexport const API_DELETE_COMMENT = \"API_DELETE_COMMENT\";\nexport const API_UPDATE_COMMENT = \"API_UPDATE_COMMENT\";\nexport const API_VOTE = \"API_VOTE\";\nexport const API_SEARCH = \"API_SEARCH\";\n","import {\n  USER_AUTH_LOGIN_REQUEST,\n  USER_AUTH_LOGIN_SUCCESS,\n  USER_AUTH_LOGIN_FAILURE,\n  USER_AUTH_LOGOUT_REQUEST,\n  USER_AUTH_LOGOUT_SUCCESS,\n  USER_AUTH_LOGOUT_FAILURE,\n  USER_AUTH_UPDATE_SUCCESS\n} from \"../actions/actionTypes\";\n\nconst initialState = {\n  token: null,\n  username: null,\n  pk: null,\n  subs: [],\n  moderated_subs: [],\n  error: null,\n  loading: false\n};\n\nconst userAuth = (state = initialState, action) => {\n  switch (action.type) {\n    case USER_AUTH_LOGIN_REQUEST:\n      return {\n        ...state,\n        loading: true\n      };\n    case USER_AUTH_LOGIN_SUCCESS:\n      return {\n        ...state,\n        token: action.data.token,\n        username: action.data.username,\n        pk: action.data.pk,\n        subs: action.data.subs,\n        moderated_subs: action.data.moderated_subs,\n        loading: false,\n        error: null\n      };\n    case USER_AUTH_LOGIN_FAILURE:\n      return {\n        ...state,\n        token: null,\n        loading: false,\n        error: action.error\n      };\n    case USER_AUTH_LOGOUT_SUCCESS:\n      return initialState;\n    case USER_AUTH_UPDATE_SUCCESS:\n      return {\n        ...state,\n        username: action.data.username,\n        subs: action.data.subs,\n        moderated_subs: action.data.moderated_subs,\n        loading: false,\n        error: null\n      };\n    default:\n      return state;\n  }\n};\n\n// Selectors\n\nexport const getAuthUsername = state => state.userAuth.username;\nexport const getAuthUserToken = state => state.userAuth.token;\nexport const getAuthUserSubredditTitles = state =>\n  state.userAuth.subs.map(subreddit => subreddit.title);\n\nexport default userAuth;\n","import {\n  SHOW_USER_AUTH_MODAL,\n  HIDE_USER_AUTH_MODAL,\n  UPDATE_USER_AUTH_MODAL_ERROR,\n} from '../actions/actionTypes';\n\nconst initialState = {\n  showModal: false,\n  displayType: null,\n  errorMessage: null,\n  successMessage: null,\n}\n\nconst userAuthModal = (state=initialState, action) => {\n  switch (action.type) {\n    case SHOW_USER_AUTH_MODAL:\n      return {\n          ...state,\n          showModal: true,\n          displayType: action.displayType,\n          errorMessage: action.warningMessage,\n          successMessage: action.successMessage,\n      };\n    case HIDE_USER_AUTH_MODAL:\n      return {\n        ...state,\n        showModal: false,\n        displayType: null,\n        errorMessage: null,\n        successMessage: null,\n      };\n    case UPDATE_USER_AUTH_MODAL_ERROR:\n      return {\n        ...state,\n        errorMessage: action.errorMessage,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default userAuthModal;\n","import {\n  FETCH_POST_DETAIL_REQUEST,\n  FETCH_POST_DETAIL_SUCCESS,\n  FETCH_POST_DETAIL_FAILURE,\n  FETCH_POST_LIST_SUCCESS,\n  UPDATE_POST_SUCCESS,\n} from '../actions/actionTypes';\n\nconst initialState = {\n  title: null,\n  body: null,\n  poster: null,\n  pk: null,\n  error: null,\n  loading: false,\n}\n\nconst postDetail = (state=initialState, action) => {\n  switch (action.type) {\n    case FETCH_POST_DETAIL_REQUEST:\n      return {\n        ...state,\n        error: null,\n        loading: true,\n      }\n    case FETCH_POST_DETAIL_SUCCESS:\n      return {\n        ...state,\n        title: action.data.title,\n        body: action.data.body,\n        poster: action.data.poster_username,\n        pk: action.data.pk,\n        loading: false,\n        error: null,\n      }\n    case FETCH_POST_DETAIL_FAILURE:\n      return {\n        ...state,\n        loading: false,\n        error: action.error,\n      }\n    case UPDATE_POST_SUCCESS:\n      return {\n        ...state,\n        body: action.data.body,\n      }\n    case FETCH_POST_LIST_SUCCESS:\n      // This makes the scroll to comments in PostDetail work\n      return {\n        ...state,\n        pk: null,\n      };\n    default:\n     return state;\n  }\n}\n\n// Selectors\n\nexport const getPostDetailTitle = (state) => state.postDetail.title;\nexport const getPostDetailBody = (state) => state.postDetail.body;\nexport const getPostDetailPosterUsername = (state) => state.postDetail.poster;\nexport const getPostDetailPk = (state) => state.postDetail.pk;\nexport const getPostDetailLoading = (state) => state.postDetail.loading;\n\n\n\nexport default postDetail;\n","// Help organize reducers\nexport function combineReducersWithRoot(rootReducer, reducers) {\n  return (state, action) => {\n    let newState = {...rootReducer(state, action)};\n    Object.keys(reducers).forEach((prop) => {\n      let propObj = state ? state[prop] : undefined;\n      newState[prop] = reducers[prop](propObj, action);\n    });\n    return newState;\n  }\n}\n\n// Update, avoid mutation\nexport function updateObject(oldObject, newValues) {\n  return { ...oldObject, ...newValues}\n}\n\n// Pretty much just for comments and posts\nexport function updateObjectOnVote(oldObj, voteType) {\n  const voteState = oldObj.voteDisplayState || 0;\n  const newVoteState = voteType\n  \n  const upvotes = oldObj.upvotes;\n  const newUpvotes = upvotes + (newVoteState - voteState)\n    \n  return ({\n    ...oldObj,\n    voteDisplayState: newVoteState,\n    upvotes: newUpvotes,\n  });\n}\n\n\n// Take an array of serialized objects and return array of ids only\nexport const allIds = (objList, idLabel='pk') => {\n  let allIds = [];\n  objList.forEach((obj) => {\n    allIds.push(obj[idLabel])\n  });\n  return allIds;\n}\n\n// Take an array of serialized objects and make a objectById object\nexport const objectById = (objList, updateFcn, idLabel='pk') => {\n  let objById = {};\n  objList.forEach((obj) => {\n    obj = updateFcn ? updateFcn(obj): obj;\n    objById[obj[idLabel]] = {...obj};\n  })\n  return objById\n}\n\n// post specific wrapper for objectById, need to rename some properties\nexport const postsById = (postList) => objectById(\n  postList,\n  (post) => {\n    const {\n      vote_state,\n      poster_username,\n      subreddit_title,\n      ...rest\n    } = post;\n    return {\n      voteDisplayState: vote_state,\n      posterUsername: poster_username,\n      subredditTitle: subreddit_title,\n      ...rest\n    };\n  }\n);\n","import {\n  FETCH_POST_COMMENT_TREES_REQUEST,\n  FETCH_POST_COMMENT_TREES_SUCCESS,\n  FETCH_POST_COMMENT_TREES_FAILURE,\n  CREATE_COMMENT_REQUEST,\n  CREATE_COMMENT_SUCCESS,\n  CREATE_COMMENT_FAILURE,\n  DELETE_COMMENT_REQUEST,\n  DELETE_COMMENT_SUCCESS,\n  DELETE_COMMENT_FAILURE,\n  UPDATE_COMMENT_REQUEST,\n  UPDATE_COMMENT_SUCCESS,\n  UPDATE_COMMENT_FAILURE,\n  COMMENT_VOTE_SUCCESS\n} from \"../actions/actionTypes\";\nimport { updateObjectOnVote, updateObject } from \"../utilities/reducerUtils\";\n\n// Returns an object with rootCommentIds property to\n// That includes the newcomment id at the top\nconst addRootCommentId = (state, newComment) => {\n  let newRoots = state.rootCommentIds.slice();\n  newRoots.splice(0, 0, newComment.pk);\n  return { rootCommentIds: newRoots };\n};\n\n// Returns a new commentsById object with the parent object\n// updated to include the new child\nconst addChildCommentId = (state, newComment) => {\n  const parentId = newComment.parent;\n  const oldParent = state.commentsById[parentId];\n  // This is a hack fix because the comment creation backend doesn't\n  // add a children array like it should. So if you comment on a nascent\n  // comment you will get an error because there is no children array\n  oldParent.children = oldParent.children || [];\n  const newChildren = oldParent.children.slice();\n  newChildren.splice(0, 0, newComment.pk);\n  const newParent = {\n    ...oldParent,\n    children: newChildren\n  };\n  return { ...state.commentsById, [parentId]: newParent };\n};\n\n// Handles adding the newComment id to either the rootCommentIds or\n// the children array of the parent (depending on which is appropriate)\n// Also adds the new comment to the commentsById object.\nconst addComment = (state, newComment) => {\n  // First to some fixes particular to a nacsent comment\n  const { vote_state, ...rest } = newComment;\n  const updatedComment = {\n    ...rest,\n    voteDisplayState: vote_state,\n    created: \"just now\"\n  };\n\n  // if it's a root comment\n  if (newComment.post) {\n    return {\n      ...addRootCommentId(state, updatedComment),\n      commentsById: { ...state.commentsById, [newComment.pk]: updatedComment }\n    };\n  } else if (newComment.parent) {\n    // or it it is a child comment\n    const newCommentsById = addChildCommentId(state, updatedComment);\n    return {\n      commentsById: {\n        ...newCommentsById,\n        [newComment.pk]: updatedComment\n      }\n    };\n  }\n};\n\n// Update a particular comment with id and new object properties newProps\nconst updateComment = (state, id, newProps) => {\n  const oldComment = state.commentsById[id];\n  return {\n    ...state,\n    commentsById: {\n      ...state.commentsById,\n      [id]: updateObject(oldComment, newProps)\n    }\n  };\n};\n\nconst initialState = {\n  commentsById: {},\n  postersById: {},\n  rootCommentIds: [],\n  error: null,\n  loading: false,\n  createCommentError: null,\n  createCommentLoading: false\n};\n\nconst comments = (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_POST_COMMENT_TREES_REQUEST:\n      return {\n        ...state,\n        loading: true\n      };\n    case FETCH_POST_COMMENT_TREES_SUCCESS:\n      return {\n        ...state,\n        commentsById: action.data.entities.comments,\n        postersById: action.data.entities.posters,\n        rootCommentIds: action.data.result,\n        error: null,\n        loading: false,\n        createCommentError: null\n      };\n    case FETCH_POST_COMMENT_TREES_FAILURE:\n      return {\n        ...state,\n        error: action.error\n      };\n    case CREATE_COMMENT_SUCCESS:\n      return {\n        ...state,\n        ...addComment(state, action.data),\n        createCommentLoading: false,\n        createCommentError: null\n      };\n    case CREATE_COMMENT_REQUEST:\n      return {\n        ...state,\n        createCommentLoading: true,\n        createCommentError: null\n      };\n    case CREATE_COMMENT_FAILURE:\n      return {\n        ...state,\n        createCommentLoading: false,\n        createCommentError: action.error\n      };\n    case COMMENT_VOTE_SUCCESS:\n      const commentId = action.data.comment;\n      return {\n        ...state,\n        commentsById: {\n          ...state.commentsById,\n          [commentId]: updateObjectOnVote(\n            state.commentsById[commentId],\n            action.data.vote_type\n          )\n        }\n      };\n    case DELETE_COMMENT_SUCCESS:\n      return updateComment(state, action.data.pk, {\n        deleted: true\n      });\n    case UPDATE_COMMENT_SUCCESS:\n      return updateComment(state, action.data.pk, {\n        ...action.data\n      });\n    default:\n      return state;\n  }\n};\n\n// // Selectors\n// Ordered array of root comments, based on api ordering\nexport const getRootCommentPks = state => state.comments.rootCommentIds;\n\nexport const getCommentById = (state, pk) => state.comments.commentsById[pk];\n\nexport const getPosterByCommentId = (state, pk) => {\n  const posterId = state.comments.commentsById[pk].poster;\n  return state.comments.postersById[posterId];\n};\n\nexport const getVoteDisplayStateById = (state, pk) =>\n  state.comments.commentsById[pk].voteDisplayState;\n\nexport const getCommentsLoading = state => state.comments.loading;\n\nexport default comments;\n","import {\n  FETCH_POST_LIST_REQUEST,\n  FETCH_POST_LIST_SUCCESS,\n  FETCH_POST_LIST_FAILURE,\n  POST_VOTE_SUCCESS,\n  DELETE_POST_REQUEST,\n  DELETE_POST_SUCCESS,\n  DELETE_POST_FAILURE,\n  SEARCH_SUCCESS,\n} from '../actions/actionTypes';\nimport {\n  updateObjectOnVote,\n  postsById,\n  allIds\n} from '../utilities/reducerUtils';\n\n// TODO: figure out why this descruture isnt working right on postsById.\n// For some reason rest still contains the postId element\nconst deletePost = (state, postId) => {\n  const {\n    [postId]: deletedOne ,\n    ...rest\n  } = state.postsById;\n  delete rest[postId];\n\n  const newAllPosts = [...state.allPosts];\n  const deletionIndex = newAllPosts.indexOf(postId);\n  newAllPosts.splice(deletionIndex,1);\n\n  return {\n    ...state,\n    postsById: {...rest},\n    allPosts: [...newAllPosts],\n    deletionPostId: null,\n  }\n}\n\nconst initialState = {\n  postsById: {},\n  allPosts: [],\n  loading: true,\n  error: null,\n  deletionPostId: null,\n  deleteError: null,\n}\n\nconst postList = (state=initialState, action) => {\n  switch (action.type) {\n    case FETCH_POST_LIST_REQUEST:\n      return {\n        ...state,\n        loading: true,\n        error: null,\n      };\n    case FETCH_POST_LIST_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        error: null,\n        postsById: postsById(action.data),\n        allPosts: allIds(action.data),\n      };\n    case FETCH_POST_LIST_FAILURE:\n      return {\n        ...state,\n        loading: false,\n        error: action.error,\n      };\n    case POST_VOTE_SUCCESS:\n      const postId = action.data.post;\n      return {\n        ...state,\n        postsById: {\n          ...state.postsById,\n          [postId]: updateObjectOnVote(\n            state.postsById[postId],\n            action.data.vote_type,\n          ),\n        },\n      }\n    case DELETE_POST_REQUEST:\n      return {\n        ...state,\n        deleteError: null,\n        deletionPostId: Number(action.pk),\n      };\n    case DELETE_POST_SUCCESS:\n      return deletePost(state, state.deletionPostId)\n    case DELETE_POST_FAILURE:\n      return {\n        ...state,\n        deleteError: action.error,\n      }\n    case SEARCH_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        error: null,\n        postsById: postsById(action.data.posts),\n        allPosts: allIds(action.data.posts),\n      }\n    default:\n      return state;\n  }\n};\n\n// selectors\nexport const getPostById = (state, pk) => state.postList.postsById[pk];\nexport const getPostBodyById = (state, pk) => (\n  getPostById(state, pk)\n    ? getPostById(state, pk).body\n    : null\n  );\nexport const getAllPosts = (state) => state.postList.allPosts;\n\nexport default postList;\n","import {\n  CREATE_POST_REQUEST,\n  CREATE_POST_SUCCESS,\n  CREATE_POST_FAILURE,\n} from '../actions/actionTypes';\n\n\nconst initialState = {\n  creating: false,\n  error: null,\n  loading: false,\n}\n\nconst createPost = (state=initialState, action) => {\n  switch (action.type) {\n    case CREATE_POST_FAILURE:\n      return {\n        ...state,\n        loading: false,\n        error: action.error,\n      };\n    case CREATE_POST_REQUEST:\n      return {\n        ...state,\n        loading: true,\n        error: null,\n      };\n    case CREATE_POST_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        error: null,\n      }\n    default:\n      return state;\n  }\n}\n\n// selectors\n\nexport const getCreatePostLoading = (state) => state.createPost.loading;\nexport const getCreatePostError = (state) => state.createPost.error;\n\nexport default createPost;\n","import {\n  CREATE_SUBREDDIT_REQUEST,\n  CREATE_SUBREDDIT_SUCCESS,\n  CREATE_SUBREDDIT_FAILURE,\n} from '../actions/actionTypes';\n\nconst initialState = {\n  error: null,\n  loading: false,\n  newSubredditData: null,\n};\n\nconst createSubreddit = (state=initialState, action) => {\n  switch(action.type) {\n    case CREATE_SUBREDDIT_REQUEST:\n      return {\n        ...state,\n        loading: true,\n        error: false,\n        newSubredditData: null,\n      };\n    case CREATE_SUBREDDIT_SUCCESS:\n      return {\n        ...state,\n        newSubredditData: action.data,\n        loading: false,\n        error: null,\n      };\n    case CREATE_SUBREDDIT_FAILURE:\n      return {\n        ...state,\n        newSubredditData: null,\n        loading: false,\n        error: action.error,\n      };\n    default:\n      return state;\n  }\n}\n\n// selectors\nexport const getCreateSubredditError = (state) => state.createSubreddit.error;\nexport const getCreateSubredditLoading = (state) => state.createSubreddit.loading;\n\nexport default createSubreddit;\n","\nimport {\n  TOGGLE_POST_EDITOR,\n  UPDATE_POST_REQUEST,\n  UPDATE_POST_SUCCESS,\n  UPDATE_POST_FAILURE,\n} from '../actions/actionTypes';\n\n\nconst initialState = {\n  showDetailPostEditor: false,\n  loading: false,\n  error: false,\n}\n\nconst editPost = (state=initialState, action) => {\n  switch(action.type) {\n    case TOGGLE_POST_EDITOR:\n      return {\n        ...state,\n        showDetailPostEditor: !state.showDetailPostEditor,\n      };\n    case UPDATE_POST_REQUEST:\n      return {\n        ...state,\n        loading: true,\n        error: null,\n      }\n    case UPDATE_POST_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        error: null,\n      }\n    case UPDATE_POST_FAILURE:\n      return {\n        ...state,\n        loading: false,\n        error: action.error,\n      }\n    default:\n      return state;\n  }\n};\n\n//\nexport const getPostEditorShowState = (state) => state.editPost.showDetailPostEditor;\nexport const getEditPostError = (state) => state.editPost.error;\nexport const getEditPostLoading = (state) => state.editPost.loading;\n\nexport default editPost;\n","import {\n  SEARCH_REQUEST,\n  SEARCH_SUCCESS,\n  SEARCH_FAILURE,\n  SET_SEARCH_QUERY,\n  SET_SEARCH_RESULTS_VIEW\n} from \"../actions/actionTypes\";\nimport { allIds, objectById } from \"../utilities/reducerUtils\";\n\nconst initialState = {\n  query: \"\",\n  allSubreddits: [],\n  subredditsById: {},\n  allUsers: [],\n  usersById: {},\n  searchResultsView: \"posts\",\n  error: null,\n  loading: false\n};\n\nconst search = (state = initialState, action) => {\n  switch (action.type) {\n    case SEARCH_REQUEST:\n      return {\n        ...state,\n        loading: true,\n        error: null\n      };\n    case SEARCH_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        error: null,\n        allUsers: allIds(action.data.users),\n        usersById: objectById(action.data.users),\n        allSubreddits: allIds(action.data.subreddits),\n        subredditsById: objectById(action.data.subreddits)\n      };\n    case SEARCH_FAILURE:\n      return {\n        ...state,\n        loading: false,\n        error: action.error\n      };\n    case SET_SEARCH_QUERY:\n      return {\n        ...state,\n        query: action.query,\n        searchResultsView: \"posts\"\n      };\n    case SET_SEARCH_RESULTS_VIEW:\n      return {\n        ...state,\n        searchResultsView: action.viewName\n      };\n    default:\n      return state;\n  }\n};\n\nexport const getSearchUserResults = state => state.search.userResults;\nexport const getSearchSubredditResults = state => state.search.subredditResults;\nexport const getSearchError = state => state.search.error;\nexport const getSearchLoading = state => state.search.loading;\nexport const getSearchQuery = state => state.search.query;\nexport const getSearchAllSubreddits = state => state.search.allSubreddits;\nexport const getSearchAllUsers = state => state.search.allUsers;\nexport const getSearchSubredditById = (state, id) =>\n  state.search.subredditsById[id];\nexport const getSearchUserById = (state, id) => state.search.UsersById[id];\nexport const getSearchResultsView = state => state.search.searchResultsView;\n\nexport default search;\n","import { combineReducers } from 'redux';\n\nimport subreddit from './subreddit';\nimport userAuth from './userAuth';\nimport userAuthModal from './userAuthModal';\nimport postDetail from './postDetail';\nimport comments from './comments';\nimport postList from './postList';\nimport createPost from './createPost';\nimport createSubreddit from './createSubreddit';\nimport editPost from './editPost';\nimport search from './search';\n\nconst rootReducer = combineReducers({\n  subreddit,\n  userAuth,\n  userAuthModal,\n  postDetail,\n  comments,\n  postList,\n  createPost,\n  createSubreddit,\n  editPost,\n  search,\n});\n\nexport default rootReducer;\n","const apiRequestErrorHandler = (e) => {\n  console.log(e)\n  try {\n    console.log(\"Response: \" , e.response)\n    if (!e.response) {\n      return \"Network Error\";\n    } else if (e.response.data && typeof e.response.data != 'string') {\n      const erd = e.response.data;\n  \n      if (erd.detail){\n        return erd.detail;\n      }\n      if (erd.non_field_errors){\n        return erd.non_field_errors[0];\n      }\n      \n      // Handle field errors\n      const key = Object.keys(erd)[0];\n      const errorMessage = erd[key][0];\n      const errorField = String(key);\n      return (\n        errorField.charAt(0).toUpperCase() +\n        errorField.substring(1) + \":  \" +\n        errorMessage\n      );\n    } else { // There is no response data\n      return `${e.response.status}: ${e.response.statusText}`;\n    }\n  }\n  catch (error) {\n    console.log(error)\n    return \"Something went wrong, please contact the site administration.\"\n  }\n}\n\nexport default apiRequestErrorHandler;\n","import {createStore, applyMiddleware, compose} from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport {persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\nimport rootReducer from './reducers';\nimport { apiMiddleware } from './middleware/apiMiddleware';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n}\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\n\nexport const store = createStore(\n  persistedReducer,\n  composeEnhancers(applyMiddleware(apiMiddleware, thunkMiddleware))\n);\nexport const persistor = persistStore(store);\n","import apiRequestErrorHandler from '../../utilities/apiErrorHandler';\n\nexport const apiMiddleware = store => next => action => {\n  \n  if (action.type && action.type.startsWith(\"API_\")) {\n    const {\n      callAPI,\n      types,\n      successActionCreator,\n      failureActionCreator,\n    } = action;\n\n    typeof types.request === 'function'\n      ? store.dispatch(types.request) // let thunk handle it\n      : store.dispatch({type: types.request})\n    \n    \n    return callAPI()\n      .then(data => typeof types.success === 'function'\n        ? types.success(data, store.getState, store.dispatch)\n        : store.dispatch({\n            type: types.success,\n            data\n          })\n      )\n      .then(action => {\n        if (successActionCreator){\n          return store.dispatch(successActionCreator(action.data))\n        }\n      })\n      .catch(error => {\n        const errorMessage = apiRequestErrorHandler(error)\n        if (failureActionCreator) {\n          store.dispatch(failureActionCreator(errorMessage))\n        }\n        // In case the original callers are waiting on news of how this went\n        // see CreatePost for example\n        return Promise.reject(\n          store.dispatch({\n            type: types.failure,\n            error: errorMessage,\n          })\n        )\n      })\n  }\n  else {\n    return next(action)\n  }\n};\n","export const API_ROOT_URL = process.env.NODE_ENV === 'development'\n    ? process.env.REACT_APP_DEV_API_ROOT\n    : process.env.REACT_APP_PROD_API_ROOT;\n\nexport const SEARCH_URL = API_ROOT_URL + 'search/';\n  \nexport const VOTE_URL = API_ROOT_URL + 'vote/';\n\nexport const COMMENT_LIST_URL = API_ROOT_URL + 'comments/';\nexport const POST_COMMENT_TREES_URL = (postPk) => (\n  `${COMMENT_LIST_URL}post/${postPk}/`\n);\nexport const COMMENT_DETAIL_URL = (commentPk) => (\n  `${COMMENT_LIST_URL}${commentPk}/`\n);\n  \nexport const SUB_LIST_URL = API_ROOT_URL + 'subreddits/';\nexport const SUB_DETAIL_URL = (subredditTitle) => (\n  SUB_LIST_URL + 'sub/' + subredditTitle + '/'\n);\nexport const SUB_SUBSCRIBE_URL = (subredditTitle) => (\n  SUB_LIST_URL + 'sub/' + subredditTitle + '/subscribe/'\n);\nexport const CREATE_SUBREDDIT_URL = SUB_LIST_URL;\nexport const DELETE_SUBREDDIT_URL = SUB_DETAIL_URL;\n\nexport const USER_LIST_URL = API_ROOT_URL + 'users/';\nexport const USER_LOGIN_URL = USER_LIST_URL + 'login/';\nexport const USER_LOGOUT_URL = USER_LIST_URL + 'logout/';\nexport const USER_REGISTER_URL = USER_LIST_URL + 'create/';\nexport const USER_DETAIL_URL = (username) =>\n  USER_LIST_URL + `user/${username}/`;\n  \n\nexport const POST_LIST_URL = API_ROOT_URL + 'posts/';\nexport const SUB_POST_LIST_URL = (subredditTitle) => (\n  POST_LIST_URL + \"subreddit-list/\" + subredditTitle + '/'\n);\nexport const CREATE_POST_URL = (subredditTitle) => (\n  SUB_DETAIL_URL(subredditTitle) + 'post/'\n)\nexport const POST_DETAIL_URL = (postId) => POST_LIST_URL + postId + '/';\n","// If there is a token then grab set it, if not then return nothing\nexport const tokenContextObj = token =>\n  token\n    ? {\n        headers: {\n          Authorization: `Token ${token}`\n        }\n      }\n    : {};\n","import {\n  SHOW_USER_AUTH_MODAL,\n  HIDE_USER_AUTH_MODAL,\n  UPDATE_USER_AUTH_MODAL_ERROR,\n} from '../actionTypes';\n\nexport const showUserAuthModal = (\n  displayType,\n  successMessage = null,\n  errorMessage = null\n  ) => (\n  {\n    type: SHOW_USER_AUTH_MODAL,\n    displayType,\n    successMessage,\n    errorMessage,\n  }\n);\n\nexport const hideUserAuthModal = () => (\n  {\n    type: HIDE_USER_AUTH_MODAL,\n  }\n);\n\nexport const updateErrorMessage = (errorMessage) => (\n  {\n    type: UPDATE_USER_AUTH_MODAL_ERROR,\n    errorMessage,\n  }\n)\n","import {\n  USER_AUTH_LOGIN_REQUEST,\n  USER_AUTH_LOGIN_SUCCESS,\n  USER_AUTH_LOGIN_FAILURE,\n  USER_AUTH_REGISTER_REQUEST,\n  USER_AUTH_REGISTER_SUCCESS,\n  USER_AUTH_REGISTER_FAILURE,\n  USER_AUTH_UPDATE_REQUEST,\n  USER_AUTH_UPDATE_SUCCESS,\n  USER_AUTH_UPDATE_FAILURE,\n  USER_AUTH_LOGOUT_REQUEST,\n  USER_AUTH_LOGOUT_SUCCESS,\n  USER_AUTH_LOGOUT_FAILURE,\n  API_USER_AUTH_UPDATE,\n  API_USER_AUTH_LOGOUT,\n  API_USER_AUTH_LOGIN,\n  API_USER_AUTH_REGISTER,\n} from '../actionTypes';\n\nimport {\n  userLoginApi,\n  userLogoutApi,\n  userRegisterApi,\n  userUpdateApi,\n} from '../../api/UserAuth';\nimport {\n  showUserAuthModal,\n  hideUserAuthModal,\n  updateErrorMessage\n} from \"../UserAuthModal\";\n\nexport const makeUserLoginRequest = (username, password) => (\n  {\n    type: API_USER_AUTH_LOGIN,\n    types: {\n      request: USER_AUTH_LOGIN_REQUEST,\n      success: USER_AUTH_LOGIN_SUCCESS,\n      failure: USER_AUTH_LOGIN_FAILURE,\n    },\n    callAPI: () => userLoginApi({username, password}),\n    successActionCreator: hideUserAuthModal,\n    failureActionCreator: updateErrorMessage,\n  }\n)\n\nexport const makeUserRegisterRequest = (username, password, email) => (\n  {\n    type: API_USER_AUTH_REGISTER,\n    types: {\n      request: USER_AUTH_REGISTER_REQUEST,\n      success: USER_AUTH_REGISTER_SUCCESS,\n      failure: USER_AUTH_REGISTER_FAILURE,\n    },\n    callAPI: () => userRegisterApi({\n        username,\n        password,\n        email\n    }),\n    failureActionCreator: updateErrorMessage,\n    successActionCreator: registerSuccessLoginModal,\n  }\n)\n\n// Use a thunk and redux-thunk to get the token rather than prop drilling it\nexport const userAuthLogout = () => (dispatch, getState) => dispatch(\n  {\n    type: API_USER_AUTH_LOGOUT,\n    types: {\n      request: USER_AUTH_LOGOUT_REQUEST,\n      success: USER_AUTH_LOGOUT_SUCCESS,\n      failure: USER_AUTH_LOGOUT_FAILURE,\n    },\n    callAPI: () => userLogoutApi(getState().userAuth.token),\n  }\n);\n\n// When succesfully registered launch the login modal with\n// success message\nconst successMessage = \"User profile created! Please log in.\"\nconst registerSuccessLoginModal = () => showUserAuthModal(\n  'login',\n  successMessage\n)\n\n// Upon change to user backend we might need to reload the user data\nexport const makeUserUpdateRequest = (username) => (\n  {\n  type: API_USER_AUTH_UPDATE,\n  types: {\n    request: USER_AUTH_UPDATE_REQUEST,\n    success: USER_AUTH_UPDATE_SUCCESS,\n    failure: USER_AUTH_UPDATE_FAILURE,\n  },\n  callAPI: () => userUpdateApi(username),\n  }\n)\n","import axios from 'axios';\n\nimport {\n  USER_LOGIN_URL,\n  USER_LOGOUT_URL,\n  USER_REGISTER_URL,\n  USER_DETAIL_URL\n} from '../constants';\nimport { tokenContextObj } from '../apiUtils';\n\nexport const userLoginApi = (credentials) => (\n  axios.post(\n      USER_LOGIN_URL,\n      credentials,\n    )\n    .then(response => response.data)\n);\n\nexport const userLogoutApi = (token) => (\n  axios.post(USER_LOGOUT_URL, null, tokenContextObj(token))\n    .then(response => response.data)\n  )\n\nexport const userRegisterApi = (userData) => (\n  axios.post(\n    USER_REGISTER_URL,\n    userData\n  )\n  .then(response => response.data)\n)\n\nexport const userUpdateApi = (username) => (\n  axios.get(USER_DETAIL_URL(username))\n  .then(response => response.data)\n)\n","import {\n  FETCH_SUB_DETAIL_REQUEST,\n  FETCH_SUB_DETAIL_SUCCESS,\n  FETCH_SUB_DETAIL_FAILURE,\n  API_SUB_DETAIL,\n  SET_SUB_TO_HOME,\n  SUBREDDIT_SUBSCRIBE_REQUEST,\n  SUBREDDIT_SUBSCRIBE_SUCCESS,\n  SUBREDDIT_SUBSCRIBE_FAILURE,\n  API_SUBREDDIT_SUBSCRIBE,\n  CREATE_SUBREDDIT_REQUEST,\n  CREATE_SUBREDDIT_SUCCESS,\n  CREATE_SUBREDDIT_FAILURE,\n  DELETE_SUBREDDIT_REQUEST,\n  DELETE_SUBREDDIT_SUCCESS,\n  DELETE_SUBREDDIT_FAILURE,\n  API_CREATE_SUBREDDIT\n} from \"../actionTypes\";\n\nimport {\n  getSubDetailApi,\n  subredditSubscribeApi,\n  createSubredditApi\n} from \"../../api/Subreddit\";\nimport { makeUserUpdateRequest } from \"../../actions/UserAuth\";\n\nexport const makeSubDetailRequest = subredditTitle => ({\n  type: API_SUB_DETAIL,\n  types: {\n    request: FETCH_SUB_DETAIL_REQUEST,\n    success: FETCH_SUB_DETAIL_SUCCESS,\n    failure: FETCH_SUB_DETAIL_FAILURE\n  },\n  callAPI: () => getSubDetailApi(subredditTitle)\n});\n\nexport const makeCreateSubredditRequest = subredditData => (\n  dispatch,\n  getState\n) =>\n  dispatch({\n    type: API_CREATE_SUBREDDIT,\n    types: {\n      request: CREATE_SUBREDDIT_REQUEST,\n      success: CREATE_SUBREDDIT_SUCCESS,\n      failure: CREATE_SUBREDDIT_FAILURE\n    },\n    callAPI: () => createSubredditApi(subredditData, getState().userAuth.token)\n  });\n\n// Get token from redux-thunk\nexport const makeSubSubscriptionRequest = (subredditTitle, subAction) => (\n  dispatch,\n  getState\n) =>\n  dispatch({\n    type: API_SUBREDDIT_SUBSCRIBE,\n    types: {\n      request: SUBREDDIT_SUBSCRIBE_REQUEST,\n      success: onSuccessfulSubscription,\n      failure: SUBREDDIT_SUBSCRIBE_FAILURE\n    },\n    callAPI: () =>\n      subredditSubscribeApi(\n        subredditTitle,\n        subAction,\n        getState().userAuth.token\n      )\n  });\n\n// When the request is successful we need to not only\n// indicate it success in the subreddit state tree\n// but also retrieve the modified user data from the backend\nconst onSuccessfulSubscription = (data, getState, dispatch) => {\n  dispatch({\n    type: SUBREDDIT_SUBSCRIBE_SUCCESS,\n    data\n  });\n\n  const username = getState().userAuth.username;\n  return username\n    ? dispatch(makeUserUpdateRequest(getState().userAuth.username))\n    : null;\n};\n","import axios from 'axios';\n\nimport {\n  SUB_DETAIL_URL,\n  SUB_SUBSCRIBE_URL,\n  CREATE_SUBREDDIT_URL,\n  DELETE_SUBREDDIT_URL,\n} from '../constants';\nimport { tokenContextObj } from '../apiUtils';\n\nexport const getSubDetailApi = (subredditTitle) => (\n  axios.get(SUB_DETAIL_URL(subredditTitle))\n  .then(response => response.data)\n)\n\nexport const subredditSubscribeApi = (subredditTitle, subAction, token) => {\n  const data = {action: subAction,}\n  return (\n    axios.post(SUB_SUBSCRIBE_URL(subredditTitle), data, tokenContextObj(token))\n      .then(response => response.data)\n  )\n}\n\nexport const createSubredditApi = (subredditData, token) => (\n  axios.post(CREATE_SUBREDDIT_URL, subredditData, tokenContextObj(token))\n    .then(response => response.data)\n)\n\nexport const deleteSubredditApi = (subredditPk, token) => (\n  axios.post(DELETE_SUBREDDIT_URL(subredditPk), tokenContextObj(token))\n    .then(response => response.data)\n)\n","import React from 'react';\nimport { Button } from 'react-bootstrap';\nimport { CircleLoader } from 'react-spinners';\n\nimport './styles.css'\n\nconst LoadingButton = (props) => {\n  \n  const {\n    loading,\n    children,\n    className,\n    ...rest\n  } = props;\n  \n  const spinner = <CircleLoader size={20} className=\"display: inline-block\" />;\n  \n  return (\n    <div className=\"loading-button-container\">\n      <Button\n        {...rest}\n        className={ className || \"loading-button\"}\n        disabled={loading}\n        \n      >\n        {loading ? spinner : children}\n      </Button>\n    </div>\n  )\n}\n\nexport default LoadingButton;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"./styles.css\";\n\nconst NavSelectorButton = props => {\n  const { active, children, onClick } = props;\n\n  const activeStyle = active\n    ? {\n        opacity: \"100\",\n        borderBottom: \"3px solid white\"\n      }\n    : {};\n\n  return (\n    <div\n      className=\"nav-selector-button-container\"\n      style={activeStyle}\n      onClick={onClick}\n    >\n      <p>{children}</p>\n    </div>\n  );\n};\n\nNavSelectorButton.propTypes = {\n  active: PropTypes.bool,\n  onClick: PropTypes.func\n};\n\nexport default NavSelectorButton;\n","import React from 'react';\n\nexport const withEither = (conditionalRenderingFn, EitherComponent) => (Component) => (props) =>\n  conditionalRenderingFn(props)\n    ? <EitherComponent {...props}/>\n    : <Component {...props}/>\n    \nexport const withMaybe = (conditionalRenderingFn) => (Component) => (props) =>\n  conditionalRenderingFn(props)\n    ? <Component {...props} />\n    : null\n","import React from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { compose } from \"recompose\";\n\nimport \"./styles.css\";\nimport { withMaybe, withEither } from \"../../../utilities/HOC\";\n\nconst SubscribeButton = ({ makeSubscriptionRequest, subredditTitle }) => (\n  <Button\n    className=\"subscribe-button\"\n    onClick={() => makeSubscriptionRequest(subredditTitle, \"sub\")}\n  >\n    SUBSCRIBE\n  </Button>\n);\n\nconst UnSubscribeButton = ({ makeSubscriptionRequest, subredditTitle }) => (\n  <Button\n    className=\"subscribe-button\"\n    onClick={() => makeSubscriptionRequest(subredditTitle, \"unsub\")}\n  >\n    UNSUBSCRIBE\n  </Button>\n);\n\nconst subscriptionConditionFn = props =>\n  props.userSubscriptions.includes(props.subredditTitle);\nconst authenticatedConditionFn = props => props.authenticatedUsername;\n\nconst SubscriptionButton = compose(\n  withMaybe(authenticatedConditionFn),\n  withEither(subscriptionConditionFn, UnSubscribeButton)\n)(SubscribeButton);\n\nexport default SubscriptionButton;\n","import React from \"react\";\nimport { Button } from \"react-bootstrap\";\n\nimport \"./styles.css\";\nimport { SubscriptionButton } from \"../Buttons\";\n\nconst SideBar = props => {\n  const {\n    title,\n    description,\n    makeSubscriptionRequest,\n    userSubs: { subscribed: userSubscriptions },\n    authenticatedUsername\n  } = props;\n\n  return (\n    <div className=\"sidebar-content\">\n      <div className=\"title\">r/{title}</div>\n\n      <div className=\"description\">{description}</div>\n      <SubscriptionButton\n        makeSubscriptionRequest={makeSubscriptionRequest}\n        userSubscriptions={userSubscriptions}\n        subredditTitle={title}\n        authenticatedUsername={authenticatedUsername}\n      />\n\n      <Button\n        id=\"create-post-button\"\n        className=\"sidebar-button\"\n        onClick={() => props.history.push(`/r/${props.title}/createPost`)}\n      >\n        CREATE POST\n      </Button>\n    </div>\n  );\n};\n\nexport default SideBar;\n","import React from 'react';\nimport { Panel } from 'react-bootstrap';\nimport { PulseLoader } from 'react-spinners';\n\nimport './styles.css';\n\nconst PanelLoader = () => (\n  <div>\n    <Panel>\n      <Panel.Body id=\"pulse-loader-panel-body\">\n          <PulseLoader className=\"panel-clip-loader\" color={'#BFEFFF'}/>\n      </Panel.Body>\n    </Panel>\n</div>    \n);\n\nexport default PanelLoader;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport PanelLoader from '../PanelLoader';\n\nconst PanelListLoader = ({ panelNumber }) => {\n  \n  const panelList = [...Array(panelNumber).keys()].map(\n    (id) => <PanelLoader key={id} />\n  )\n  return (\n    <ul>\n      {panelList}\n    </ul>\n  )\n\n}\n\n\nPanelListLoader.propTypes = {\n  panelNumber: PropTypes.number,\n}\n\nPanelListLoader.defaultProps = {\n  panelNumber: 5,\n}\n\nexport default PanelListLoader;\n","import React from 'react';\nimport { PulseLoader } from 'react-spinners';\n\nimport './styles.css'\n\nconst SideBarLoader = () => (\n  <div className=\"sidebar-loader-container\">\n    <PulseLoader color={'#BFEFFF'}/>\n  </div>\n)\n\nexport default SideBarLoader;\n","import React from 'react';\nimport { PulseLoader } from 'react-spinners';\n\nimport './styles.css';\n\nconst BlockLoader = () => (\n  <div className=\"block-loader-container\">\n    <PulseLoader color={'#BFEFFF'} />\n  </div>\n)\n\nexport default BlockLoader;\n","import React from 'react';\n\nimport SideBar from '../SideBar';\nimport { SideBarLoader } from '../../components/Loaders';\nimport { withEither } from '../../utilities/HOC';\nimport './styles.css';\n\nconst Subreddit = ({skinny, primaryComponent, ...props}) => {\n\n  const skinnyContainer = skinny\n    ? 'skinny-container'\n    : \"\";\n    \n  const SideBarWithLoader = withEither(\n    (props) => props.loading, SideBarLoader\n  )(SideBar)\n  \n  return (\n    <div className={'subreddit-container ' + skinnyContainer}>\n      <div className='primary-container'>\n          {primaryComponent(props)}\n      </div>\n      <div className='sidebar-container'>\n        <SideBarWithLoader {...props} />\n      </div>\n    </div>\n  )\n}\n\nexport default Subreddit;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport {\n  makeSubDetailRequest,\n  makeSubSubscriptionRequest\n} from \"../../actions/Subreddit\";\nimport { getAuthUsername } from \"../../reducers/userAuth\";\nimport Subreddit from \"../../components/Subreddit\";\n\nclass SubredditContainer extends Component {\n  componentDidMount() {\n    // a null subredditTitle implies we are at the home url\n    const subredditTitle = this.props.match.params.subredditTitle || \"home\";\n    this.props.fetchSubDetail(subredditTitle);\n  }\n\n  componentDidUpdate(prevProps) {\n    // a null subredditTitle implies we are at the home url\n    const subredditTitle = this.props.match.params.subredditTitle || \"home\";\n    if (\n      this.props.match.params.subredditTitle !==\n      prevProps.match.params.subredditTitle\n    ) {\n      this.props.fetchSubDetail(subredditTitle);\n    }\n  }\n\n  render() {\n    return <Subreddit {...this.props} />;\n  }\n}\n\nconst mapStateToProps = state => ({\n  title: state.subreddit.title,\n  description: state.subreddit.description,\n  loading: state.subreddit.loading,\n  userSubs: {\n    subscribed: state.userAuth.subs.map(sub => sub.title),\n    moderated: state.userAuth.moderated_subs.map(sub => sub.title)\n  },\n  authenticatedUsername: getAuthUsername(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchSubDetail: subredditTitle =>\n    dispatch(makeSubDetailRequest(subredditTitle)),\n  makeSubscriptionRequest: (subredditTitle, subAction) =>\n    dispatch(makeSubSubscriptionRequest(subredditTitle, subAction))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SubredditContainer);\n","import React from \"react\";\nimport { NavDropdown, MenuItem } from \"react-bootstrap\";\nimport { LinkContainer } from \"react-router-bootstrap\";\n\nimport \"./styles.css\";\n\nconst NavBarDropdown = ({ subscribed }) => {\n  const subscribedSubs = subscribed.map(sub => (\n    <LinkContainer key={sub.pk} exact to={\"/r/\" + sub.title}>\n      <MenuItem eventKey={sub.pk}>{sub.title}</MenuItem>\n    </LinkContainer>\n  ));\n\n  return (\n    <NavDropdown\n      className=\"feed-dropdown\"\n      eventKey={3}\n      title=\"feed\"\n      id=\"basic-nav-dropdown\"\n    >\n      <LinkContainer exact to=\"/\">\n        <MenuItem eventKey={3.1}>Home</MenuItem>\n      </LinkContainer>\n      <LinkContainer exact to=\"/r/popular\">\n        <MenuItem eventKey={3.2}>Popular</MenuItem>\n      </LinkContainer>\n      <LinkContainer exact to=\"/r/all\">\n        <MenuItem eventKey={3.3}>All</MenuItem>\n      </LinkContainer>\n      <MenuItem divider eventKey={3.4} />\n      {subscribedSubs}\n    </NavDropdown>\n  );\n};\n\nexport default NavBarDropdown;\n","import React from 'react';\nimport {\n  FormControl,\n  FormGroup,\n  ControlLabel,\n  HelpBlock,\n} from 'react-bootstrap';\n\nconst FieldGroup = ({id, label, help, ...props}) => (\n  <FormGroup controlId={id}>\n    <ControlLabel>{label}</ControlLabel>\n    <FormControl{...props}>\n      {help && <HelpBlock>{help}</HelpBlock>}\n    </FormControl>\n  </FormGroup>\n);\n\nexport default FieldGroup;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router';\nimport {\n  Navbar,\n  Nav,\n  FormGroup,\n  FormControl,\n  Button,\n} from 'react-bootstrap';\n\nimport FieldGroup from '../FieldGroup';\nimport { LoadingButton } from '../Buttons';\nimport { SEARCH_URL } from '../../urls';\nimport './styles.css';\n\nclass SearchBar extends Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      query: ''\n    };\n    \n    this.handleSearchSubmit = this.handleSearchSubmit.bind(this);\n  }\n  \n  handleChange = (e) => {\n    this.setState({query: e.target.value});\n  }\n  \n  async handleSearchSubmit(e) {\n    e.preventDefault();\n    \n    try{\n      await this.props.handleSearchRequest(this.state.query);\n    } catch {\n      this.forceUpdate()\n    }\n    this.setState({query:''})\n    this.props.history.push(SEARCH_URL);\n  }\n  \n  render() {\n    \n    const {\n      loading,\n      error,\n    } = this.props;\n    \n    return (\n      <Navbar.Form pullLeft>\n        <form onSubmit={this.handleSearchSubmit}>\n          <FieldGroup\n            id=\"search-bar-input\"\n            type=\"text\"\n            placeholder=\"Search...\"\n            name=\"search\"\n            onChange={this.handleChange}\n            value={this.state.query}\n          />\n        <LoadingButton\n          type=\"submit\"\n          loading={loading}\n        >\n          Search\n        </LoadingButton>\n        </form>\n\n      </Navbar.Form>\n    )\n  }\n  \n}\n\nSearchBar.propTypes = {\n  handleSearchRequest: PropTypes.func,\n}\n\nexport default withRouter(SearchBar);\n","import {\n  SEARCH_REQUEST,\n  SEARCH_SUCCESS,\n  SEARCH_FAILURE,\n  API_SEARCH,\n  SET_SEARCH_QUERY,\n  SET_SEARCH_RESULTS_VIEW\n} from \"../actionTypes\";\n\nimport { searchApi } from \"../../api/Search\";\n\nexport const makeSearchRequest = q => {\n  return {\n    type: API_SEARCH,\n    types: {\n      request: SEARCH_REQUEST,\n      success: SEARCH_SUCCESS,\n      failure: SEARCH_FAILURE\n    },\n    callAPI: () => searchApi(q)\n  };\n};\n\nexport const setSearchQuery = q => ({\n  type: SET_SEARCH_QUERY,\n  query: q\n});\n\nexport const setSearchResultsView = (viewName = \"posts\") => ({\n  type: SET_SEARCH_RESULTS_VIEW,\n  viewName\n});\n","import axios from 'axios';\n\nimport { SEARCH_URL } from '../constants'\n\nexport const searchApi = (q) => (\n  axios.get(SEARCH_URL, {params: { q, }, })\n    .then(response => response.data)\n)\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport SearchBar from \"../../components/SearchBar\";\nimport { setSearchQuery } from \"../../actions/Search\";\n\nconst SearchBarContainer = props => {\n  const { handleSearchRequest } = props;\n\n  return <SearchBar {...{ handleSearchRequest }} />;\n};\n\nconst mapDispatchToProps = dispatch => ({\n  handleSearchRequest: q => dispatch(setSearchQuery(q))\n});\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(SearchBarContainer);\n","import React from 'react';\nimport {\n  Navbar,\n  Nav,\n  FormGroup,\n  FormControl,\n  Button,\n} from 'react-bootstrap';\nimport { NavLink } from 'react-router-dom';\n\nimport \"./styles.css\";\nimport NavBarDropdown from './NavBarDropdown';\nimport SearchBarContainer from '../../containers/SearchBarContainer';\n\nconst NavBar = ({children, subscribed}) => {\n  \n  return (\n    <Navbar inverse fixed=\"true\" fluid>\n      <Navbar.Header>\n        <Navbar.Brand>\n          <NavLink exact to=\"/\">reReddit</NavLink>\n        </Navbar.Brand>\n      </Navbar.Header>\n      \n      <Nav>\n        <NavBarDropdown subscribed={subscribed} />\n      </Nav>\n      <SearchBarContainer />\n      \n      {children}\n    </Navbar>\n  );\n};\n\nexport default NavBar;\n","import React from 'react';\nimport { Button } from 'react-bootstrap';\n\nimport './styles.css';\n\n\nconst UserButton = ({children, onClick, inverted}) => {\n  const userButtonId = inverted ? \"user-button-inverted\" : \"user-button-default\";\n  return (\n      <div>\n        <Button onClick={onClick} id={userButtonId} className=\"user-button\">\n          {children}\n        </Button>\n      </div>\n    );\n};\n\nexport default UserButton;\n","import React from 'react';\nimport {\n  Nav,\n  NavItem,\n} from 'react-bootstrap';\n\nimport UserButton from '../UserButton';\nimport './styles.css'\n\nconst UnauthenticatedUser = ({showModal, middleWareTest}) => {\n\n  return (\n    <Nav pullRight className=\"right-user-links\">\n      <NavItem eventKey={4}>\n        <UserButton onClick={() => showModal('login')} inverted>\n          login\n        </UserButton>\n      </NavItem>\n      <NavItem eventKey={5}>\n        <UserButton onClick={() => showModal('register')}>\n          sign up\n        </UserButton>\n      </NavItem>\n    </Nav>\n  );\n}\n\nexport default UnauthenticatedUser;\n","import React from 'react';\nimport {\n  Nav,\n  NavDropdown,\n  MenuItem,\n} from 'react-bootstrap';\n\nimport './styles.css'\n\nconst AuthenticatedUser = ({username,handleLogout}) => {\n  \n  return (\n    <Nav pullRight className=\"auth-dropdown-container\">\n          <NavDropdown \n            className='user-dropdown'\n            eventKey={3}\n            title={username}\n            id=\"user-nav-dropdown\"\n          >\n            <MenuItem eventKey={3.1}>Action</MenuItem>\n            <MenuItem eventKey={3.2}>Another action</MenuItem>\n            <MenuItem eventKey={3.3}>Something else here</MenuItem>\n            <MenuItem divider />\n            <MenuItem \n              eventKey={3.4}\n              onClick={() => handleLogout()}\n            >\n              Logout\n            </MenuItem>\n          </NavDropdown>\n    </Nav>    \n  );\n}\n\nexport default AuthenticatedUser;","import React from 'react';\n\n\n\nimport UnauthenticatedUser from './UnauthenticatedUser';\nimport AuthenticatedUser from './AuthenticatedUser';\n\nconst UserAuthNav = ({showModal, username, handleLogout,middleWareTest}) => {\n  return (\n    username ?\n    <AuthenticatedUser username={username} handleLogout={handleLogout} /> :\n    <UnauthenticatedUser showModal={showModal}/>\n  );\n}\n\nexport default UserAuthNav;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport NavBar from '../../components/NavBar';\nimport UserAuthNav from '../../components/UserAuthNav';\nimport { showUserAuthModal } from '../../actions/UserAuthModal';\nimport { userAuthLogout } from '../../actions/UserAuth';\n\n\nclass NavBarContainer extends Component {\n  render = () => (\n    <NavBar subscribed={this.props.subscribed}>\n      <UserAuthNav\n        showModal={this.props.showModal}\n        username={this.props.username}\n        handleLogout={this.props.handleLogout}\n      />\n    </NavBar>\n  );\n}\n\nconst mapStateToProps = state => (\n  {\n    username: state.userAuth.username,\n    subscribed: state.userAuth.subs,\n  }\n);\n\nconst mapDispatchToProps = dispatch => (\n  {\n    showModal: (displayType) => dispatch(showUserAuthModal(displayType)),\n    handleLogout: () => dispatch(userAuthLogout()),\n  }\n);\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n  null,\n  {pure: false},\n)(NavBarContainer)\n","import React from 'react';\nimport { Alert } from 'react-bootstrap';\nimport { FaTimes, FaCheck } from 'react-icons/fa';\n\nimport { withMaybe } from '../../utilities/HOC';\nimport './styles.css';\n\nexport const SuccessAlert = (props) => (\n  <Alert bsStyle='success' className='alert-message'>\n    <FaCheck color='green' size='3em' />\n    <p className=\"alert-text\" id='success-text' align='center'>\n      {props.children}\n    </p>\n  </Alert>\n)\n\n\nexport const ErrorAlert = (props) => (\n  <Alert bsStyle='danger' className='alert-message'>\n    <FaTimes color='red' size='3em' />\n    <p className=\"alert-text\" id='error-text' align='center'>\n      {props.children}\n    </p>\n  </Alert>\n)\n\nexport const ErrorAlertWithError = withMaybe(\n    (props) => props.children\n  )(ErrorAlert);\n","import React from 'react';\nimport { Modal } from 'react-bootstrap';\n\nimport './styles.css';\nimport { SuccessAlert, ErrorAlert } from '../AlertMessage';\n\nconst UserAuthModal = (props) => {\n  \n  const {\n    handleHide,\n    title,\n    formComponent,\n    messageProps,\n  } = props;\n  \n  const {\n    errorMessage,\n    successMessage,\n  } = messageProps;\n  \n  let eMessage, sMessage = null;\n  \n  if (successMessage) {\n    sMessage =\n      <SuccessAlert>\n        {successMessage}\n      </SuccessAlert>\n    }\n\n    if (errorMessage) {\n      eMessage =\n      <ErrorAlert>\n        {errorMessage}\n      </ErrorAlert>\n    }\n  \n  return (\n    <Modal\n      onHide={handleHide}\n      show\n    >\n      <Modal.Header closeButton>\n        <Modal.Title>{title}</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        {sMessage}\n        {eMessage}\n        {formComponent}\n      </Modal.Body>\n      \n    </Modal>\n  );\n}\n\nexport default UserAuthModal;\n","import React from 'react';\nimport { Button } from 'react-bootstrap';\nimport { CircleLoader } from 'react-spinners';\n\nimport './styles.css'\n\nconst FormButton = (props) => {\n  \n  const {\n    bsStyle,\n    handleClick,\n    loading,\n    children,\n    type,\n  } = props;\n  \n  const spinnerStyle = 'display: inline-block;'\n  \n  const spinner = loading ?\n    <CircleLoader\n      size={20}\n      className={spinnerStyle}\n    /> :\n    null;\n\n  return (\n    <div id='single-button'>\n      <Button\n        bsStyle={bsStyle || null}\n        className='login-buttons'\n        onClick={() => handleClick()}\n        disabled={loading}\n        type={type || 'button'}\n      >\n        {spinner ? spinner : children}\n      </Button>\n    </div>\n  );\n}\n\nexport default FormButton;\n","import React, { Component } from \"react\";\nimport { withRouter } from \"react-router\";\n\nimport FieldGroup from \"../../FieldGroup\";\nimport FormButton from \"../FormButton\";\nimport { HOME_SUBREDDIT_URL } from \"../../../urls\";\nimport \"./styles.css\";\n\nclass ModalLoginForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      username: \"\",\n      password: \"\"\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange = e => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  async handleSubmit() {\n    try {\n      await this.props.handleLogin(this.state.username, this.state.password);\n      this.props.history.push(HOME_SUBREDDIT_URL);\n    } catch {\n      this.forceUpdate();\n    }\n  }\n\n  render() {\n    return (\n      <div id=\"login-form-container\">\n        <form onSubmit={this.handleSubmit}>\n          <FieldGroup\n            id=\"formControlsText\"\n            label=\"Username:\"\n            type=\"text\"\n            value={this.state.username}\n            placeholder=\"username\"\n            name=\"username\"\n            onChange={this.handleChange}\n            autoFocus\n          />\n\n          <FieldGroup\n            id=\"formControlsPassword\"\n            label=\"Password:\"\n            type=\"password\"\n            value={this.state.password}\n            placeholder=\"password\"\n            name=\"password\"\n            onChange={this.handleChange}\n          />\n\n          <div id=\"button-container\">\n            <FormButton\n              bsStyle=\"primary\"\n              handleClick={this.handleSubmit}\n              loading={this.props.loading}\n              children=\"Login\"\n              type=\"submit\"\n            />\n\n            <FormButton\n              bsStyle=\"danger\"\n              handleClick={this.props.handleHide}\n              loading={this.props.loading}\n              children=\"Cancel\"\n            />\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(ModalLoginForm);\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport UserAuthModal from '../../components/UserAuthModal';\nimport ModalLoginForm from \"../../components/ModalForm/ModalLoginForm\";\nimport { hideUserAuthModal } from '../../actions/UserAuthModal';\nimport { makeUserLoginRequest } from '../../actions/UserAuth';\n\nconst LoginModalContainer = (props) => {\n  const {\n    handleHide,\n    handleLogin,\n    loading,\n    messageProps,\n  } = props;\n  \n  return (\n    <UserAuthModal\n      handleHide={handleHide}\n      title='Login'\n      messageProps={messageProps}\n      formComponent={\n        <ModalLoginForm\n          handleLogin={handleLogin}\n          handleHide={handleHide}\n          loading={loading}\n        />\n      }\n    />\n  );\n}\n\nconst mapStateToProps = state => (\n  {\n    loading: state.userAuth.loading,\n  }\n);\n\nconst mapDispatchToProps = dispatch => (\n  {\n    handleHide: () => dispatch(hideUserAuthModal()),\n    handleLogin: (username, password) =>\n      dispatch(makeUserLoginRequest(username, password)),\n  }\n);\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(LoginModalContainer);\n","import React, { Component } from 'react';\n\nimport FieldGroup from '../../FieldGroup';\nimport FormButton from '../FormButton';\nimport './styles.css'\n\nclass ModalRegisterForm extends Component {\n  constructor(props) {\n    super(props);\n    \n    this.handleChange = this.handleChange.bind(this);\n    \n    this.state = {\n      username: '',\n      password: '',\n      email: '',\n    };\n  }\n  \n  handleChange = (e) => {\n      this.setState({[e.target.name]: e.target.value});\n  }\n  \n  handleSubmit = () => {\n    this.props.handleRegister(\n      this.state.username,\n      this.state.password,\n      this.state.email\n    );\n  }\n  \n  render = () => (\n    <div id=\"register-form-container\">\n      <form onSubmit={this.handleSubmit}>\n        <FieldGroup\n          id=\"formControlsText\"\n          label=\"Username:\"\n          type=\"text\"\n          value={this.state.username}\n          placeholder='username'\n          name='username'\n          onChange={this.handleChange}\n          autoFocus\n        />\n      \n        <FieldGroup\n          id=\"formControlsPassword\"\n          label=\"Password:\"\n          type=\"password\"\n          value={this.state.password}\n          placeholder='password'\n          name='password'\n          onChange={this.handleChange}\n        />\n        \n        <FieldGroup\n          id=\"formControlsEmail\"\n          label=\"Email:\"\n          type=\"email\"\n          value={this.state.email}\n          placeholder='email'\n          name='email'\n          onChange={this.handleChange}\n        />\n      \n        <div id=\"button-container\">\n          <FormButton\n            bsStyle='primary'\n            handleClick={this.handleSubmit}\n            loading={this.props.loading}\n            children='Register'\n            type='submit'\n          />\n        \n          <FormButton\n              bsStyle='danger'\n              handleClick={this.props.handleHide}\n              loading={this.props.loading}\n              children='Cancel'\n            />\n        </div>\n      </form>\n    </div>\n  )\n}\n\nexport default ModalRegisterForm;\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport UserAuthModal from '../../components/UserAuthModal';\nimport ModalRegisterForm from '../../components/ModalForm/ModalRegisterForm';\nimport { hideUserAuthModal } from '../../actions/UserAuthModal';\nimport { makeUserRegisterRequest } from '../../actions/UserAuth';\n\nconst RegisterModalContainer = (props) => {\n  const {\n    handleHide,\n    handleRegister,\n    loading,\n    messageProps,\n  } = props;\n  \n  return (\n    <UserAuthModal\n      handleHide={handleHide}\n      title='Register'\n      messageProps={messageProps}\n      formComponent={\n        <ModalRegisterForm\n          handleRegister={handleRegister}\n          handleHide={handleHide}\n          loading={loading}\n        />\n      }\n    />\n  );\n}\n\nconst mapStateToProps = state => (\n  {\n    loading: state.userAuth.loading,\n  }\n);\n\nconst mapDispatchToProps = (dispatch) => (\n  {\n  handleHide: () => dispatch(hideUserAuthModal()),\n  handleRegister: (username, password, email) =>\n    dispatch(makeUserRegisterRequest(username, password, email)),\n  }\n);\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(RegisterModalContainer);\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport LoginModalContainer from './LoginModalContainer';\nimport RegisterModalContainer from './RegisterModalContainer';\n\nconst UserAuthModalContainer = ({displayType, messageProps}) => {\n  switch (displayType) {\n    case 'login':\n      return <LoginModalContainer messageProps={messageProps}/>;\n    case 'register':\n      return <RegisterModalContainer messageProps={messageProps}/>;\n    default:\n      return null;\n  }\n}\n\nconst mapStateToProps = state => (\n  {\n      displayType: state.userAuthModal.displayType,\n      messageProps: {\n        errorMessage: state.userAuthModal.errorMessage,\n        successMessage: state.userAuthModal.successMessage,\n      },\n  }\n);\n\nexport default connect(\n  mapStateToProps\n) (UserAuthModalContainer);\n","import React, { Component, Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport ReactQuill from \"react-quill\";\nimport \"react-quill/dist/quill.snow.css\";\n\nimport { LoadingButton } from \"../Buttons\";\nimport \"./styles.css\";\n\nclass TextEditor extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      editorHtml: props.initialValue || \"\"\n    };\n\n    this.formats = [\n      \"header\",\n      \"font\",\n      \"size\",\n      \"bold\",\n      \"italic\",\n      \"underline\",\n      \"strike\",\n      \"blockquote\",\n      \"list\",\n      \"bullet\",\n      \"indent\",\n      \"code\"\n    ];\n\n    this.modules = {\n      toolbar: [\n        [{ header: \"1\" }, { header: \"2\" }, { font: [] }],\n        [\"bold\", \"italic\", \"underline\", \"strike\", \"blockquote\", \"code\"],\n        [\n          { list: \"ordered\" },\n          { list: \"bullet\" },\n          { indent: \"-1\" },\n          { indent: \"+1\" }\n        ],\n        [\"clean\"]\n      ]\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.quillNode = React.createRef();\n  }\n\n  componentDidMount() {\n    if (!this.props.focusOnEditor) {\n      this.quillNode.current.focus();\n    }\n  }\n\n  handleChange(html) {\n    this.setState({\n      editorHtml: html\n    });\n  }\n\n  handleSubmitClick = editorHtml => {\n    this.setState({\n      editorHtml: \"\"\n    });\n\n    return this.props.handleSubmit(editorHtml);\n  };\n\n  render() {\n    const { placeholder, usage, onBlur, loading } = this.props;\n\n    let submitButtonWord = \"Submit\";\n    switch (usage) {\n      case \"create\":\n        submitButtonWord = \"Post\";\n        break;\n      case \"update\":\n        submitButtonWord = \"Edit\";\n        break;\n      default:\n        break;\n    }\n\n    return (\n      <Fragment>\n        <ReactQuill\n          value={this.state.editorHtml}\n          onChange={this.handleChange}\n          placeholder={placeholder || \"What are your thoughts?\"}\n          modules={this.modules}\n          formats={this.formats}\n          ref={this.quillNode}\n          onBlur={onBlur}\n        />\n        <LoadingButton\n          onClick={() => this.handleSubmitClick(this.state.editorHtml)}\n          className=\"submit-button\"\n          loading={loading}\n        >\n          {submitButtonWord}\n        </LoadingButton>\n      </Fragment>\n    );\n  }\n}\n\nTextEditor.propTypes = {\n  usage: PropTypes.string,\n  rootComment: PropTypes.bool,\n  placeholder: PropTypes.string,\n  initialValue: PropTypes.string,\n  onBlur: PropTypes.func,\n  handleSubmit: PropTypes.func\n};\n\nexport default TextEditor;\n","import React , {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router';\n\nimport TextEditor from '../TextEditor';\nimport FieldGroup from '../FieldGroup';\nimport { ErrorAlert } from '../AlertMessage';\nimport { withMaybe } from '../../utilities/HOC';\nimport FormButton from '../ModalForm/FormButton';\nimport './styles.css';\n\nclass CreatePost extends Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      title:'',\n    }\n    \n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  \n  handleTitleChange = (e) => this.setState({title: e.target.value});\n  \n  async handleSubmit(editorHtml) {\n    \n    try {\n      const postCreation = await this.props.handleCreatePost(\n        this.state.title,\n        editorHtml,\n        this.props.subredditTitle,\n      )\n      this.props.history.replace(`/r/${this.props.subredditTitle}`);\n    } catch {\n      this.forceUpdate()\n    }\n  }\n  \n  render() {\n    \n    const {\n      errorMessage,\n      loading,\n    } = this.props;\n      \n    const CreatePostErrorAlert = withMaybe((props) => props.children)(ErrorAlert);\n      \n    return (\n      <div className=\"create-post-container\">\n        <div className=\"alert-message-container\">\n          <CreatePostErrorAlert children={this.props.errorMessage}/>\n        </div>\n        <form>\n          <div className='title-input-container'>\n            <FieldGroup\n              id=\"create-post-title\"\n              placeholder='Title'\n              type='text'\n              value={this.state.title}\n              onChange={this.handleTitleChange}\n              name='username'\n            />\n          </div>\n\n          <TextEditor\n            handleCommentSubmit={this.handleSubmit}\n            usage=\"create\"\n            placeholder=\"Text (optional)\"\n          />\n\n        </form>\n      </div>\n  )\n  }\n}\n\nCreatePost.propTypes = {\n  errorMessage: PropTypes.string,\n  loading: PropTypes.bool,\n  subredditTitle: PropTypes.string,\n  handleCreatePost: PropTypes.func,\n};\n\nexport default withRouter(CreatePost);\n","import axios from \"axios\";\n\nimport {\n  POST_DETAIL_URL,\n  SUB_POST_LIST_URL,\n  CREATE_POST_URL\n} from \"../constants\";\nimport { tokenContextObj } from \"../apiUtils\";\n\n// Get the list of posts for a particular subreddit\nexport const getSubPostListApi = (subredditTitle, orderBy, username, token) => {\n  const params = { orderby: orderBy, username };\n  return axios\n    .get(SUB_POST_LIST_URL(subredditTitle), {\n      params,\n      ...tokenContextObj(token)\n    })\n    .then(response => response.data);\n};\n\nexport const createPostApi = (title, body, subredditTitle, token) => {\n  const data = { title, body };\n  return axios\n    .post(CREATE_POST_URL(subredditTitle), data, tokenContextObj(token))\n    .then(response => response.data);\n};\n\nexport const updatePostApi = (pk, body, token) => {\n  const data = { body };\n  return axios\n    .patch(POST_DETAIL_URL(pk), data, tokenContextObj(token))\n    .then(response => response.data);\n};\n\nexport const getPostDetailApi = postId =>\n  axios.get(POST_DETAIL_URL(postId)).then(response => response.data);\n\nexport const deletePostApi = (pk, token) => {\n  return axios\n    .delete(POST_DETAIL_URL(pk), tokenContextObj(token))\n    .then(response => response.data);\n};\n","import {\n  FETCH_POST_LIST_REQUEST,\n  FETCH_POST_LIST_SUCCESS,\n  FETCH_POST_LIST_FAILURE,\n  FETCH_POST_DETAIL_REQUEST,\n  FETCH_POST_DETAIL_SUCCESS,\n  FETCH_POST_DETAIL_FAILURE,\n  CREATE_POST_REQUEST,\n  CREATE_POST_SUCCESS,\n  CREATE_POST_FAILURE,\n  DELETE_POST_REQUEST,\n  DELETE_POST_SUCCESS,\n  DELETE_POST_FAILURE,\n  UPDATE_POST_REQUEST,\n  UPDATE_POST_SUCCESS,\n  UPDATE_POST_FAILURE,\n  API_SUB_POST_LIST,\n  API_CREATE_POST,\n  API_DELETE_POST,\n  API_POST_DETAIL,\n  TOGGLE_POST_EDITOR\n} from \"../actionTypes\";\n\nimport {\n  getSubPostListApi,\n  getPostDetailApi,\n  createPostApi,\n  deletePostApi,\n  updatePostApi\n} from \"../../api/Posts\";\nimport { getAuthUsername, getAuthUserToken } from \"../../reducers/userAuth\";\n\n// use redux-thunk for userAuth username\nexport const makeSubPostListRequest = (subredditTitle, orderBy) => (\n  dispatch,\n  getState\n) =>\n  dispatch({\n    type: API_SUB_POST_LIST,\n    types: {\n      request: FETCH_POST_LIST_REQUEST,\n      success: FETCH_POST_LIST_SUCCESS,\n      failure: FETCH_POST_LIST_FAILURE\n    },\n    callAPI: () =>\n      getSubPostListApi(\n        subredditTitle,\n        orderBy,\n        getAuthUsername(getState()),\n        getAuthUserToken(getState())\n      )\n  });\n\n// Using redux-thunk to get an auth token\nexport const makeCreatePostRequest = (title, body, subredditTitle) => (\n  dispatch,\n  getState\n) =>\n  dispatch({\n    type: API_CREATE_POST,\n    types: {\n      request: CREATE_POST_REQUEST,\n      success: CREATE_POST_SUCCESS,\n      failure: CREATE_POST_FAILURE\n    },\n    callAPI: () =>\n      createPostApi(title, body, subredditTitle, getState().userAuth.token)\n  });\n\n// Using redux-thunk to get an auth token\nexport const makeUpdatePostRequest = (pk, body) => (dispatch, getState) =>\n  dispatch({\n    type: API_CREATE_POST,\n    types: {\n      request: UPDATE_POST_REQUEST,\n      success: UPDATE_POST_SUCCESS,\n      failure: UPDATE_POST_FAILURE\n    },\n    callAPI: () => updatePostApi(pk, body, getState().userAuth.token)\n  });\n\nexport const makeDeletePostRequest = pk => (dispatch, getState) =>\n  dispatch({\n    type: API_DELETE_POST,\n    types: {\n      request: onDeletePostRequest(pk),\n      success: DELETE_POST_SUCCESS,\n      failure: DELETE_POST_FAILURE\n    },\n    callAPI: () => deletePostApi(pk, getState().userAuth.token)\n  });\n\n// Use a thunk action creator to get the pk added to the REQUEST action\nconst onDeletePostRequest = pk => dispatch =>\n  dispatch({\n    type: DELETE_POST_REQUEST,\n    pk\n  });\n\nexport const makePostDetailRequest = postId => ({\n  type: API_POST_DETAIL,\n  types: {\n    request: FETCH_POST_DETAIL_REQUEST,\n    success: FETCH_POST_DETAIL_SUCCESS,\n    failure: FETCH_POST_DETAIL_FAILURE\n  },\n  callAPI: () => getPostDetailApi(postId)\n});\n\nexport const togglePostEditor = () => ({\n  type: TOGGLE_POST_EDITOR\n});\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport CreatePost from '../../components/CreatePost';\nimport { makeCreatePostRequest } from '../../actions/Posts';\nimport {\n  getCreatePostError,\n  getCreatePostLoading,\n} from '../../reducers/createPost';\nimport {\n  getSubredditTitle,\n} from '../../reducers/subreddit';\n\nclass CreatePostContainer extends Component {\n\n  render() {\n    return <CreatePost {...this.props} />\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n    handleCreatePost: (title, body, subredditTitle) =>\n      dispatch(makeCreatePostRequest(title, body, subredditTitle)),\n})\n\nconst mapStateToProps = (state) => ({\n    errorMessage: getCreatePostError(state),\n    loading: getCreatePostLoading(state),\n    subredditTitle: getSubredditTitle(state),\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(CreatePostContainer);\n","import React, { Component, Fragment } from 'react';\nimport { FaArrowUp, FaArrowDown } from 'react-icons/fa';\n\nimport './styles.css';\n\nclass Voter extends Component {\n  \n  upvotedStyle = {\n    color: '#cc3700',\n  }\n  \n  downvotedStyle = {\n    color: '#8DA8FF',\n  }\n  \n  render() {\n    \n    const {\n      upvotes,\n      displayState,\n      handleVote\n    } = this.props;\n    \n    return (\n      <div className='vote-container'>\n        <div className='voter-arrow upvoter'>\n          <span\n            style={displayState === 1 ? this.upvotedStyle : {}}\n            onClick={() => handleVote(1)}\n          >\n            <FaArrowUp />\n          </span>\n        </div>\n        <div\n          className='vote-count'\n          style={\n            displayState === 1\n              ? this.upvotedStyle\n              : displayState === -1\n                ? this.downvotedStyle\n                : {}\n          }          \n        >\n          {upvotes}\n        </div>\n        <div className='voter-arrow downvoter' >\n          <span\n            style={displayState === -1 ? this.downvotedStyle : {}}\n            onClick={() => handleVote(-1)}\n          >\n            <FaArrowDown />\n          </span>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Voter;\n","import {\n  VOTE_REQUEST,\n  VOTE_SUCCESS,\n  VOTE_FAILURE,\n  COMMENT_VOTE_SUCCESS,\n  POST_VOTE_SUCCESS,\n  API_VOTE,\n} from '../actionTypes';\n\nimport { voteApi } from '../../api/Voter';\n\n// use thunk to get token\nexport const makeVoteRequest = (voteData) =>\n  (dispatch, getState) =>\n    dispatch(\n      {\n        type: API_VOTE,\n        types: {\n          request: VOTE_REQUEST,\n          success: onVoteSuccess,\n          failure: VOTE_FAILURE,\n        },\n        callAPI: () => voteApi(\n          voteData,\n          getState().userAuth.token\n        ),\n      }\n    )\n\nconst onVoteSuccess = (data, getState, dispatch) => {\n  if (data.hasOwnProperty('comment')) {\n    return dispatch({\n      type: COMMENT_VOTE_SUCCESS,\n      data\n    })\n  } else if (data.hasOwnProperty('post')) {\n    return dispatch({\n      type: POST_VOTE_SUCCESS,\n      data\n    })\n  }\n  \n  throw new ReferenceError(\n    'Upvote is of unknown type',\n    'actions/Voter/index.js',\n    41\n  )\n}\n","import axios from 'axios';\n\nimport {\n  VOTE_URL,\n} from '../constants';\nimport { tokenContextObj } from '../apiUtils';\n\nexport const voteApi = (voteData, token) => {\n  // voteType: upvote(1), downvote(-1) or unvote(0)\n  // itemType: 'post' or 'comment'\n  // itemPk: pk of post or comment\n  const {\n    itemType,\n    itemPk: pk,\n    voteType,\n  } = voteData;\n  \n  let itemFn = null;\n  if (itemType === 'comment') {\n    itemFn = `t1_${pk}`\n  } else if (itemType === 'post') {\n    itemFn = `t2_${pk}`\n  };\n  \n  const data = {vote_type: voteType, item_fn: itemFn};\n  return axios.post(VOTE_URL, data, tokenContextObj(token))\n    .then(response => response.data)\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport Voter from '../../components/Voter';\nimport { makeVoteRequest } from '../../actions/Voter';\n\nconst VoterContainer = ({voteDisplayState, handleVote, upvotes}) => (\n  <Voter\n    displayState={voteDisplayState}\n    handleVote={handleVote}\n    upvotes={upvotes}\n  />\n)\n\nconst mapDispatchToProps = (dispatch, ownProps) => (\n  {\n    handleVote: (voteType) => dispatch(\n      makeVoteRequest({\n      voteType,\n      itemType: ownProps.itemType,\n      itemPk: ownProps.itemPk,\n      })\n    ),\n  }\n)\n\nexport default connect(\n  null,\n  mapDispatchToProps,\n)(VoterContainer);\n","import React from 'react';\nimport { FaEllipsisH } from 'react-icons/fa';\nimport { Dropdown, MenuItem } from 'react-bootstrap';\n\nimport './styles.css';\n\nconst EllipsisButton = ({children}) => (\n  \n  <Dropdown id=\"ellipsis-dropdown\" >\n    <Dropdown.Toggle noCaret className=\"toggle-button\">\n      <FaEllipsisH/>\n    </Dropdown.Toggle>\n    <Dropdown.Menu className=\"ellipsis-dropdown-menu\">\n      {children}\n    </Dropdown.Menu>\n  </Dropdown>\n)\n\nexport default EllipsisButton;\n","import React, { Component, Fragment } from \"react\";\nimport { Button, Tooltip, OverlayTrigger } from \"react-bootstrap\";\nimport { FaShare } from \"react-icons/fa\";\n\nimport \"./styles.css\";\n\nclass ShareButton extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      showTooltip: false\n    };\n\n    this.copyNode = React.createRef();\n\n    this.copyTooltip = <Tooltip id=\"copy-tooltip\">Copied Link</Tooltip>;\n  }\n\n  toggleTooltip = () => {\n    this.setState({ showTooltip: !this.state.showTooltip });\n  };\n\n  copyToClipboard = e => {\n    this.copyNode.current.select();\n    document.execCommand(\"copy\");\n\n    this.toggleTooltip();\n    setTimeout(this.toggleTooltip, 4000);\n  };\n\n  render() {\n    const { shareUrl } = this.props;\n\n    return (\n      <Fragment>\n        <OverlayTrigger\n          placement=\"bottom\"\n          overlay={this.copyTooltip}\n          trigger=\"focus\"\n          delayHide={4000}\n        >\n          <Button\n            bsSize=\"xsmall\"\n            className=\"share-button\"\n            onClick={this.copyToClipboard}\n          >\n            <FaShare /> Share\n          </Button>\n        </OverlayTrigger>\n        <form>\n          <input\n            className=\"hidden-copy-input\"\n            readOnly\n            ref={this.copyNode}\n            value={shareUrl}\n            aria-hidden=\"true\"\n          />\n        </form>\n      </Fragment>\n    );\n  }\n}\n\nexport default ShareButton;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router';\nimport { Panel, Button, MenuItem } from 'react-bootstrap';\nimport { FaShare } from 'react-icons/fa';\nimport { Link } from 'react-router-dom';\n\nimport VoterContainer from '../../containers/VoterContainer';\nimport EllipsisButton from '../EllipsisButton';\nimport ShareButton from '../ShareButton';\nimport { withMaybe } from '../../utilities/HOC';\nimport './styles.css';\n\nclass PostPanel extends Component {\n  \n  handlePanelClick = (e) => {\n    const {\n      subredditTitle,\n      pk,\n      history,\n    } = this.props;\n    \n    if (e.target instanceof HTMLDivElement) {\n      history.push(`/r/${subredditTitle}/postDetail/${pk}`)\n    }\n  };\n  \n  render() {\n    const {\n      upvotes,\n      pk,\n      title,\n      subredditTitle,\n      posterUsername,\n      authUsername,\n      created,\n      voteDisplayState,\n      handleDeletePost,\n      history,\n    } = this.props;\n    \n    const AuthEllipsis = withMaybe(\n      (props) => props.showEllipsis\n    )(EllipsisButton);\n\n    return (\n      <div\n        className=\"post-segment-panel\"\n        name=\"postPanel\"\n        onClick={this.handlePanelClick}\n      >\n          <VoterContainer\n            upvotes={upvotes}\n            voteDisplayState={voteDisplayState || 0}\n            itemType={'post'}\n            itemPk={pk}\n          />\n\n        \n        <div className='post-segment-text-container'>\n          <div className=\"post-segment-title\">\n            <Link\n              id=\"post-title\"\n              to={\"/r/\" + subredditTitle + \"/postDetail/\" + pk}\n            >\n              {title}\n            </Link>\n          </div>\n          \n          <div className='post-segment-info'>\n            <strong>\n              <Link to={`/r/${subredditTitle}`}>\n                r/{subredditTitle}\n              </Link>\n            </strong>\n            - posted by:\n            <a href=\"#\"> u/{posterUsername} </a>\n            {created}\n          </div>\n          \n          <div className='post-segment-links'>\n            <Link to={`/r/${subredditTitle}/postDetail/${pk}/comments`}>\n              <Button\n                bsSize='xsmall'\n                className='post-buttons'\n              >\n                Comments\n              </Button>\n            </Link>\n\n            <ShareButton shareUrl={`${window.location}/postDetail/${pk}`}/>\n\n            <AuthEllipsis\n              showEllipsis={authUsername === posterUsername}\n            >\n              <MenuItem\n                eventKey={1}\n                onSelect={handleDeletePost}\n              >\n                delete\n              </MenuItem>\n                      \n              <MenuItem\n                eventKey={2}\n                onSelect={() => null}\n              >\n                edit\n              </MenuItem>\n\n\n            </AuthEllipsis>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nPostPanel.propTypes = {\n  upvotes: PropTypes.number,\n  pk: PropTypes.number,\n  title: PropTypes.string,\n  subredditTitle: PropTypes.string,\n  posterUsername: PropTypes.string,\n  authUsername: PropTypes.string,\n  created: PropTypes.string,\n  voteDisplayState: PropTypes.number,\n  handleDeletePost: PropTypes.func,\n}\n\nexport default withRouter(PostPanel);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router';\n\nimport PostPanel from '../../components/PostPanel';\nimport { getPostById } from '../../reducers/postList';\nimport { getAuthUsername } from '../../reducers/userAuth';\nimport { makeDeletePostRequest } from '../../actions/Posts';\n\n\nconst PostPanelContainer = (props) => {\n  const { post, handleDeletePost, authUsername, usage } = props;\n  const {\n    upvotes,\n    pk,\n    title,\n    subredditTitle,\n    posterUsername,\n    created,\n    voteDisplayState,\n  } = post;\n  \n  return (\n    <PostPanel\n      {...{\n        upvotes,\n        pk,\n        title,\n        subredditTitle,\n        posterUsername,\n        authUsername,\n        created,\n        voteDisplayState,\n        handleDeletePost,\n      }}\n    />\n  );\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  const {\n    postPk,\n    usage,\n  } = ownProps;\n\n  return ({\n      post: getPostById(state, postPk),\n      authUsername: getAuthUsername(state),\n    })\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  handleDeletePost: () => dispatch(makeDeletePostRequest(ownProps.postPk)),\n})\n\nPostPanelContainer.propTypes = {\n  post: PropTypes.shape({\n    upvotes: PropTypes.number,\n    pk: PropTypes.number,\n    title: PropTypes.string,\n    subredditTitle: PropTypes.string,\n    posterUsername: PropTypes.string,\n    created: PropTypes.string,\n    voteDisplayState: PropTypes.oneOf([0,-1,1]),\n  }),\n  handleDeletePost: PropTypes.func,\n  authUsername: PropTypes.string,\n  usage: PropTypes.oneOf(['subreddit', 'search']),\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(PostPanelContainer);\n","import React from \"react\";\n\nconst EmptyPostList = () => (\n  <div className=\"empty-list-content\">\n    <h2>Such Empty!</h2>\n  </div>\n);\n\nexport default EmptyPostList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router';\n\nimport PostPanelContainer from '../../containers/PostPanelContainer';\nimport { ErrorAlert } from '../AlertMessage';\nimport { PanelListLoader } from '../Loaders';\nimport EmptyPostList from './EmptyPostList';\nimport './styles.css';\n\nconst PostList = (props) => {\n  const {\n    loading,\n    error,\n    allPosts,\n  } = props;\n\n  \n  if (error) {\n    return(\n      <ErrorAlert>\n        {error}\n      </ErrorAlert>\n    )\n  }\n  \n  let postList;\n  if (loading) {\n    postList =  <PanelListLoader panelNumber={8}/>;\n  } else if (allPosts.length === 0 ){\n    postList = <EmptyPostList />;\n  } else{\n      const postPanels = allPosts.map((postPk) => {\n        return <PostPanelContainer postPk={postPk} key={postPk} />});\n      postList = <ul>{postPanels}</ul>\n  }\n  \n  return (\n    <div className='postlist-content'>\n        {postList}\n    </div>\n  );\n}\n\nPostList.propTypes = {\n  loading: PropTypes.bool,\n  error: PropTypes.string,\n  allPosts: PropTypes.arrayOf(PropTypes.number),\n}\n\nexport default withRouter(PostList);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { makeSubPostListRequest } from \"../../actions/Posts\";\nimport PostList from \"../../components/PostList\";\n\nclass PostListContainer extends Component {\n  componentDidMount() {\n    // If undefined converts to null\n    const subredditTitle = this.props.match.params.subredditTitle || \"home\";\n\n    this.props.fetchPostList(subredditTitle, \"new\");\n  }\n\n  componentDidUpdate(prevProps) {\n    // If undefined converts to null\n    const subredditTitle = this.props.match.params.subredditTitle || \"home\";\n\n    if (\n      this.props.match.params.subredditTitle !==\n      prevProps.match.params.subredditTitle\n    ) {\n      this.props.fetchPostList(subredditTitle, \"new\");\n    }\n  }\n\n  render() {\n    return <PostList {...this.props} />;\n  }\n}\n\nconst mapStateToProps = state => ({\n  loading: state.postList.loading,\n  error: state.postList.error,\n  allPosts: state.postList.allPosts\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchPostList: (subredditTitle, orderBy) =>\n    dispatch(makeSubPostListRequest(subredditTitle, orderBy))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(PostListContainer);\n","import React from 'react';\n\nimport { Link } from 'react-router-dom';\nimport './styles.css';\n\nconst PostInfoLine = ({title, poster}) => (\n  <div className='post-info-line'>\n    <div className='link-to-sub'>\n      <Link to={`/r/${title}`}>\n        {`r/${title}`}\n      </Link>\n    </div>\n    <span id='divider'>-</span>\n    <div className='link-to-user'>\n      <Link to={`/u/${poster}`}>\n        {`Posted by u/${poster}`}\n      </Link>\n    </div>\n  </div>\n)\n\nexport default PostInfoLine;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport TextEditor from '../../components/TextEditor'\nimport {\n  makeUpdatePostRequest,\n} from '../../actions/Posts';\nimport {\n  getPostDetailBody\n} from '../../reducers/postDetail';\nimport {\n  getEditPostLoading,\n} from '../../reducers/editPost';\n\n\nconst PostEditorContainer = (props) => {\n  const {\n    handleSubmit,\n    body,\n    loading,\n  } = props;\n  \n  return (\n    <TextEditor\n      handleSubmit={handleSubmit}\n      placeholder={body}\n      initialValue={body}\n      usage=\"update\"\n      loading={loading}\n    />\n  )\n}\n\nPostEditorContainer.propTypes = {\n  onEditorSubmit: PropTypes.func,\n  handleSubmit: PropTypes.func,\n  body: PropTypes.string,\n};\n\nconst mapStateToProps = (state) => ({\n  loading: getEditPostLoading(state),\n})\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  handleSubmit: async (body) => {\n    try {\n      await dispatch(makeUpdatePostRequest(ownProps.pk, body));\n    } catch {\n    }\n    // Callback to effect some change when submission occurs (like hide the editor)\n    ownProps.onEditorSubmitSuccess && ownProps.onEditorSubmitSuccess();\n    \n  },\n});\n\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(PostEditorContainer);\n","import { normalize, schema } from 'normalizr';\n\nimport {\n  FETCH_POST_COMMENT_TREES_REQUEST,\n  FETCH_POST_COMMENT_TREES_SUCCESS,\n  FETCH_POST_COMMENT_TREES_FAILURE,\n  API_POST_COMMENT_TREES,\n  CREATE_COMMENT_REQUEST,\n  CREATE_COMMENT_SUCCESS,\n  CREATE_COMMENT_FAILURE,\n  API_CREATE_COMMENT,\n  DELETE_COMMENT_REQUEST,\n  DELETE_COMMENT_SUCCESS,\n  DELETE_COMMENT_FAILURE,\n  API_DELETE_COMMENT,\n  UPDATE_COMMENT_REQUEST,\n  UPDATE_COMMENT_SUCCESS,\n  UPDATE_COMMENT_FAILURE,\n  API_UPDATE_COMMENT,\n  COMMENT_VOTE_SUCCESS,\n} from '../actionTypes';\nimport {\n  createCommentApi,\n  getCommentTreeApi,\n  commentVoteApi,\n  deleteCommentApi,\n  updateCommentApi,\n} from '../../api/Comments'\n\n// Use redux-thunk to get the userAuth username\nexport const makeCommentTreeRequest = (postPk) =>\n  (dispatch, getState) => dispatch(\n    {\n      type: API_POST_COMMENT_TREES,\n      types: {\n        request: FETCH_POST_COMMENT_TREES_REQUEST,\n        success: normalizeCommentTreeOnSuccess,\n        failure: FETCH_POST_COMMENT_TREES_FAILURE,\n      },\n      callAPI: () => getCommentTreeApi(postPk, getState().userAuth.username),\n    }\n  )\n  \n// When comment trees are successfully fetched, normalize them for redux store\nconst normalizeCommentTreeOnSuccess = (nestedComments, getState, dispatch) => {\n  if (nestedComments.length === 0) {\n    return dispatch({\n      type: FETCH_POST_COMMENT_TREES_SUCCESS,\n      data: {entities: {comments: {}, posters: {} }, result: [] },\n    })\n  }\n  const posterSchema = new schema.Entity('posters', {}, { idAttribute: 'pk' });\n  const commentSchema = new schema.Entity(\n    'comments',\n    {poster: posterSchema},\n    { idAttribute: 'pk',}\n  );\n  const commentListSchema = new schema.Array(commentSchema);\n  commentSchema.define({ children: commentListSchema })\n  const normalizedComments = normalize(nestedComments, commentListSchema);\n  Object.entries(normalizedComments.entities.comments).forEach(([id, comment]) => {\n    const {vote_state, ...newComment} = comment;\n    normalizedComments.entities.comments[id] = {\n      ...newComment,\n      voteDisplayState: vote_state\n    };\n  });\n  return dispatch({\n    type: FETCH_POST_COMMENT_TREES_SUCCESS,\n    data: normalizedComments\n  })\n}\n\n// Use redux-thunk to grab the userAuth token\nexport const makeCreateCommentRequest = (commentData) =>\n  (dispatch, getState) =>\n    dispatch(\n      {\n        type: API_CREATE_COMMENT,\n        types: {\n          request: CREATE_COMMENT_REQUEST,\n          success: CREATE_COMMENT_SUCCESS,\n          failure: CREATE_COMMENT_FAILURE,\n        },\n        callAPI: () => createCommentApi(\n          commentData,\n          getState().userAuth.token\n        ),\n      }\n    )\n    \n// Use redux-thunk to grab the userAuth token\nexport const makeDeleteCommentRequest = (pk) =>\n  (dispatch, getState) =>\n    dispatch(\n      {\n        type: API_DELETE_COMMENT,\n        types: {\n          request: DELETE_COMMENT_REQUEST,\n          success: DELETE_COMMENT_SUCCESS,\n          failure: DELETE_COMMENT_FAILURE,\n        },\n        callAPI: () => deleteCommentApi(\n          pk,\n          getState().userAuth.token\n        ),\n      }\n    )\n    \n// Use redux-thunk to grab the userAuth token\nexport const makeUpdateCommentRequest = (commentData) =>\n  (dispatch, getState) =>\n    dispatch(\n      {\n        type: API_UPDATE_COMMENT,\n        types: {\n          request: UPDATE_COMMENT_REQUEST,\n          success: UPDATE_COMMENT_SUCCESS,\n          failure: UPDATE_COMMENT_FAILURE,\n        },\n        callAPI: () => updateCommentApi(\n          commentData,\n          getState().userAuth.token\n        ),\n      }\n    )\n","import axios from 'axios';\n\nimport {\n POST_COMMENT_TREES_URL,\n COMMENT_LIST_URL,\n VOTE_URL,\n COMMENT_DETAIL_URL,\n} from '../constants'\nimport { tokenContextObj } from '../apiUtils';\n\nexport const getCommentTreeApi = (postPk, username) => {\n  const config = username ? {params: {username}} : {};\n  \n  return axios.get(POST_COMMENT_TREES_URL(postPk), config)\n      .then(response => response.data)\n}\n\nexport const createCommentApi = (commentData, token) => {\n  const {\n    body,\n    parentPk,\n    rootComment,\n  } = commentData;\n  // See backend, a 'fullname' is constructed to specify the parent of the comment\n  const parentFn = rootComment ? `t2_${parentPk}` : `t1_${parentPk}`;\n  const data = {body, parent_fn:parentFn};\n  return axios.post(COMMENT_LIST_URL, data, tokenContextObj(token))\n    .then(response => response.data)\n}\n\nexport const deleteCommentApi = (pk, token) => {\n  return axios.delete(COMMENT_DETAIL_URL(pk), tokenContextObj(token))\n    .then(response => response.data)\n}\n\nexport const updateCommentApi = (commentData, token) => {\n  return axios.patch(\n    COMMENT_DETAIL_URL(commentData.pk),\n    commentData,\n    tokenContextObj(token)\n  )\n    .then(response => response.data)\n}\n\nexport const commentVoteApi = (voteData, token) => {\n  const {\n    vote_type,\n    comment_pk: comment,\n  } = voteData;\n  \n  const data = {vote_type, item_fn: `t1_${comment}`};//comment};\n  return axios.post(VOTE_URL, data, tokenContextObj(token))\n    .then(response => response.data)\n}\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\nimport TextEditor from \"../../components/TextEditor\";\nimport {\n  makeCreateCommentRequest,\n  makeUpdateCommentRequest\n} from \"../../actions/Comments\";\nimport { getPostDetailPk } from \"../../reducers/postDetail\";\n\nconst CommentEditorContainer = props => {\n  return <TextEditor {...props} />;\n};\n\nconst mapStateToProps = (state, ownProps) => ({\n  // should the editor be focues on after mounting?\n  focusOnEditor: ownProps.rootComment\n});\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  // This is used for two occasions, creating and updating a comment.\n  switch (ownProps.usage) {\n    case \"create\": {\n      const handleSubmit = commentBody =>\n        dispatch(\n          makeCreateCommentRequest({\n            body: commentBody,\n            parentPk: ownProps.parentPk,\n            rootComment: ownProps.rootComment\n          })\n        );\n      return { handleSubmit };\n    }\n\n    case \"update\": {\n      const handleSubmit = body => {\n        // onEditorSubmit is a hook so that the parent component\n        // can effect changes beyond the action dispatch, e.g. toggle editor\n        ownProps.onEditorSubmit && ownProps.onEditorSubmit();\n\n        return dispatch(\n          makeUpdateCommentRequest({\n            body,\n            pk: ownProps.pk\n          })\n        );\n      };\n      return { handleSubmit };\n    }\n\n    default:\n      return {};\n  }\n};\n\n// const mergeProps = (stateProps, dispatchProps, ownProps) => {\n//   // This mess is caused by the late determination of parentPk in mapStateToProps\n//   if (ownProps.usage === 'create') {\n//     const handleSubmit = dispatchProps.handleCreateCommentWrapper(\n//       stateProps.parentPk\n//     );\n//\n//     return ({\n//       ...stateProps,\n//       ...ownProps,\n//       handleSubmit,\n//     });\n//   }\n//   return {...ownProps, ...stateProps, ...dispatchProps};\n// }\n\nCommentEditorContainer.propTypes = {\n  usage: PropTypes.oneOf([\"update\", \"create\"]).isRequired,\n  rootComment: PropTypes.bool,\n  commentParentPk: PropTypes.number,\n  pk: PropTypes.number,\n  postPk: PropTypes.number,\n  handleCreateComment: PropTypes.func,\n  onEditorSubmit: PropTypes.func,\n  handleSubmit: PropTypes.func.isRequired\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(CommentEditorContainer);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './styles.css';\n\nconst CommentInfoLine = (props) => {\n  \n  const {\n    posterUsername,\n    upvotes,\n    created,\n    deleted,\n  } = props;\n  \n  const upvotesLabel = upvotes^2===1 ? 'point' : 'points';\n  const username = deleted\n    ? \"comment deleted\"\n    : <Link to={\"/\"}>\n        {`u/${posterUsername}`}\n      </Link>;\n      \n  return (\n    <div className=\"poster-info-container\">\n      <span>{username}</span>\n      <span>{deleted || `${upvotes} ${upvotesLabel}`}</span>\n      <span>-</span>\n      <span>{`created: ${created}`}</span>\n    </div>\n  )\n}\n\nexport default CommentInfoLine;\n","import React, { Component, Fragment } from \"react\";\nimport { FaComment } from \"react-icons/fa\";\nimport { Button, MenuItem } from \"react-bootstrap\";\nimport PropTypes from \"prop-types\";\n\nimport EllipsisButton from \"../../EllipsisButton\";\nimport { withMaybe } from \"../../../utilities/HOC\";\nimport \"./styles.css\";\n\nclass CommentBody extends Component {\n  render() {\n    const {\n      body,\n      posterUsername,\n      authUsername,\n      pk,\n      handleDeleteComment,\n      handleToggleReplyEditor,\n      handleToggleUpdateEditor\n    } = this.props;\n\n    const AuthEllipsis = withMaybe(\n      props => props.authUsername === props.posterUsername\n    )(EllipsisButton);\n\n    return (\n      <Fragment>\n        <div\n          className=\"comment-body-container\"\n          dangerouslySetInnerHTML={{ __html: body }}\n        />\n        <div className=\"comment-links\">\n          <div className=\"comment-icon\">\n            <FaComment />\n          </div>\n          <Button\n            bsSize=\"xsmall\"\n            className=\"comment-buttons\"\n            onClick={handleToggleReplyEditor}\n          >\n            Reply\n          </Button>\n          {/* This may be nice but for now we don't have a comment detail page\n            <Button bsSize='xsmall' className='comment-buttons'>\n              Share\n            </Button>\n          */}\n          <AuthEllipsis\n            {...{\n              authUsername,\n              posterUsername\n            }}\n          >\n            <MenuItem eventKey={2} onSelect={handleToggleUpdateEditor}>\n              edit\n            </MenuItem>\n            <MenuItem eventKey={1} onSelect={handleDeleteComment}>\n              delete\n            </MenuItem>\n          </AuthEllipsis>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nCommentBody.propTypes = {\n  body: PropTypes.string,\n  posterUsername: PropTypes.string,\n  authUsername: PropTypes.string,\n  pk: PropTypes.number,\n  handleDeleteComment: PropTypes.func,\n  handleToggleReplyEditor: PropTypes.func,\n  handleToggleUpdateEditor: PropTypes.func\n};\n\nexport default CommentBody;\n","import React, { Component, Fragment } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { FaComment } from \"react-icons/fa\";\nimport { compose } from \"recompose\";\n\nimport \"./styles.css\";\nimport CommentEditorContainer from \"../../../containers/CommentEditorContainer\";\nimport CommentInfoLine from \"../CommentInfoLine\";\nimport CommentBody from \"../CommentBody\";\nimport VoterContainer from \"../../../containers/VoterContainer\";\nimport { withMaybe, withEither } from \"../../../utilities/HOC\";\n\nclass ExpandedComment extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      showReplyEditor: false,\n      showUpdateEditor: false\n    };\n\n    this.handleToggleReplyEditor = this.handleToggleReplyEditor.bind(this);\n    this.handleToggleUpdateEditor = this.handleToggleUpdateEditor.bind(this);\n  }\n\n  handleToggleReplyEditor() {\n    this.setState({\n      showReplyEditor: !this.state.showReplyEditor\n    });\n  }\n\n  handleToggleUpdateEditor() {\n    this.setState({\n      showUpdateEditor: !this.state.showUpdateEditor\n    });\n  }\n\n  render() {\n    const {\n      childrenList,\n      body,\n      posterUsername,\n      authUsername,\n      upvotes,\n      created,\n      pk,\n      voteDisplayState,\n      deleted,\n      handleToggleCollapse: handleCollapse,\n      handleDeleteComment\n    } = this.props;\n\n    const ReplyEditorWithHide = withMaybe(props => props.showEditor)(\n      CommentEditorContainer\n    );\n\n    const CommentBodyWithDeleteAndUpdateEditor = compose(\n      withMaybe(props => !props.deleted),\n      withEither(props => props.showUpdateEditor, CommentEditorContainer)\n    )(CommentBody);\n\n    const updateEditorProps = {};\n\n    return (\n      <div className=\"comment-tree-content\">\n        <div className=\"comment-voter-collapser\">\n          {deleted || (\n            <VoterContainer\n              voteDisplayState={voteDisplayState}\n              itemType={\"comment\"}\n              itemPk={pk}\n            />\n          )}\n          <span\n            onClick={() => handleCollapse()}\n            className=\"thread-line-container\"\n          >\n            <div className=\"thread-line\" />\n          </span>\n        </div>\n        <div className=\"comment-panel\">\n          <div className=\"comment-info-line-container\">\n            <CommentInfoLine\n              {...{ posterUsername, upvotes, created, deleted }}\n            />\n          </div>\n\n          <CommentBodyWithDeleteAndUpdateEditor\n            {...{\n              body,\n              posterUsername,\n              authUsername,\n              pk,\n              deleted,\n              handleDeleteComment\n            }}\n            usage=\"update\"\n            initialValue={body}\n            onBlur={this.handleToggleUpdateEditor}\n            onEditorSubmit={this.handleToggleUpdateEditor}\n            showUpdateEditor={this.state.showUpdateEditor}\n            handleToggleReplyEditor={this.handleToggleReplyEditor}\n            handleToggleUpdateEditor={this.handleToggleUpdateEditor}\n          />\n\n          <ReplyEditorWithHide\n            showEditor={this.state.showReplyEditor}\n            rootComment={false}\n            parentPk={pk}\n            usage=\"create\"\n            onBlur={this.handleToggleReplyEditor}\n          />\n          <div className=\"children-container\">{childrenList}</div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ExpandedComment;\n","import React from 'react';\nimport { IoIosAddCircle } from 'react-icons/io';\nimport { Link } from 'react-router-dom';\n\nimport CommentInfoLine from '../CommentInfoLine';\nimport './styles.css';\n\nconst CollapsedComment = (props) => {\n  const {\n    posterUsername,\n    upvotes,\n    created,\n    deleted,\n    handleToggleCollapse:handleExpansion,\n  } = props;\n  \n  return (\n    <div className=\"comment-tree-content collapsed-container\">\n      <div onClick={() => handleExpansion()} className=\"expander\">\n        <IoIosAddCircle />\n      </div>\n      <div className='collapsed-links'>\n        <CommentInfoLine {...{posterUsername, upvotes, created, deleted,}}/>\n      </div>\n    </div>\n  )\n}\n\nexport default CollapsedComment;\n","import React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './styles.css';\nimport ExpandedComment from './ExpandedComment';\nimport CollapsedComment from './CollapsedComment';\nimport { withEither } from '../../utilities/HOC';\nimport CommentContainer from '../../containers/CommentContainer';\n\n\nclass Comment extends Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      collapsed: false,\n    }\n    \n    this.handleToggleCollapse = this.handleToggleCollapse.bind(this);\n  }\n  \n  handleToggleCollapse() {\n    this.setState({\n      collapsed: !this.state.collapsed,\n    })\n  }\n    \n  render() {\n    \n    const {\n      childrenPk,\n      body,\n      upvotes,\n      created,\n      pk,\n      voteDisplayState,\n      deleted,\n      posterUsername,\n      authUsername,\n      handleDeleteComment,\n    } = this.props;\n\n    let childrenList = [];\n    if (Array.isArray(childrenPk) && childrenPk.length) {\n      childrenList =\n        childrenPk.map(childPk => (\n            <CommentContainer\n              pk={childPk}\n              key={childPk}\n            />\n        ))\n      }\n    \n    const CollapsibleComment = withEither(\n      (props) => props.collapsed,\n      CollapsedComment\n    )(ExpandedComment);\n        \n    return (\n      <CollapsibleComment\n        {\n          ...{\n            childrenList,\n            body,\n            upvotes,\n            created,\n            pk,\n            voteDisplayState,\n            deleted,\n            posterUsername,\n            authUsername,\n            handleDeleteComment,\n          }\n        }\n        handleToggleCollapse={this.handleToggleCollapse}\n        collapsed={this.state.collapsed}\n      />\n    )\n  }\n}\n\nComment.propTypes = {\n  childrenPk: PropTypes.arrayOf(PropTypes.number),\n  body: PropTypes.string,\n  upvotes: PropTypes.number,\n  created: PropTypes.string,\n  pk: PropTypes.number,\n  voteDisplayState: PropTypes.number,\n  deleted: PropTypes.bool,\n  posterUsername: PropTypes.string,\n  authUsername: PropTypes.string,\n  handleDeleteComment: PropTypes.func,\n}\n\nexport default Comment;\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport Comment from '../../components/Comment';\nimport {\n  getCommentById,\n  getPosterByCommentId, } from '../../reducers/comments';\nimport { getAuthUsername } from '../../reducers/userAuth';\nimport { makeDeleteCommentRequest } from '../../actions/Comments';\n\nconst CommentContainer = (props) => {\n  \n  const {\n    commentData,\n    posterData,\n    authUsername,\n    handleDeleteComment,\n    pk\n    } = props;\n  const {\n    children: childrenPk,\n    body,\n    upvotes,\n    created,\n    voteDisplayState,\n    deleted,\n  } = commentData;\n  const posterUsername  = (posterData && posterData.username) || authUsername;\n  return (\n    <Comment\n      {...{\n        childrenPk,\n        body,\n        upvotes,\n        created,\n        pk,\n        voteDisplayState,\n        deleted,\n        posterUsername,\n        authUsername,\n        handleDeleteComment,\n        }}\n    />\n  )\n}\n\nconst mapStateToProps = (state, ownProps) => (\n  {\n      commentData: getCommentById(state, ownProps.pk),\n      posterData: getPosterByCommentId(state, ownProps.pk),\n      authUsername: getAuthUsername(state),\n  }\n)\n\nconst mapDispatchToProps = (dispatch, ownProps) => (\n  {\n    handleDeleteComment: () => dispatch(makeDeleteCommentRequest(ownProps.pk)),\n  }\n)\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(CommentContainer);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { PanelListLoader } from \"../Loaders\";\nimport { ErrorAlert } from \"../AlertMessage\";\nimport CommentContainer from \"../../containers/CommentContainer\";\nimport CommentEditorContainer from \"../../containers/CommentEditorContainer\";\nimport { withMaybe, withEither } from \"../../utilities/HOC\";\n\nconst CommentTreeList = props => {\n  const {\n    rootCommentPks,\n    error,\n    loading,\n    postPk,\n    createCommentError,\n    createCommentLoading\n  } = props;\n\n  if (error) {\n    return <ErrorAlert>{error}</ErrorAlert>;\n  }\n\n  let commentRootList = [];\n  if (Array.isArray(rootCommentPks) && rootCommentPks.length) {\n    commentRootList = rootCommentPks.map(rootPk => (\n      <CommentContainer pk={rootPk} key={rootPk} />\n    ));\n  }\n\n  // Error with root comment creation\n  const AlertOnError = withMaybe(props => props.children)(ErrorAlert);\n\n  const CommentListWithLoading = withEither(\n    props => props.loading,\n    PanelListLoader\n  )(() => commentRootList);\n\n  return (\n    <div className=\"comment-tree-list-container\">\n      <AlertOnError children={createCommentError} />\n      <div className=\"top-comment-editor\">\n        <CommentEditorContainer\n          parentPk={postPk}\n          rootComment={true}\n          usage=\"create\"\n        />\n      </div>\n\n      <ul>\n        <CommentListWithLoading loading={loading} panelNumber={10} />\n      </ul>\n    </div>\n  );\n};\n\nCommentTreeList.propTypes = {\n  rootCommentPks: PropTypes.arrayOf(PropTypes.number),\n  error: PropTypes.string,\n  loading: PropTypes.bool,\n  createCommentError: PropTypes.string,\n  createCommentLoading: PropTypes.bool\n};\n\nexport default CommentTreeList;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router';\n\nimport {\n  makeCommentTreeRequest,\n  makeCreateCommentRequest,\n} from '../../actions/Comments';\nimport CommentTreeList from '../../components/CommentTreeList';\nimport { getRootCommentPks, getCommentsLoading, } from '../../reducers/comments';\nimport { getPostDetailPk } from '../../reducers/postDetail';\n\nclass CommentTreeListContainer extends Component {\n  componentDidMount() {\n    this.props.fetchCommentList(this.props.match.params.postId)\n  }\n  \n  \n  \n  render() {\n    return <CommentTreeList {...this.props} />\n  }\n}\n\nconst mapStateToProps = state => (\n  {\n    loading: getCommentsLoading(state),\n    rootCommentPks: getRootCommentPks(state),\n    error: state.comments.error,\n    createCommentError: state.comments.createCommentError,\n    createCommentLoading: state.comments.createCommentLoading,\n    createdComment: state.comments.createdComment,\n    postPk: getPostDetailPk(state),\n  }\n)\n\nconst mapDispatchToProps = dispatch => (\n  {\n    fetchCommentList: (postId) => dispatch(makeCommentTreeRequest(postId)),\n  }\n)\n\n\nexport default  withRouter(connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(CommentTreeListContainer));\n","import React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { Panel, Button, MenuItem, Tooltip, OverlayTrigger } from 'react-bootstrap';\nimport { FaShare } from 'react-icons/fa';\nimport { withRouter } from 'react-router';\n\n\nimport './styles.css';\nimport { PanelListLoader, BlockLoader } from '../Loaders';\nimport PostInfoLine from './PostInfoLine';\nimport PostEditorContainer from '../../containers/PostEditorContainer';\nimport CommentTreeListContainer from '../../containers/CommentTreeListContainer';\nimport EllipsisButton from '../EllipsisButton';\nimport ShareButton from '../ShareButton';\nimport { withMaybe } from '../../utilities/HOC';\n\nclass PostDetail extends Component{\n  constructor(props) {\n    super(props);\n    \n    this.commentListNode = React.createRef()\n    \n    this.handleDelete = this.handleDelete.bind(this);\n  }\n  \n  componentDidMount() {\n    if (this.props.commentScroll) {\n      this.scrollToCommentList();\n    } else {\n      window.scrollTo(0,0);\n    }\n  }\n  \n  // Only scroll to comments when first navigating to page\n  componentDidUpdate(prevProps) {\n    if (this.props.commentScroll && (prevProps.pk !== this.props.pk)) {\n      this.scrollToCommentList();\n    }\n  }\n  \n  scrollToCommentList = () => {\n    window.scrollTo({\n      top: this.commentListNode.current.offsetTop,\n      behavior: \"smooth\",\n    })\n  }\n  \n  async handleDelete() {\n    // Make sure the post is actually deleted before rerouting which\n    // causes the list to reload\n    await this.props.handleDeletePost();\n    this.props.history.replace(`/r/${this.props.subredditTitle}`);\n  }\n  \n  render () {\n    const {\n      subredditTitle,\n      posterUsername,\n      authUsername,\n      title,\n      pk,\n      body,\n      loading,\n      showPostEditor,\n      handleDeletePost,\n      togglePostEditor,\n    } = this.props;\n    \n    const AuthEllipsis = withMaybe(\n      (props) => props.showEllipsis\n    )(EllipsisButton);\n    \n    return (\n      <div className='post-detail-content'>\n        {loading\n          ? <BlockLoader/>\n          :\n            <Fragment>\n            <PostInfoLine title={subredditTitle} poster={posterUsername} />\n            <div className='post-title-container'>\n              {title}\n            </div>\n            <div className='post-body-container'>\n              {showPostEditor\n                ? (\n                  <PostEditorContainer\n                    {...{body, pk,}}\n                    onEditorSubmitSuccess={togglePostEditor}\n                  />\n                )\n                : (\n                  <div\n                    className='body-html'\n                    dangerouslySetInnerHTML={{__html: body}}\n                  />\n                )\n              }\n            </div>\n            \n            <div className='link-bar-container'>\n              <ShareButton shareUrl={`${window.location.href}`} />\n              \n              <AuthEllipsis\n                showEllipsis={authUsername===posterUsername}\n              >\n                <MenuItem\n                  eventKey={1}\n                  onSelect={this.handleDelete}\n                >\n                  delete\n                </MenuItem>\n                <MenuItem\n                  eventKey={2}\n                  onSelect={togglePostEditor}\n                >\n                  edit\n                </MenuItem>\n                \n              </AuthEllipsis>\n              \n            </div>\n            </Fragment>\n          }\n          \n          <div className=\"post-comments-container\" ref={this.commentListNode}>\n            <CommentTreeListContainer />\n          </div>\n\n      </div>\n    )\n  }\n}\n\nPostDetail.propTypes = {\n  title: PropTypes.string,\n  posterUsername: PropTypes.string,\n  authUsername: PropTypes.string,\n  postTitle: PropTypes.string,\n  postBody: PropTypes.string,\n  loading: PropTypes.bool,\n  showPostEditor: PropTypes.bool,\n  commentScroll: PropTypes.bool,\n  handleDeletePost: PropTypes.func,\n  togglePostEditor: PropTypes.func,\n}\n\nexport default withRouter(PostDetail);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport PostDetail from '../../components/PostDetail';\nimport {\n  makePostDetailRequest,\n  makeDeletePostRequest,\n  togglePostEditor,\n} from '../../actions/Posts';\nimport {\n  getPostDetailPk,\n  getPostDetailBody,\n  getPostDetailTitle,\n  getPostDetailPosterUsername,\n  getPostDetailLoading,\n} from '../../reducers/postDetail';\nimport { getAuthUsername, } from '../../reducers/userAuth';\nimport {\n  getPostEditorShowState,\n  getEditPostError,\n} from '../../reducers/editPost';\n\n\nclass PostDetailContainer extends Component {\n  componentDidMount() {\n    const postId = this.props.match.params.postId || null;\n    this.props.fetchPostDetail(postId);\n  }\n  \n  componentWillUnmount() {\n    if (this.props.showPostEditor) {\n      this.props.togglePostEditor();\n    }\n  }\n  \n  render() {\n        \n    const {\n      body,\n      title,\n      subredditTitle,\n      posterUsername,\n      authUsername,\n      pk,\n      loading,\n      showPostEditor,\n      editPostError,\n      commentScroll,\n      handleDeletePost,\n      togglePostEditor,\n    } = this.props;\n    \n    return <PostDetail {...{\n        body,\n        title,\n        subredditTitle,\n        posterUsername,\n        authUsername,\n        pk,\n        loading,\n        showPostEditor,\n        editPostError,\n        commentScroll,\n        handleDeletePost,\n        togglePostEditor,\n      }} />;\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => (\n  {\n    subredditTitle: ownProps.title,\n    body: getPostDetailBody(state),\n    title: getPostDetailTitle(state),\n    posterUsername: getPostDetailPosterUsername(state),\n    pk: getPostDetailPk(state),\n    loading: getPostDetailLoading(state),\n    showPostEditor: getPostEditorShowState(state),\n    editPostError: getEditPostError(state),\n    authUsername: getAuthUsername(state),\n  }\n)\n\nconst mapDispatchToProps = (dispatch, ownProps,) => (\n  {\n    fetchPostDetail: (postId) => dispatch(makePostDetailRequest(postId)),\n    handleDeletePost: () => dispatch(makeDeletePostRequest(\n        Number(ownProps.match.params.postId)\n      )),\n    togglePostEditor: () => dispatch(togglePostEditor()),\n  }\n)\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(PostDetailContainer);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router';\n\nimport TextEditor from '../TextEditor';\nimport FieldGroup from  '../FieldGroup';\nimport { ErrorAlertWithError } from '../AlertMessage';\nimport FormButton from '../ModalForm/FormButton';\nimport './styles.css';\n\nclass CreateSubreddit extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      description: '',\n      title: '',\n    };\n    \n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  \n  handleTitleChange = (e) => this.setState({title: e.target.value});\n  \n  handleDescriptionChange = (e) =>\n    this.setState({description: e.target.value});\n    \n  async handleSubmit() {\n    try {\n      await this.props.handleCreateSubreddit({\n        title: this.state.title,\n        description: this.state.description,\n      });\n      this.props.history.push(`/r/${this.state.title}`);\n    }\n    catch {\n      this.forceUpdate();\n    }\n  }\n    \n  render() {\n    const {\n      errorMessage,\n      loading,\n      handleCreateSubreddit,\n    } = this.props;\n    \n    return (\n      <div className=\"create-subreddit-container\">\n        <div className=\"content-container\">\n          <div className=\"form-container\">\n            \n            <h2>Create a Subreddit</h2>\n            <hr/>\n            <ErrorAlertWithError>\n              {errorMessage}\n            </ErrorAlertWithError>\n            \n            <form>\n              <div className=\"input-container\">\n                <FieldGroup\n                  id=\"title-input\"\n                  placeholder=\"title\"\n                  type='text'\n                  value={this.state.title}\n                  onChange={this.handleTitleChange}\n                  name='title'\n                />\n                <FieldGroup\n                  id=\"description-input\"\n                  placeholder=\"description\"\n                  componentClass=\"textarea\"\n                  onChange={this.handleDescriptionChange}\n                />\n              </div>\n              <div className=\"submit-button\">\n                <FormButton\n                  bsStyle=\"primary\"\n                  handleClick={this.handleSubmit}\n                  loading={loading}\n                >\n                  create\n                </FormButton>\n              </div>\n            </form>\n          </div>\n        </div>\n          \n      </div>\n    )\n  }\n}\n\nCreateSubreddit.propTypes = {\n  loading: PropTypes.bool,\n  error: PropTypes.string,\n  handleCreateSubreddit: PropTypes.func,\n}\n\nexport default withRouter(CreateSubreddit);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport CreateSubreddit from '../../components/CreateSubreddit';\nimport { makeCreateSubredditRequest } from '../../actions/Subreddit';\nimport {\n  getCreateSubredditError,\n  getCreateSubredditLoading,\n} from '../../reducers/createSubreddit';\n\n\nclass CreateSubredditContainer extends Component {\n  \n  render() {\n    const {\n      errorMessage,\n      loading,\n      handleCreateSubreddit,\n    } = this.props;\n    \n    return (\n      <CreateSubreddit {...{\n        errorMessage,\n        loading,\n        handleCreateSubreddit,\n      }}/>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  errorMessage: getCreateSubredditError(state),\n  loading: getCreateSubredditLoading(state),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  handleCreateSubreddit: (subredditData) =>\n    dispatch(makeCreateSubredditRequest(subredditData)),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(CreateSubredditContainer);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { SubscriptionButton } from \"../../components/Buttons\";\nimport {\n  getAuthUsername,\n  getAuthUserSubredditTitles\n} from \"../../reducers/userAuth\";\nimport { makeSubSubscriptionRequest } from \"../../actions/Subreddit\";\n\nconst SubscriptionButtonContainer = props => {\n  const {\n    authenticatedUsername,\n    userSubscriptions,\n    subredditTitle,\n    makeSubscriptionRequest\n  } = props;\n\n  return (\n    <SubscriptionButton\n      {...{\n        authenticatedUsername,\n        userSubscriptions,\n        subredditTitle,\n        makeSubscriptionRequest\n      }}\n    />\n  );\n};\n\nconst mapStateToProps = state => ({\n  authenticatedUsername: getAuthUsername(state),\n  userSubscriptions: getAuthUserSubredditTitles(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  makeSubscriptionRequest: (subredditTitle, subAction) =>\n    dispatch(makeSubSubscriptionRequest(subredditTitle, subAction))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SubscriptionButtonContainer);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport SubscriptionButtonContainer from \"../../containers/SubscriptionButtonContainer\";\nimport \"./styles.css\";\n\nconst SubredditPanel = ({ subreddit, handleSubredditRedirect }) => (\n  <div className=\"subreddit-panel\" onClick={handleSubredditRedirect}>\n    <div className=\"title-and-subscriptions\">\n      <h1>r/{subreddit.title}</h1>\n      <p>{subreddit.members.length} Subscribers </p>\n    </div>\n\n    <div className=\"description\">\n      <p>{subreddit.description}</p>\n    </div>\n\n    <div className=\"subscription-button\">\n      <SubscriptionButtonContainer subredditTitle={subreddit.title} />\n    </div>\n  </div>\n);\n\nSubredditPanel.propTypes = {\n  subreddit: PropTypes.shape({\n    title: PropTypes.string,\n    members: PropTypes.arrayOf(PropTypes.string),\n    description: PropTypes.string\n  })\n};\n\nexport default SubredditPanel;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router\";\n\nimport SubredditPanel from \"../../components/SubredditPanel\";\nimport { getSearchSubredditById } from \"../../reducers/search\";\nimport { SUBREDDIT_URL } from \"../../urls\";\n\nclass SubredditPanelContainer extends Component {\n  handleSubredditRedirect = () =>\n    this.props.history.push(SUBREDDIT_URL(this.props.subreddit.title));\n\n  render() {\n    const { subreddit } = this.props;\n\n    return (\n      <SubredditPanel\n        subreddit={subreddit}\n        handleSubredditRedirect={this.handleSubredditRedirect}\n      />\n    );\n  }\n}\n\nconst mapStateToProps = (state, { pk }) => ({\n  subreddit: getSearchSubredditById(state, pk)\n});\n\nexport default withRouter(connect(mapStateToProps)(SubredditPanelContainer));\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport SubredditPanelContainer from \"../../containers/SubredditPanelContainer\";\nimport \"./styles.css\";\n\nconst SubredditList = props => {\n  const { loading, error, allSubreddits } = props;\n\n  const subredditList = allSubreddits.map(subredditPk => (\n    <SubredditPanelContainer key={subredditPk} pk={subredditPk} />\n  ));\n\n  return (\n    <div className=\"subreddit-search-results-container\">{subredditList}</div>\n  );\n};\n\nexport default SubredditList;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button } from \"react-bootstrap\";\n\nimport PostList from \"../PostList\";\nimport SubredditList from \"../SubredditList\";\nimport NavSelectorButton from \"../Buttons/NavSelectorButton\";\nimport { withEither } from \"../../utilities/HOC\";\nimport { compose } from \"recompose\";\nimport \"./styles.css\";\n\nconst SearchResults = props => {\n  const {\n    allPosts,\n    allSubreddits,\n    allUsers,\n    loading,\n    error,\n    query,\n    resultsView,\n    changeResultsView\n  } = props;\n\n  const ConditionalResultsList = compose(\n    withEither(props => props.view === \"users\", () => null),\n    withEither(props => props.view === \"subreddits\", SubredditList)\n  )(PostList);\n\n  return (\n    <div className=\"search-results-container\">\n      <div className=\"search-navbar\">\n        <div className=\"search-query-name\">\n          <h2>Search results for: \"{query}\"</h2>\n        </div>\n\n        <div className=\"search-view-selector\">\n          <NavSelectorButton\n            active={resultsView === \"posts\"}\n            onClick={() => changeResultsView(\"posts\")}\n          >\n            Posts\n          </NavSelectorButton>\n\n          <NavSelectorButton\n            active={resultsView === \"subreddits\"}\n            onClick={() => changeResultsView(\"subreddits\")}\n          >\n            Subreddits\n          </NavSelectorButton>\n\n          <NavSelectorButton\n            active={resultsView === \"users\"}\n            onClick={() => changeResultsView(\"users\")}\n          >\n            Users\n          </NavSelectorButton>\n        </div>\n      </div>\n\n      <div className=\"results-list-container\">\n        <ConditionalResultsList\n          {...{\n            allPosts,\n            allSubreddits,\n            allUsers,\n            error,\n            loading\n          }}\n          view={resultsView}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default SearchResults;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport SearchResults from \"../../components/SearchResults\";\nimport { makeSearchRequest } from \"../../actions/Search\";\nimport { getAllPosts } from \"../../reducers/postList\";\nimport {\n  getSearchError,\n  getSearchQuery,\n  getSearchLoading,\n  getSearchAllSubreddits,\n  getSearchAllUsers,\n  getSearchResultsView\n} from \"../../reducers/search\";\nimport { setSearchResultsView } from \"../../actions/Search\";\n\nclass SearchResultsContainer extends Component {\n  componentDidMount() {\n    this.props.searchRequest(this.props.query);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.query !== this.props.query) {\n      this.props.searchRequest(this.props.query);\n    }\n  }\n\n  render() {\n    const {\n      allPosts,\n      allSubreddits,\n      allUsers,\n      error,\n      loading,\n      query,\n      resultsView,\n      changeResultsView\n    } = this.props;\n\n    return (\n      <SearchResults\n        {...{\n          allPosts,\n          allSubreddits,\n          allUsers,\n          loading,\n          error,\n          query,\n          resultsView,\n          changeResultsView\n        }}\n      />\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  query: getSearchQuery(state),\n  allPosts: getAllPosts(state),\n  allSubreddits: getSearchAllSubreddits(state),\n  allUsers: getSearchAllUsers(state),\n  error: getSearchError(state),\n  loading: getSearchLoading(state),\n  resultsView: getSearchResultsView(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  searchRequest: q => dispatch(makeSearchRequest(q)),\n  changeResultsView: view => dispatch(setSearchResultsView(view))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SearchResultsContainer);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport {\n  Route,\n  BrowserRouter,\n  Switch\n} from \"react-router-dom\";\nimport { PersistGate } from 'redux-persist/integration/react';\n\nimport './index.css';\nimport * as urls from './urls';\nimport { store, persistor } from './store';\nimport SubredditContainer from './containers/SubredditContainer';\nimport NavBarContainer from './containers/NavBarContainer';\nimport UserAuthModalContainer from './containers/UserAuthModalContainer';\nimport CreatePostContainer from './containers/CreatePostContainer';\nimport PostListContainer from './containers/PostListContainer';\nimport PostDetailContainer from './containers/PostDetailContainer';\nimport CreateSubredditContainer from './containers/CreateSubredditContainer';\nimport SearchResultsContainer from './containers/SearchResultsContainer';\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <BrowserRouter>\n        <div className=\"whole-page\">\n          <NavBarContainer />\n          <UserAuthModalContainer />\n          <div className='main-layout'>\n              <Switch>\n                <Route\n                  exact\n                  path=\"/r/:subredditTitle/:createPost\"\n                  render={ (props) =>\n                    <SubredditContainer\n                      {...props}\n                      skinny\n                      primaryComponent={(props) =>\n                        <CreatePostContainer {...props} />}\n                    />}\n                />\n                <Route\n                  exact\n                  path=\"/r/:subredditTitle/postDetail/:postId\"\n                  render={ (props) =>\n                    <SubredditContainer\n                      {...props}\n                      primaryComponent={(props) =>\n                        <PostDetailContainer {...props} />}\n                    />}\n                />\n              // Go directly to comments but otherwise same as postDetail\n                <Route\n                  exact\n                  path=\"/r/:subredditTitle/postDetail/:postId/comments\"\n                  render={ (props) =>\n                    <SubredditContainer\n                      {...props}\n                      primaryComponent={(props) =>\n                        <PostDetailContainer {...props} commentScroll />}\n                    />}\n                />\n                <Route\n                  exact\n                  path=\"/r/:subredditTitle\"\n                  render={ (props) =>\n                    <SubredditContainer\n                      {...props}\n                      primaryComponent={(props) =>\n                        <PostListContainer {...props} />}\n                    />}\n                />\n                <Route\n                  exact\n                  path=\"/createSubreddit\"\n                  render={\n                    (props) =>\n                    <CreateSubredditContainer\n                        match={props.match}\n                        history={props.history}\n                    />\n                  }\n                />\n                <Route\n                  exact\n                  path={urls.SEARCH_URL}\n                  render={\n                    (props) =>\n                    <SearchResultsContainer\n                        match={props.match}\n                        history={props.history}\n                    />\n                  }\n                />\n                <Route\n                  exact\n                  path=\"/\"\n                  render={ (props) =>\n                    <SubredditContainer\n                      {...props}\n                      primaryComponent={(props) =>\n                        <PostListContainer {...props} />}\n                    />}\n                />\n            </Switch>\n          </div>\n        </div>\n      </BrowserRouter>\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}